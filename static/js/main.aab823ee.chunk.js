(this.webpackJsonpportfolio=this.webpackJsonpportfolio||[]).push([[0],{12:function(e,n,t){},13:function(e,n,t){},16:function(e,n,t){},18:function(e,n,t){"use strict";t.r(n);var o=t(1),a=t.n(o),i=t(6),r=t.n(i),s=(t(12),t(13),t(4)),l=t.n(s),d=t(7),c=t(2),u=t(5),p=t.n(u),g={project:[{name:"InstaImgur",index:0,description:"A program made while learning how to grab and handle data from various sources. This scrapes: individual posts from instagram profiles, instagram profile pages to find new/latest posts, imgur albums, and data on an account's live streaming information on vlive.",sourceCode:[{path:'using System;\nusing System.Windows.Forms;\nusing System.IO;\n\nnamespace InstaGrabber\n{\n    public partial class Form2 : Form\n    {\n        private static SaveFileDialog ChooseDirectory = new SaveFileDialog();\n\n        public Form2()\n        {\n            InitializeComponent();\n            this.ControlBox = false; //removes window controls to prevent user from closing the form\n\n        }\n\n        //*********************************************************Accessible Form2 Properties***********************************************************************************************\n        public string TextOfDirectoryBox\n        {\n            get { return DirectoryBox.Text; }\n            set { DirectoryBox.Text = value; }\n        }\n\n        public string TextOfTxtDirectoryBox\n        {\n            get { return TxtDirectoryBox.Text; }\n            set { TxtDirectoryBox.Text = value; }\n        }\n\n        public string TextOfImgurDirectoryBox\n        {\n            get { return ImgurDirectoryBox.Text; }\n            set { ImgurDirectoryBox.Text = value; }\n        }\n\n        public string TextOfInstagramDirectoryBox\n        {\n            get { return InstagramDirectoryBox.Text; }\n            set { InstagramDirectoryBox.Text = value; }\n        }\n\n        public string TextOfNaverDirectoryBox\n        {\n            get { return NaverDirectoryBox.Text; }\n            set { NaverDirectoryBox.Text = value; }\n        }\n\n        public bool SaveToDesktopCheckedProperty\n        {\n            get { return SaveToDesktopRadioButton.Checked; }\n            set { SaveToDesktopRadioButton.Checked = value; }\n        }\n\n        public bool SaveToDirectoryCheckedProperty\n        {\n            get { return SaveToDirectoryRadioButton.Checked; }\n            set { SaveToDirectoryRadioButton.Checked = value; }\n        }\n\n        public bool ProgrammedDirectoryCheckedProperty\n        {\n            get { return ProgrammedDirectoryRadioButton.Checked; }\n            set { ProgrammedDirectoryRadioButton.Checked = value; }\n        }\n\n        //*********************************************************Buttons************************************************************************************************************\n        private void SaveToSaveButton_Click(object sender, EventArgs e)\n        {\n            //makes sure the user is using a directory that exists\n            try\n            {\n                if (SaveToDirectoryRadioButton.Checked)\n                {\n                    Path.GetFullPath(DirectoryBox.Text);\n                }\n\n                if (ProgrammedDirectoryRadioButton.Checked)\n                {\n                    Path.GetFullPath(TxtDirectoryBox.Text);\n                    Path.GetFullPath(ImgurDirectoryBox.Text);\n                    Path.GetFullPath(InstagramDirectoryBox.Text);\n                    Path.GetFullPath(NaverDirectoryBox.Text);\n                }\n            }\n            catch\n            {\n                MessageBox.Show("Please Make Sure The Directory Exists!", "Invalid Directory!");\n                return;\n            }\n            this.Hide();\n        }\n\n        private void FolderBrowserButton1_Click(object sender, EventArgs e)\n        {\n            //using a psuedo folder browser with the SaveFileDialog to grab a directory\n            ChooseDirectory.FileName = "Select Current Directory With \'Save\'.";\n            if (ChooseDirectory.ShowDialog() == DialogResult.OK)\n                DirectoryBox.Text = Path.GetDirectoryName(ChooseDirectory.FileName);\n        }\n\n        private void FolderBrowserButton2_Click(object sender, EventArgs e)\n        {\n            ChooseDirectory.FileName = "Select Current Directory With \'Save\'.";\n            if (ChooseDirectory.ShowDialog() == DialogResult.OK)\n                TxtDirectoryBox.Text = Path.GetDirectoryName(ChooseDirectory.FileName);\n        }\n\n        private void FolderBrowserButton3_Click(object sender, EventArgs e)\n        {\n            ChooseDirectory.FileName = "Select Current Directory With \'Save\'.";\n            if (ChooseDirectory.ShowDialog() == DialogResult.OK)\n                ImgurDirectoryBox.Text = Path.GetDirectoryName(ChooseDirectory.FileName);\n        }\n\n        private void FolderBrowserButton4_Click(object sender, EventArgs e)\n        {\n            ChooseDirectory.FileName = "Select Current Directory With \'Save\'.";\n            if (ChooseDirectory.ShowDialog() == DialogResult.OK)\n                InstagramDirectoryBox.Text = Path.GetDirectoryName(ChooseDirectory.FileName);\n        }\n\n        private void FolderBrowserButton5_Click(object sender, EventArgs e)\n        {\n            ChooseDirectory.FileName = "Select Current Directory With \'Save\'.";\n            if (ChooseDirectory.ShowDialog() == DialogResult.OK)\n                NaverDirectoryBox.Text = Path.GetDirectoryName(ChooseDirectory.FileName);\n        }\n\n        //******************************************************************Radio Buttons*********************************************************************************************\n        private void SaveToDesktopRadioButton_CheckedChanged(object sender, EventArgs e)    //enables/disables necessary controls\n        {\n            if (SaveToDesktopRadioButton.Checked)\n            {\n                DirectoryBox.Enabled = false;\n                FolderBrowserButton1.Enabled = false;\n                FolderBrowserButton2.Enabled = false;\n                FolderBrowserButton3.Enabled = false;\n                FolderBrowserButton4.Enabled = false;\n                FolderBrowserButton5.Enabled = false;\n                TxtDirectoryBox.Enabled = false;\n                ImgurDirectoryBox.Enabled = false;\n                InstagramDirectoryBox.Enabled = false;\n                NaverDirectoryBox.Enabled = false;\n            }\n        }\n\n        private void SaveToDirectoryRadioButton_CheckedChanged(object sender, EventArgs e)  //enables/disables necessary controls\n        {\n            if (SaveToDirectoryRadioButton.Checked)\n            {\n                DirectoryBox.Enabled = true;\n                FolderBrowserButton1.Enabled = true;\n                FolderBrowserButton2.Enabled = false;\n                FolderBrowserButton3.Enabled = false;\n                FolderBrowserButton4.Enabled = false;\n                FolderBrowserButton5.Enabled = false;\n                TxtDirectoryBox.Enabled = false;\n                ImgurDirectoryBox.Enabled = false;\n                InstagramDirectoryBox.Enabled = false;\n                NaverDirectoryBox.Enabled = false;\n            }\n        }\n\n        private void ProgrammedDirectoryRadioButton_CheckedChanged(object sender, EventArgs e)   //enables/disables necessary controls\n        {\n            if (ProgrammedDirectoryRadioButton.Checked)\n            {\n                DirectoryBox.Enabled = false;\n                FolderBrowserButton1.Enabled = false;\n                FolderBrowserButton2.Enabled = true;\n                FolderBrowserButton3.Enabled = true;\n                FolderBrowserButton4.Enabled = true;\n                FolderBrowserButton5.Enabled = true;\n                TxtDirectoryBox.Enabled = true;\n                ImgurDirectoryBox.Enabled = true;\n                InstagramDirectoryBox.Enabled = true;\n                NaverDirectoryBox.Enabled = true;\n                Form1.imgurPreventRd = false;\n            }\n        }\n\n        \n    }\n}\n',fileName:"Form2",language:"csharp",id:"00"},{path:'/*  Instagram and Imgur Media Downloader. Can download media, save links to the media, or open all media in separate windows.\n *  Saved media are organized by user selected date off of the calender control.\n *  Media save location can also be chosen.\n *  Multiple URLs can be input.\n *  \n *  Imstagram - jpgs and mp4s\n *  Imgur - jpgs\n *  \n *  \n */\n\nusing System;\nusing System.Windows.Forms;\nusing System.IO;\nusing System.Text.RegularExpressions;\nusing System.Diagnostics;\nusing System.Net.Http;\nusing Newtonsoft.Json;\nusing System.Linq;\nusing ConsoleApp3;\nusing static ConsoleApp3.ImgurPost;\nusing System.Threading.Tasks;\nusing static InstaGrabber.VliveMap;\nusing System.Net;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace InstaGrabber\n{\n    public partial class Form1 : Form\n    {\n        //***********************************************************************PROGRAM LOAD/SAVE PROPERTIES*********************************************************************************\n        private void WhenLoad(object sender, EventArgs e)  //Load and Close events to save particular variables for next use. Right click project name in solution Explorer, Properties, Settings \n        {\n            try\n            {\n                CheckForNewPosts.Enabled = Properties.Settings.Default.CheckForNewPostsButtonVisible;\n                SaveFile.Checked = Properties.Settings.Default.Download;\n                SaveTxt.Checked = Properties.Settings.Default.Save;\n                OpenFile.Checked = Properties.Settings.Default.Open;\n                instaRadioButton.Checked = Properties.Settings.Default.instagramRadioButton;\n                imgurRadioButton.Checked = Properties.Settings.Default.imgurRadioButton;\n                naverRadioButton.Checked = Properties.Settings.Default.naverRadioButton;\n                profileBox.Enabled = Properties.Settings.Default.profileBoxEnabled;\n                profileBox.Text = Properties.Settings.Default.profileUrlBox;\n                SaveTo.SaveToDirectoryCheckedProperty = Properties.Settings.Default.SaveDirectoryRadio;\n                SaveTo.SaveToDesktopCheckedProperty = Properties.Settings.Default.SaveDesktopRadio;\n                SaveTo.ProgrammedDirectoryCheckedProperty = Properties.Settings.Default.ProgrammedDirectoryRadio;\n                SaveTo.TextOfDirectoryBox = Properties.Settings.Default.DirectoryBox;\n                SaveTo.TextOfImgurDirectoryBox = Properties.Settings.Default.imgurBoxText;\n                SaveTo.TextOfTxtDirectoryBox = Properties.Settings.Default.txtBoxText;\n                SaveTo.TextOfInstagramDirectoryBox = Properties.Settings.Default.instagramBoxText;\n                SaveTo.TextOfNaverDirectoryBox = Properties.Settings.Default.naverBoxText;\n                profileDateTextBox.Text = Properties.Settings.Default.profileDateTextBoxText;\n                ChangeDateTimeCheckBox.Checked = Properties.Settings.Default.ChangeDateTimeCheckBoxChecked;\n                ChangeDateTimeCheckBox.Visible = Properties.Settings.Default.ChangeDateTimeCheckBoxVisible;\n                profileDateTextBox.Enabled = Properties.Settings.Default.profileBoxEnabled;\n                SetIntervalButton.Enabled = Properties.Settings.Default.InstaEnabled;\n                AutoCheckIntervalBox.Enabled = Properties.Settings.Default.InstaEnabled;\n                AutoUpdateCheckBox.Visible = Properties.Settings.Default.InstaEnabled;\n                vliveDateTextBox.Text = Properties.Settings.Default.VliveDateTimeBox;\n                vliveDateTextBox.Enabled = Properties.Settings.Default.profileBoxEnabled;\n\n            }\n            catch (Exception ex)\n            {\n                Task.Run(() =>\n                {\n                    System.Media.SystemSounds.Exclamation.Play();\n                    MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                });\n\n            }\n        }\n\n        private void WhenClose(object sender, FormClosedEventArgs e)\n        {\n            try\n            {\n                Properties.Settings.Default.CheckForNewPostsButtonVisible = CheckForNewPosts.Enabled;\n                Properties.Settings.Default.Download = SaveFile.Checked;\n                Properties.Settings.Default.Save = SaveTxt.Checked;\n                Properties.Settings.Default.Open = OpenFile.Checked;\n                Properties.Settings.Default.instagramRadioButton = instaRadioButton.Checked;\n                Properties.Settings.Default.imgurRadioButton = imgurRadioButton.Checked;\n                Properties.Settings.Default.naverRadioButton = naverRadioButton.Checked;\n                Properties.Settings.Default.profileBoxEnabled = profileBox.Enabled;\n                Properties.Settings.Default.profileUrlBox = profileBox.Text;\n                Properties.Settings.Default.SaveDirectoryRadio = SaveTo.SaveToDirectoryCheckedProperty;\n                Properties.Settings.Default.SaveDesktopRadio = SaveTo.SaveToDesktopCheckedProperty;\n                Properties.Settings.Default.ProgrammedDirectoryRadio = SaveTo.ProgrammedDirectoryCheckedProperty;\n                Properties.Settings.Default.DirectoryBox = SaveTo.TextOfDirectoryBox;\n                Properties.Settings.Default.imgurBoxText = SaveTo.TextOfImgurDirectoryBox;\n                Properties.Settings.Default.txtBoxText = SaveTo.TextOfTxtDirectoryBox;\n                Properties.Settings.Default.instagramBoxText = SaveTo.TextOfInstagramDirectoryBox;\n                Properties.Settings.Default.naverBoxText = SaveTo.TextOfNaverDirectoryBox;\n                Properties.Settings.Default.profileDateTextBoxText = profileDateTextBox.Text;\n                Properties.Settings.Default.ChangeDateTimeCheckBoxChecked = ChangeDateTimeCheckBox.Checked;\n                Properties.Settings.Default.ChangeDateTimeCheckBoxVisible = ChangeDateTimeCheckBox.Visible;\n                Properties.Settings.Default.profileBoxEnabled = profileDateTextBox.Enabled;\n                Properties.Settings.Default.AutoUpdateInterval = AutoCheckIntervalBox.Text;\n                Properties.Settings.Default.InstaEnabled = SetIntervalButton.Enabled;\n                Properties.Settings.Default.InstaEnabled = AutoCheckIntervalBox.Enabled;\n                Properties.Settings.Default.InstaEnabled = AutoUpdateCheckBox.Visible;\n                Properties.Settings.Default.AutoUpdateCheckBoxChecked = AutoUpdateCheckBox.Checked;\n                Properties.Settings.Default.VliveDateTimeBox = vliveDateTextBox.Text;\n                Properties.Settings.Default.profileBoxEnabled = vliveDateTextBox.Enabled;\n\n\n                Properties.Settings.Default.Save();\n            }\n            catch (Exception ex)\n            {\n                Task.Run(() =>\n                {\n                    System.Media.SystemSounds.Exclamation.Play();\n                    MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                });\n\n            }\n        }\n        public Form1()\n        {\n            InitializeComponent();\n\n            if (!instaRadioButton.Checked && !imgurRadioButton.Checked)\n            {\n                instaRadioButton.Checked = true;\n                SaveTo.SaveToDesktopCheckedProperty = true;\n                SaveFile.CheckState = CheckState.Checked;\n            }\n            //Sets timers to currect states and values\n\n            AutoCheckIntervalBox.Text = Properties.Settings.Default.AutoUpdateInterval;\n            AutoUpdateCheckBox.Checked = Properties.Settings.Default.AutoUpdateCheckBoxChecked;\n            ProgramExecute.Text = "Standby...";\n            LogBox.Text = String.Empty;\n            busy = false;\n\n            if (AutoUpdateCheckBox.Checked)\n            {\n                //AutoUpdateTimer.Enabled = true;\n                CurrentTime.Enabled = true;\n            }\n            else\n            {\n                //AutoUpdateTimer.Enabled = false;\n                CurrentTime.Enabled = false;\n            }\n            if (String.IsNullOrEmpty(AutoCheckIntervalBox.Text))\n                AutoCheckIntervalBox.Text = "1800";\n            countDown = Convert.ToInt32(AutoCheckIntervalBox.Text);\n            countDownPrevValue = countDown;\n            //AutoUpdateTimer.Interval = countDownPrevValue * 1000;\n\n            ServicePointManager.Expect100Continue = true;\n            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls\n                   | SecurityProtocolType.Tls11\n                   | SecurityProtocolType.Tls12\n                   | SecurityProtocolType.Ssl3;\n\n            client = new HttpClient();\n            urlProfile = new AutoInstaGrab();\n        }\n\n        //*****************************************************************************global variables********************************************************************************************\n        #region Variables\n        private static int downCount,        //downcount for naming\n                          failCount,        //keeps track of how many URLs failed\n                          indexToClean,     //indexToClean used to clean array of urls for bad characters\n                          oldArrayLength,   //oldArrayLength keep tracks of iterations when cleaning\n                          profileArrayCurrentCount,\n                          imgurDownloadCount,\n                          totalImgurMediaGrabbed,\n                          scaler,           //scales the load bar\'s animation\n                          prevProgressVal;\n\n\n        private static string[] mediaURLs,      //holds the urls of media to download\n                               urlArray,        //urls to be grabbed from\n                               profileArray,    //instagram accounts to autoupdate\n                               uploadDate,      //instagram last datetime\n                               imgurId,\n                               vliveUploadDate;     //vlive\'s last datetime\n\n        private static string path2,\n                              newPath,\n                              mainPath,\n                              instagramUploadDate,\n                              imgurAlbumTitle,\n                              instagramProfileAt,\n                              instagramCaption,\n                              imgurFileName,\n                              naverAlbumTitle,\n                              VideoListEndpoint = $"vlive api endpoint",\n                              shortcode;\n\n        private static bool error, noDownload, autoUpdateClicked, checkFailed, attemptedMp4Download, busy, newVOD, live, imgurLoggedIn = false, instaLoggedIn = false;   //flag for failed/invalid url\n        public static bool imgurPreventRd, naverPreventRd, upToDateCheck, isGallery = false;\n        private static bool[] urlGrabSuccess;    //keeps track of which urls were valid\n\n        private static HttpClient client;\n        private static HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();\n\n\n        private static string json,\n                              html,\n                              html2;\n        private static DateTime lastDateTime = new DateTime(), instagramDateAndTime;\n\n        private static readonly DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n\n        private static List<string> naverMediaUrls = new List<string>();    //holds url to naver media\n\n        public static AutoInstaGrab urlProfile;     //used with automatically checking instagram accounts\n\n        private static StringBuilder sb = new StringBuilder();\n\n        public Form2 SaveTo = new Form2();\n        #endregion\n\n        #region Imgur Cred\n        const string ImgurUser = "";\n        const string ImgurPass = "";\n        const string ImgurClientId = "";\n        const string ImgurClientSecret = "";\n        #endregion\n\n\n        private void AboutToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            Task.Run(() =>\n            {\n                MessageBox.Show("Instagram\\Imgur Media Downloader\\n\\nInstagram - jpgs and mp4s\\nImgur - jpgs\\n\\nLast Updated On: 6-5-19\\n" +\n                "\\nChoose Instagram or Imgur at the bottom." +\n                "\\n1)Choose an Action (Save/Open/Download)" +\n                "\\n2)Choose a Directory (File -> Save To...)" +\n                "\\n3)Put any amount of Links to " +\n                "Instagram/ImgurAlbum Posts in the Large Box" +\n                "\\n4)Click Grab!\\n\\n" +\n                "(Files are automatically saved with the next value available so files will not be overwritten)" +\n                "\\n(DownloadNewPost can be used to download posts from multiple instagram accounts, 12 latest posts)" +\n                "\\n\\nFiles can be found in the InstaGrabber folder at the directory you selected.", "About/Help");\n            });\n\n        }\n\n        //*****************************************************************************RADIO BUTTONS************************************************************************************************      \n        private void InstaRadioButton_CheckedChanged(object sender, EventArgs e)    //Choose to download instagram media disables/enables controls\n        {\n            if (instaRadioButton.Checked)\n            {\n                downCount = 1;\n                CheckForNewPosts.Enabled = true;\n                profileBox.Enabled = true;\n                ChangeDateTimeCheckBox.Visible = true;\n                profileDateTextBox.Enabled = true;\n                vliveDateTextBox.Enabled = true;\n                CurrentProgressBar.Value = 0;\n                TotalProgressBar.Value = 0;\n\n                if (AutoUpdateCheckBox.Checked)\n                {\n                    AutoUpdateTimer.Enabled = true;\n                    CurrentTime.Enabled = true;\n                }\n                AutoUpdateCheckBox.Visible = true;\n                SetIntervalButton.Enabled = true;\n                AutoCheckIntervalBox.Enabled = true;\n            }\n        }\n\n        private void ImgurRadioButton_CheckedChanged(object sender, EventArgs e)    //Choose to download imgur media disables/enables controls\n        {\n            if (imgurRadioButton.Checked)\n            {\n                /*\n                Task.Run(() =>\n                {\n                    System.Media.SystemSounds.Exclamation.Play();\n                    MessageBox.Show("Due to recent changes to imgur(api update), this scraping method no longer works.", "Out of order!", MessageBoxButtons.OK);\n                });\n                instaRadioButton.Checked = true;\n                */\n\n                downCount = 1;                          //Reset download count\n                CheckForNewPosts.Enabled = false;\n                profileBox.Enabled = false;\n                ChangeDateTimeCheckBox.Visible = false;\n                profileDateTextBox.Enabled = false;\n                vliveDateTextBox.Enabled = false;\n                CurrentProgressBar.Value = 0;\n                TotalProgressBar.Value = 0;\n\n                if (AutoUpdateCheckBox.Checked)\n                {\n                    AutoUpdateTimer.Enabled = false;\n                    CurrentTime.Enabled = false;\n                }\n                AutoUpdateCheckBox.Visible = false;\n                SetIntervalButton.Enabled = false;\n                AutoCheckIntervalBox.Enabled = false;\n\n            }\n        }\n\n        private void NaverRadioButton_CheckedChanged(object sender, EventArgs e)    //Choose to download naver media disables/enables controls\n        {\n            if (naverRadioButton.Checked)\n            {\n                downCount = 1;                          //Reset download count\n                CheckForNewPosts.Enabled = false;\n                profileBox.Enabled = false;\n                ChangeDateTimeCheckBox.Visible = false;\n                profileDateTextBox.Enabled = false;\n                vliveDateTextBox.Enabled = false;\n                CurrentProgressBar.Value = 0;\n                TotalProgressBar.Value = 0;\n\n                if (AutoUpdateCheckBox.Checked)\n                {\n                    AutoUpdateTimer.Enabled = false;\n                    CurrentTime.Enabled = false;\n                }\n                AutoUpdateCheckBox.Visible = false;\n                SetIntervalButton.Enabled = false;\n                AutoCheckIntervalBox.Enabled = false;\n            }\n\n        }\n\n        private void AutoUpdateCheckBox_CheckedChanged(object sender, EventArgs e)     //starts and stops timers for automatic instagram checks\n        {\n            if (AutoUpdateCheckBox.Checked)\n            {\n                AutoUpdateTimer.Enabled = true;\n                CurrentTime.Enabled = true;\n            }\n            else\n            {\n                AutoUpdateTimer.Enabled = false;\n                CurrentTime.Enabled = false;\n            }\n        }\n\n        //*************************************************************BUTTONS*********************************************************************************************************\n        private void SaveToToolStripMenuItem_Click(object sender, EventArgs e)  //opens form2 which allows the download directory to be changed\n        {\n            bool wasChecked = false;\n            if (AutoUpdateCheckBox.Checked)\n            {\n                wasChecked = true;\n                AutoUpdateCheckBox.Checked = false;\n            }\n            SaveTo.ShowDialog();\n            if (wasChecked)\n            {\n                wasChecked = false;\n                AutoUpdateCheckBox.Checked = true;\n            }\n\n        }\n\n        private void ClearLogBoxButton_Click(object sender, EventArgs e)    //manually clears logbox\n        {\n            LogBox.Text = String.Empty;\n        }\n\n        private void ContinueButtonIsClickedAsync(object sender, EventArgs e)    //grabs media from depending on which radiobutton is checked\n        {\n            if (instaRadioButton.Checked)\n                InstagramGrabAsync();\n            else if (imgurRadioButton.Checked)\n                ImgurGrabAsync();\n            else if (naverRadioButton.Checked)\n                NaverGrabAsync();\n        }\n\n        private void CheckForNewPosts_ClickAsync(object sender, EventArgs e) //grabs new media from multiple instagram profiles\n        {\n            InstagramUpdateAsync();\n            CheckVlive();\n        }\n\n        private void ClearButtonIsClicked(object sender, EventArgs e)   //clears the box where user inputs URLs\n        {\n            urlBox.Text = "";\n            ProgramExecute.Text = "URLs cleared! Standby...";\n            CurrentProgressBar.Value = 0;\n            TotalProgressBar.Value = 0;\n        }\n\n        private void SetIntervalButton_Click(object sender, EventArgs e)    //sets the interval between checks for instagram \n        {\n            //if (Convert.ToInt32(AutoCheckIntervalBox.Text) < 30)\n            //    MessageBox.Show("Please Set Interval to be Greater Than 29 Seconds.");\n            //else\n            //{\n            countDown = Convert.ToInt32(AutoCheckIntervalBox.Text);\n            countDownPrevValue = Convert.ToInt32(AutoCheckIntervalBox.Text);\n            //AutoUpdateTimer.Interval = Convert.ToInt32(AutoCheckIntervalBox.Text) * 1000;\n            //}\n        }\n\n        //********************************************************************MISC EVENTS************************************************************************************************\n        private void KeyDownUrlBox(object sender, KeyEventArgs e)       //when ctrl+V is pressed, automatically newline for continuous pasting\n        {\n            if (e.Control && e.KeyCode == Keys.V)\n                SendKeys.Send("{ENTER}");\n        }\n\n        private void KeyDownProfileBox(object sender, KeyEventArgs e)    //when ctrl+V is pressed, automatically newline for continuous pasting\n        {\n            if (e.Control && e.KeyCode == Keys.V)\n                SendKeys.Send("{ENTER}");\n        }\n\n        private void ProfileDateTextBox_KeyPress(object sender, KeyPressEventArgs e)    //allows or denies the ability to change "datetime" textboxes\n        {\n            if (ChangeDateTimeCheckBox.Checked) { }\n            else e.Handled = true;\n        }\n        private void VliveDateTextBox_KeyPress(object sender, KeyPressEventArgs e)\n        {\n            if (ChangeDateTimeCheckBox.Checked) { }\n            else e.Handled = true;\n        }\n        private void ProgramExecute_KeyPress(object sender, KeyPressEventArgs e)    //blocks any key press for Program Execute control\n        {\n            e.Handled = true;\n        }\n\n        private void LogBox_KeyPress(object sender, KeyPressEventArgs e)    //blocks any key press for logbox\n        {\n            e.Handled = true;\n        }\n\n        private void AutoCheckIntervalBox_KeyPress(object sender, KeyPressEventArgs e)  //allows only numbers to be entered into intervalbox\n        {\n            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar))\n                e.Handled = true;\n        }\n\n        private int countDown, countDownPrevValue;\n        private void CheckLogBoxLength()        //prevents logbox from hitting max characters\n        {\n            if (LogBox.Text.Length > (LogBox.MaxLength - 1000))\n                LogBox.Text = String.Empty;\n        }\n        private void AutoUpdateTimer_Tick(object sender, EventArgs e)   //counter for instagram and vlive checks\n        {\n            /*\n            if (instaRadioButton.Checked && !string.IsNullOrEmpty(profileBox.Text) && !busy)\n            {\n                CheckLogBoxLength();\n\n                countDown = countDownPrevValue;\n                label4.Text = "Next Check: 00:00:00";\n                InstagramUpdateAsync();\n                CheckVlive();\n\n                if (AutoUpdateCheckBox.Checked)\n                {\n                    AutoUpdateTimer.Stop();\n                    CurrentTime.Stop();\n                    AutoUpdateTimer.Start();\n                    CurrentTime.Start();\n                }\n            }\n            */\n        }\n\n        private void CurrentTime_Tick(object sender, EventArgs e)   //1 second counter to display time left for checks\n        {\n            //MinimizeToTray.Text = "Next Check in: " + countDown + " Seconds";\n\n\n            if (instaRadioButton.Checked && !string.IsNullOrEmpty(profileBox.Text) && !busy)\n            {\n                countDown--;\n\n                MinimizeToTray.Text = "Next Check in: " + Environment.NewLine +\n                (countDown / 60 / 60).ToString("D2") + ":" + (countDown / 60 % 60).ToString("D2") + ":" + (countDown % 60).ToString("D2") + " h:m:s" +\n                Environment.NewLine + countDown + " Seconds";\n\n                if (countDown >= 0)\n                    label4.Text = "Next Check: " + (countDown / 60 / 60).ToString("D2") + ":" + (countDown / 60 % 60).ToString("D2") + ":" + (countDown % 60).ToString("D2");\n\n                if (countDown == 0)\n                {\n                    label4.Text = "Next Check: 00:00:00";\n                    CheckLogBoxLength();\n                    InstagramUpdateAsync();\n                    //CheckVlive();\n\n                    countDown = countDownPrevValue;\n                    if (AutoUpdateCheckBox.Checked)\n                    {\n                        //AutoUpdateTimer.Stop();\n                        CurrentTime.Stop();\n                        //AutoUpdateTimer.Start();\n                        CurrentTime.Start();\n                    }\n                }\n\n                if (countDownPrevValue >= 360 ? countDown % 120 == 0 : countDown % (countDownPrevValue / 2) == 0) //countDown % (countDownPrevValue/2) == 0\n                {\n                    CheckLogBoxLength();\n                    CheckVlive();\n                }\n            }\n        }\n\n        private void Form1_Resize(object sender, EventArgs e)       //minimize form event\n        {\n            if (this.WindowState == FormWindowState.Minimized)\n            {\n                Hide();\n                MinimizeToTray.Visible = true;\n            }\n        }\n\n        private void MinimizeToTray_DoubleClick(object sender, EventArgs e) //brings back minimized form\n        {\n            Show();\n            this.WindowState = FormWindowState.Normal;\n            MinimizeToTray.Visible = false;\n        }\n        //************************************************************************METHODS***************************************************************************************\n\n        //************************************************************************DirectorySelect***************************************************************************************\n        private void DirectorySelect()      //determines where to save media files: desktop, another directory, or specific directories for imgur insta naver and txt files. Directory taken from form 2\n        {\n            if (SaveTo.SaveToDirectoryCheckedProperty)\n            {\n                Directory.CreateDirectory(SaveTo.TextOfDirectoryBox + @"\\InstaGrabber\\Txt Files");      //creates necessary folders/directories from user inputted directory\n\n                if (instaRadioButton.Checked)\n                {\n                    Directory.CreateDirectory(SaveTo.TextOfDirectoryBox + @"\\InstaGrabber\\Downloaded Files\\instagram\\" + instagramProfileAt);\n                    path2 = SaveTo.TextOfDirectoryBox + @"\\InstaGrabber\\Txt Files\\urls_";\n                    newPath = SaveTo.TextOfDirectoryBox + @"\\InstaGrabber\\Txt Files\\urls_";\n                    mainPath = SaveTo.TextOfDirectoryBox + @"\\InstaGrabber\\Downloaded Files\\instagram";\n                }\n                else if (imgurRadioButton.Checked)\n                {\n                    Directory.CreateDirectory(SaveTo.TextOfDirectoryBox + @"\\InstaGrabber\\Downloaded Files\\imgur\\" + imgurAlbumTitle);\n                    path2 = SaveTo.TextOfDirectoryBox + @"\\InstaGrabber\\Txt Files\\urls_";\n                    newPath = SaveTo.TextOfDirectoryBox + @"\\InstaGrabber\\Txt Files\\urls_";\n                    mainPath = SaveTo.TextOfDirectoryBox + @"\\InstaGrabber\\Downloaded Files\\imgur\\" + imgurAlbumTitle + "\\";\n                }\n                else if (naverRadioButton.Checked)\n                {\n                    Directory.CreateDirectory(SaveTo.TextOfDirectoryBox + @"\\InstaGrabber\\Downloaded Files\\naver\\" + naverAlbumTitle);\n                    path2 = SaveTo.TextOfDirectoryBox + @"\\InstaGrabber\\Txt Files\\urls_";\n                    newPath = SaveTo.TextOfDirectoryBox + @"\\InstaGrabber\\Txt Files\\urls_";\n                    mainPath = SaveTo.TextOfDirectoryBox + @"\\InstaGrabber\\Downloaded Files\\naver\\" + naverAlbumTitle + "\\";\n                }\n            }\n            if (SaveTo.SaveToDesktopCheckedProperty)\n            {\n                string root = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); //finds the desktop of current user and stores in string root\n                Directory.CreateDirectory(root + @"\\InstaGrabber\\Txt Files");               //creates necessary folders/directories\n\n                if (instaRadioButton.Checked)\n                {\n                    Directory.CreateDirectory(root + @"\\InstaGrabber\\Downloaded Files\\instagram\\" + instagramProfileAt);    //creates necessary folders/directories from user inputted directory\n                    path2 = root + @"\\InstaGrabber\\Txt Files\\urls_";\n                    newPath = root + @"\\InstaGrabber\\Txt Files\\urls_";\n                    mainPath = root + @"\\InstaGrabber\\Downloaded Files\\instagram";\n                }\n                else if (imgurRadioButton.Checked)\n                {\n                    Directory.CreateDirectory(root + @"\\InstaGrabber\\Downloaded Files\\imgur\\" + imgurAlbumTitle);   //creates necessary folders/directories from user inputted directory\n                    path2 = root + @"\\InstaGrabber\\Txt Files\\urls_";\n                    newPath = root + @"\\InstaGrabber\\Txt Files\\urls_";\n                    mainPath = root + @"\\InstaGrabber\\Downloaded Files\\imgur\\" + imgurAlbumTitle + "\\";\n                }\n                else if (naverRadioButton.Checked)\n                {\n                    Directory.CreateDirectory(root + @"\\InstaGrabber\\Downloaded Files\\naver\\" + naverAlbumTitle);   //creates necessary folders/directories from user inputted directory\n                    path2 = root + @"\\InstaGrabber\\Txt Files\\urls_";\n                    newPath = root + @"\\InstaGrabber\\Txt Files\\urls_";\n                    mainPath = root + @"\\InstaGrabber\\Downloaded Files\\naver\\" + naverAlbumTitle + "\\";\n                }\n            }\n            if (SaveTo.ProgrammedDirectoryCheckedProperty)\n            {\n                if (instaRadioButton.Checked)\n                {\n                    path2 = SaveTo.TextOfTxtDirectoryBox + @"\\urls_";\n                    newPath = SaveTo.TextOfTxtDirectoryBox + @"\\urls_";\n                    mainPath = SaveTo.TextOfInstagramDirectoryBox + "\\";\n                }\n                else if (imgurRadioButton.Checked)\n                {\n                    path2 = SaveTo.TextOfTxtDirectoryBox + @"\\urls_";\n                    newPath = SaveTo.TextOfTxtDirectoryBox + @"\\urls_";\n                    mainPath = SaveTo.TextOfImgurDirectoryBox + "\\";\n                }\n                else if (naverRadioButton.Checked)\n                {\n                    path2 = SaveTo.TextOfNaverDirectoryBox + @"\\urls_";\n                    newPath = SaveTo.TextOfNaverDirectoryBox + @"\\urls_";\n                    mainPath = SaveTo.TextOfNaverDirectoryBox + "\\naver\\" + naverAlbumTitle + "\\";\n                }\n            }\n        }\n        //************************************************************************NAVER*****************************************************************************************\n        private async Task NaverGrabAsync() //grabs media files from naver posts\n        {\n            checkFailed = false;\n            busy = true;\n            CheckUrlBoxBeforeGrab();\n            int counter = 0;\n\n            if (checkFailed)\n            {\n                busy = false;\n                return;\n            }\n            else\n            {\n                ProgramExecute.Text = "Grabbing from URLs!";    //shows current status in label\n                string url; //used to hold current url to grab\n                string[] stringSep = new string[] { "\\r\\n" },\n                        failedDownload = new string[0];      //string separator, characters to split\n                urlArray = urlBox.Text.Split(stringSep, StringSplitOptions.None);  //separates user inputed URLs with stringSep and store in the array urlArray\n                int fileNum = 1;    //keeps track of txt saved files\n                prevProgressVal = 0;\n                failCount = 0;  //keeps track  of how many urls failed\n\n                indexToClean = 0;\n                oldArrayLength = urlArray.Length;\n                for (int i = 0; i < oldArrayLength; i++)  //cycles through and remove bad indexes leaving the array with only URLs\n                {\n                    if (String.IsNullOrEmpty(urlArray[indexToClean]) || String.IsNullOrWhiteSpace(urlArray[indexToClean]) || urlArray[indexToClean].Length < 22 || !urlArray[indexToClean].Contains("naver", StringComparison.OrdinalIgnoreCase))\n                    {\n                        urlArray = RemoveIndex(urlArray, indexToClean);\n                    }\n                    else\n                        indexToClean++;\n                }\n                if (urlArray == null || urlArray.Length == 0)   //if urlarray is empty and nothing downloads, stops here\n                {\n                    Task.Run(() =>\n                    {\n                        System.Media.SystemSounds.Exclamation.Play();\n                        MessageBox.Show("Nothing Downloaded.\\nPlease Make Sure You Used Valid Urls.", "Download Failed", MessageBoxButtons.OK);\n                    });\n\n                    noDownload = true;\n                    ProgramExecute.Text = "";\n                    return;\n                }\n\n                urlGrabSuccess = new bool[urlArray.Length]; //create bool array used to keep track of which URLs succeeded or failed\n\n                for (int i = 0; i < urlArray.Length; i++)\n                {\n\n                    downCount = 1;  //keeps track of media downloaded\n                    url = urlArray[i];  //stores current URL from the array into string url\n\n                    try\n                    {\n                        client.DefaultRequestHeaders.Add("User-Agent", "...");\n                        html = await client.GetStringAsync(url);\n                        doc.LoadHtml(html);\n                        html2 = doc.DocumentNode.SelectSingleNode("//*[@id=\\"__clipContent\\"]").InnerText;\n                        doc.LoadHtml(html2);\n                        //parse html for title of post\n                        naverAlbumTitle = Regex.Replace(doc.DocumentNode.SelectNodes("//*[@class=\\"se_textarea\\"]").First().InnerText.Trim(), "&#39;", @"\'");\n                        naverAlbumTitle = Regex.Replace(naverAlbumTitle, "&amp;", @"&");\n                        //parse html and creates list of media urls\n                        naverMediaUrls = doc.DocumentNode.SelectNodes("//*[@class=\\"se_mediaImage __se_img_el\\"]").Select(x => x.GetAttributeValue("data-src", "").Substring(0, x.GetAttributeValue("data-src", "").LastIndexOf("?type="))).ToList();\n                        LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  Grabbing Naver Url " + (i + 1) + Environment.NewLine);\n                        urlGrabSuccess[i] = true;   //current URL successfully downloaded\n                        DirectorySelect();\n                        Directory.CreateDirectory(mainPath);\n                    }\n                    catch\n                    {\n                        error = true;           //error flag raise\n                        urlGrabSuccess[i] = false;//currentURL failed to download\n                        failCount++;            //keeps track of how many times a URL failed\n                        continue;               //moves on to the next iteration/URL\n                    }\n                    //scaler is used to change animation speed depending on how many media files are downloaded\n                    if (naverMediaUrls.Count > 400)\n                        scaler = 30;\n                    else if (naverMediaUrls.Count > 200 && naverMediaUrls.Count < 400)\n                        scaler = 25;\n                    else if ((naverMediaUrls.Count > 100) && (naverMediaUrls.Count < 200))\n                        scaler = 20;\n                    else if ((naverMediaUrls.Count > 30) && (naverMediaUrls.Count < 100))\n                        scaler = 15;\n                    else if (naverMediaUrls.Count > 15 && naverMediaUrls.Count < 30)\n                        scaler = 5;\n                    else\n                        scaler = 1;\n\n                    if (SaveTxt.Checked)  //Saves txt containing every media URL after parsing by URLs\n                    {\n                        fileNum = 1;\n                        newPath = mainPath + fileNum.ToString() + ".txt";  //path to saved txt files\n                        while (File.Exists(newPath)) //prevents txt containing urls to be overwritten, by checking if name already exits\n                        {\n                            fileNum++;//fileNum increases by 1 \n                            newPath = mainPath + fileNum.ToString() + ".txt"; //newPath is concatenated with fileNum\n                                                                              //loops until a newPath doesn\'t exist so a new txt file can be made\n                        }\n                        System.IO.File.WriteAllLines(newPath, naverMediaUrls);//save mediaURLs to txt\n                    }\n                    //failedDownload = new string[naverMediaUrls.Count];\n                    int j = 0;\n                    naverPreventRd = false;\n                    foreach (string mediaUrl in naverMediaUrls)\n                    {\n                        ExtensionClass.ProgressBarAnimation(CurrentProgressBar, (j + 1) * 100 / naverMediaUrls.Count);\n                        ExtensionClass.ProgressBarAnimation(TotalProgressBar, prevProgressVal + (((100 / urlArray.Length) / (naverMediaUrls.Count / scaler)) * (j / scaler)));\n                        ProgramExecute.Text = "Grabbing from URL(s)!" + " Grabbing:" + naverMediaUrls.Count + " media file(s)... On " + (downCount) + " of " + naverMediaUrls.Count + "  On Url " + (i + 1) + " of " + urlArray.Length;\n                        if (SaveFile.Checked)\n                        {\n                            //checks if url is for a gif or jpg\n                            if (mediaUrl.Contains("jpg", StringComparison.OrdinalIgnoreCase))\n                            {\n                                newPath = mainPath + downCount + ".jpg";\n                            }\n                            else if (mediaUrl.Contains("gif", StringComparison.OrdinalIgnoreCase))\n                            {\n                                newPath = mainPath + downCount + ".gif";\n                            }\n\n                            j++;\n                            downCount++;\n                            if (File.Exists(newPath))\n                                continue;\n                            else\n                            {\n                                await GetMedia(mediaUrl, newPath, client);\n                                counter++;\n                            }\n\n                        }\n                        if (OpenFile.Checked)\n                            Process.Start(mediaUrl);   //opens the grabbed urls in the webbrowser \n                    }\n                    prevProgressVal += (100 / urlArray.Length);\n                }\n                ExtensionClass.ProgressBarAnimation(TotalProgressBar, 100);\n                if (counter == 0)\n                    naverPreventRd = true;\n                if (!naverPreventRd)\n                    noDownload = false;\n\n            }\n            client.DefaultRequestHeaders.Remove("User-Agent");\n            ErrorCheck();\n        }\n\n        //************************************************************************IMGUR*****************************************************************************************\n        private void ImgurSignIn()\n        {\n\n            string url = "https://imgur.com/signin";\n            FormUrlEncodedContent form = new FormUrlEncodedContent(new Dictionary<string, string>\n            {\n                ["username"] = ImgurUser,\n                ["password"] = ImgurPass,\n                ["remember"] = "remember",\n            });\n\n            HttpResponseMessage response = client.PostAsync(url, form).GetAwaiter().GetResult();\n\n            if (response.IsSuccessStatusCode)\n            {\n                ProgramExecute.Text = "Logged Into Imgur!";\n                imgurLoggedIn = true;\n                imgurLoggedInBox.Text = "Imgur Logged In: True";\n            }\n            else\n            {\n                imgurLoggedInBox.Text = "Imgur Logged In: False";\n                ProgramExecute.Text = "Failed to Log Into Imgur!";\n                imgurLoggedIn = false;\n            }\n\n        }\n        private async Task ImgurGrabAsync() //grabs media from imgur albums\n        {\n            if (!imgurLoggedIn)\n                ImgurSignIn();\n\n            checkFailed = false;\n            busy = true;\n            CheckUrlBoxBeforeGrab();\n\n            if (checkFailed)\n            {\n                busy = false;\n                return;\n            }\n            else if (!checkFailed)\n            {\n                ProgramExecute.Text = "Grabbing from URL(s)!";    //shows current status in label\n                string url; //used to hold current url to grab\n                string[] stringSep = new string[] { "\\r\\n" },\n                failedDownload = new string[0];      //string separator, characters to split\n                urlArray = urlBox.Text.Split(stringSep, StringSplitOptions.None);  //separates user inputed URLs with stringSep and store in the array urlArray\n\n                int fileNum = 1;    //keeps track of txt saved files\n                prevProgressVal = 0;\n                failCount = 0;  //keeps track  of how many urls failed\n\n                indexToClean = 0;\n                oldArrayLength = urlArray.Length;\n                for (int i = 0; i < oldArrayLength; i++)  //cycles through and remove bad indexes leaving the array with only URLs\n                {\n                    if (String.IsNullOrEmpty(urlArray[indexToClean]) || String.IsNullOrWhiteSpace(urlArray[indexToClean]) || urlArray[indexToClean].Length < 3)\n                    {\n                        urlArray = RemoveIndex(urlArray, indexToClean);\n                    }\n                    else\n                        indexToClean++;\n                }\n                if (urlArray == null || urlArray.Length == 0)   //if urlarray is empty and nothing downloads, stops here\n                {\n                    Task.Run(() =>\n                    {\n                        System.Media.SystemSounds.Exclamation.Play();\n                        MessageBox.Show("Nothing Downloaded.\\nPlease Make Sure You Used Valid Urls.", "Download Failed", MessageBoxButtons.OK);\n                    });\n\n                    noDownload = true;\n                    ProgramExecute.Text = "";\n                    return;\n                }\n\n                urlGrabSuccess = new bool[urlArray.Length]; //create bool array used to keep track of which URLs succeeded or failed\n                totalImgurMediaGrabbed = 0;\n\n                for (int i = 0; i < urlArray.Length; i++)   //loops for the amount of URLs entered\n                {\n                    int counter = 0;\n                    downCount = 1;  //keeps track of media downloaded\n                    //https://api.imgur.com/3/gallery/album/{{galleryHash}}\n                    //https://api.imgur.com/3/album/{{albumHash}}/images\n                    url = $"https://api.imgur.com/3/album/{urlArray[i]}";  //stores current URL from the array into string url\n\n                    try     //try catch when grabbing url\n                    {\n                        client.DefaultRequestHeaders.Add("Authorization", $"Client-ID {ImgurClientId}");    //add header with registered Imgur API Client-ID\n                        html = client.GetStringAsync(url).GetAwaiter().GetResult();\n                        GrabUrls(html);        //finds specific urls, save and trim to mediaURLs\n                        ProgramExecute.Text = "Grabbing from URL(s)!" + " Grabbing:" + imgurDownloadCount + " images... On " + (i + 1) + " of " + urlArray.Length;\n                        DirectorySelect();\n                        LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  Grabbing Imgur Url " + (i + 1) + Environment.NewLine);\n                        urlGrabSuccess[i] = true;   //current URL successfully downloaded\n                    }\n                    catch    //when download fails\n                    {\n                        error = true;           //error flag raise\n                        urlGrabSuccess[i] = false;//currentURL failed to download\n                        failCount++;            //keeps track of how many times a URL failed\n                        continue;               //moves on to the next iteration/URL\n                    }\n\n                    if (SaveTxt.Checked)  //Saves txt containing every media URL after parsing by URLs\n                    {\n                        fileNum = 1;\n                        newPath = path2 + imgurAlbumTitle + fileNum.ToString() + ".txt";  //path to saved txt files\n                        while (File.Exists(newPath)) //prevents txt containing urls to be overwritten, by checking if name already exits\n                        {\n                            fileNum++;//fileNum increases by 1 \n                            newPath = path2 + imgurAlbumTitle + fileNum.ToString() + ".txt"; //newPath is concatenated with fileNum\n                                                                                             //loops until a newPath doesn\'t exist so a new txt file can be made\n                        }\n                        System.IO.File.WriteAllLines(newPath, mediaURLs);//save mediaURLs to txt\n                    }\n\n                    client.DefaultRequestHeaders.Remove("Authorization");   //remove authorization header before downloading media\n                    failedDownload = new string[mediaURLs.Length];\n                    for (int j = 0; j < mediaURLs.Length; j++)\n                    {\n                        ProgramExecute.Text = "Grabbing from URL(s)!" + " Grabbing:" + imgurDownloadCount + " images... " + (j + 1) + " of " + imgurDownloadCount + "  On Album... " + (i + 1) + " of " + urlArray.Length;\n                        ExtensionClass.ProgressBarAnimation(CurrentProgressBar, (j + 1) * 100 / mediaURLs.Length);\n                        ExtensionClass.ProgressBarAnimation(TotalProgressBar, prevProgressVal + (((100 / urlArray.Length) / (mediaURLs.Length / scaler)) * (j / scaler)));\n\n                        if (SaveFile.Checked)   //Saves jpgs grabbed from url\n                        {\n                            //saves imgur jpgs as their url ID\n                            imgurPreventRd = false;\n                            imgurFileName = imgurId[j];\n\n                            while (File.Exists(mainPath + imgurFileName + ".jpg") || File.Exists(mainPath + imgurFileName + ".gif"))  //checks if name already exists to prevent files from being overwritten\n                            {\n                                if (SaveTo.SaveToDesktopCheckedProperty || SaveTo.SaveToDirectoryCheckedProperty)\n                                {\n                                    imgurPreventRd = true;\n                                    break;\n                                }\n                            }\n\n                            if (imgurPreventRd)\n                                continue;\n\n                            //if url in mediaURLs is jpg, download as jpg\n                            if (mediaURLs[j].Contains("jpg", StringComparison.OrdinalIgnoreCase))\n                            {\n                                await GetMedia(mediaURLs[j], mainPath + imgurFileName + ".jpg", client);\n                                counter++;\n                            }\n                            //if url in mediaURLs is gif, download as gif\n                            else if (mediaURLs[j].Contains("gif", StringComparison.OrdinalIgnoreCase))\n                            {\n                                await GetMedia(mediaURLs[j], mainPath + imgurFileName + ".gif", client);\n                                counter++;\n                            }\n                            //if url in mediaURLs is gif, download as gif\n                            else if (mediaURLs[j].Contains("mp4", StringComparison.OrdinalIgnoreCase))\n                            {\n                                failedDownload[j] = mediaURLs[j];\n                                attemptedMp4Download = true;\n                                continue;\n                            }\n                            downCount++;\n                        }\n\n                        if (OpenFile.Checked)\n                            Process.Start(mediaURLs[j]);   //opens the grabbed urls in the webbrowser \n                    }\n                    prevProgressVal += (100 / urlArray.Length);\n\n                    totalImgurMediaGrabbed += counter;\n                    if (attemptedMp4Download)\n                    {\n                        string mp4Urls = "";\n                        foreach (string s in failedDownload) { mp4Urls += (s + Environment.NewLine); }\n                        Task.Run(() =>\n                        {\n                            System.Media.SystemSounds.Exclamation.Play();\n                            MessageBox.Show("Mp4 Files Were Skipped!\\n\\nAlbum Url:\\n" + url + "\\n\\nAlbum Name:\\n" + imgurAlbumTitle + Environment.NewLine + "\\nMp4 Urls:\\n" + mp4Urls, "Skipped Files!");\n                        });\n\n                    }\n                    attemptedMp4Download = false;\n                    LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  Imgur Album #" + (i + 1) + " Grabbed! " + Environment.NewLine);\n                }\n\n                ExtensionClass.ProgressBarAnimation(TotalProgressBar, 100);\n\n                noDownload = false; //urlarray was not empty\n            }\n            ErrorCheck();\n        }\n\n        //************************************************************************INSTAGRAM***************************************************************************************\n        private async Task InstagramGrabAsync() //grabs media from instagram posts\n        {\n            busy = true;\n            checkFailed = false;\n            CheckUrlBoxBeforeGrab();\n\n            if (checkFailed)\n            {\n                busy = false;\n                return;\n            }\n            else if (!checkFailed)\n            {\n                ProgramExecute.Text = "Grabbing from URLs!";    //shows current status in label\n\n                string[] stringSep = new string[] { "\\r\\n" };      //string separator, characters to split\n                urlArray = urlBox.Text.Split(stringSep, StringSplitOptions.None);  //separates user inputed URLs with stringSep and store in the array urlArray\n\n                failCount = 0;\n\n                string url,     //string to hold each URL which will be parsed\n                       date;    //string to date for concatenation of path and file name\n\n                int fileNum = 1; //Used to keep track of existing or new txts\n\n                prevProgressVal = 0;\n\n                indexToClean = 0;\n                oldArrayLength = urlArray.Length;\n\n                for (int i = 0; i < oldArrayLength; i++)  //cycles through and remove bad indexes leaving the array with only URLs\n                {\n                    if (String.IsNullOrEmpty(urlArray[indexToClean]) || String.IsNullOrWhiteSpace(urlArray[indexToClean]) || urlArray[indexToClean].Length < 22 || !urlArray[indexToClean].Contains("instagram", StringComparison.OrdinalIgnoreCase))\n                    {\n                        urlArray = RemoveIndex(urlArray, indexToClean);\n                    }\n                    else\n                        indexToClean++;\n                }\n\n                if (urlArray == null || urlArray.Length == 0)   //if urlarray is empty and nothing downloads, stops here\n                {\n                    Task.Run(() =>\n                    {\n                        System.Media.SystemSounds.Exclamation.Play();\n                        MessageBox.Show("Nothing Downloaded.\\nPlease Make Sure You Used Valid Urls.", "Download Failed", MessageBoxButtons.OK);\n                    });\n\n                    noDownload = true;\n                    ProgramExecute.Text = "";\n                    return;\n                }\n\n                urlGrabSuccess = new bool[urlArray.Length]; //create bool array used to keep track of which URLs succeeded or failed\n\n                for (int i = 0; i < urlArray.Length; i++)   //loops for the amount of URLs entered\n                {\n                    url = urlArray[i];  //stores current URL from the array into string url\n                    downCount = 1;\n\n                    try     //try catch when grabbing url\n                    {\n                        html = client.GetStringAsync(url).GetAwaiter().GetResult();\n                        GrabUrls(html);        //finds specific urls, save and trim to mediaURLs\n                        date = instagramUploadDate;\n                        DirectorySelect();\n                        mainPath = mainPath + "\\" + instagramProfileAt;\n                        if (SaveTo.ProgrammedDirectoryCheckedProperty)\n                            Directory.CreateDirectory(mainPath);\n                        if (!File.Exists($"{mainPath}\\{instagramProfileAt}_Captions.txt"))\n                            File.Create($"{mainPath}\\{instagramProfileAt}_Captions.txt").Close();\n\n                        newPath = path2 + instagramProfileAt + "_" + date + "_" + fileNum.ToString() + ".txt";\n                        LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  Grabbing Instagram Url " + (i + 1) + Environment.NewLine);\n\n                        sb.Append($"[{instagramDateAndTime}] [ShortCode: {shortcode} ] [URL: https://www.instagram.com/p/{shortcode} ]{Environment.NewLine}[Comment:{instagramCaption}]{Environment.NewLine}{Environment.NewLine}");\n                        File.AppendAllText($"{mainPath}\\{instagramProfileAt}_Captions.txt", sb.ToString());\n                        sb.Clear();\n\n                        urlGrabSuccess[i] = true;   //current URL successfully downloaded\n                    }\n                    catch (Exception e)  //when download fails\n                    {\n                        //MessageBox.Show(e.Source);    //used to find what is throwing the program into catch\n                        error = true;           //error flag raise\n                        urlGrabSuccess[i] = false;//currentURL failed to download\n                        failCount++;            //keeps track of how many times a URL failed\n                        continue;               //moves on to the next iteration/URL\n                    }\n                    if (SaveTxt.Checked)  //Saves txt containing every media URL after parsing by URLs\n                    {\n                        while (File.Exists(newPath)) //prevents txt containing urls to be overwritten, by checking if name already exits\n                        {\n                            fileNum++;//fileNum increases by 1 \n                            newPath = path2 + instagramProfileAt + "_" + date + "_" + shortcode + "_" + fileNum.ToString() + ".txt"; //newPath is concatenated with fileNum\n                                                                                                                                     //loops until a newPath doesn\'t exist so a new txt file can be made\n                        }\n                        System.IO.File.WriteAllLines(newPath, mediaURLs);//save mediaURLs to txt\n                    }\n                    for (int j = 0; j < mediaURLs.Length; j++)    //Downloads or opens file in browser\n                    {\n                        ExtensionClass.ProgressBarAnimation(CurrentProgressBar, (j + 1) * 100 / mediaURLs.Length);\n                        ExtensionClass.ProgressBarAnimation(TotalProgressBar, prevProgressVal + (((100 / urlArray.Length) / (mediaURLs.Length / scaler)) * (j / scaler)));\n\n                        if (SaveFile.Checked)   //saves all media found from a post\n                        {\n\n                            //prevents media from being overwritten, by checking if it already exits\n                            while (File.Exists(mainPath + "\\" + date + "_" + shortcode + "_" + downCount + ".jpg") || File.Exists(mainPath + "\\" + date + "_" + shortcode + "_" + downCount + ".mp4"))\n                            {\n                                downCount++;    //increase download count\n                            }\n\n                            //if url in mediaURLs is jpg, download as jpg\n                            if (mediaURLs[j].Contains("jpg", StringComparison.OrdinalIgnoreCase))\n                            {\n                                await GetMedia(mediaURLs[j], mainPath + "\\" + date + "_" + shortcode + "_" + downCount + ".jpg", client);\n                                downCount++;    //increase download count\n                            }\n                            //if url in mediaURLs is mp4, download as mp4\n                            else if (mediaURLs[j].Contains("mp4", StringComparison.OrdinalIgnoreCase))\n                            {\n                                await GetMedia(mediaURLs[j], mainPath + "\\" + date + "_" + shortcode + "_" + downCount + ".mp4", client);\n                                downCount++;    //increase download count\n                            }\n                        }\n                        if (OpenFile.Checked)\n                            Process.Start(mediaURLs[j]);   //opens the grabbed urls in the webbrowser \n                    }\n                    prevProgressVal += (100 / urlArray.Length);\n                    downCount = 1;\n                    LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  Instagram Post #" + (i + 1) + " Grabbed! " + Environment.NewLine);\n                }\n                ExtensionClass.ProgressBarAnimation(TotalProgressBar, 100);\n                noDownload = false; //urlarray was not empty\n            }\n\n            ErrorCheck();\n            profileArrayCurrentCount++;\n        }\n\n        //************************************************************************Vlive Update***************************************************************************************\n        private async Task CheckVlive() //checks vlive for new vods or if live\n        {\n            busy = true;\n            LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  Checking Vlive!" + Environment.NewLine);\n\n            string[] stringSep = new string[] { "\\r\\n" };      //string separator, characters to split\n            vliveUploadDate = vliveDateTextBox.Text.Split(stringSep, StringSplitOptions.None);\n\n            try\n            {\n                html2 = await client.GetStringAsync(VideoListEndpoint);\n            }\n            catch (WebException e)\n            {\n                LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  Error Checking Vlive! Check Skipped!" + Environment.NewLine);\n                busy = false;\n                return;\n            }\n            catch (Exception e)\n            {\n                LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  Error Checking Vlive! Check Skipped!" + Environment.NewLine);\n                busy = false;\n                /*\n                Task.Run(() =>\n                {\n                    MessageBox.Show("\\nFailed to download.\\n\\nException:\\n" + e, "Url Failed!");\n                });\n                */\n                return;\n            }\n            //data holds information from the parsed json using VliveMap\n            var data = JsonConvert.DeserializeObject<VliveMap>(html2);\n            string[] videoStartTimes = new string[10];\n            bool[] newVideo = new bool[10];\n            int videoCounter = 0;\n            if ((data.result.videoList == null) || (data == null))\n            {\n                LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  Error Checking Vlive! Check Skipped!" + Environment.NewLine);\n                busy = false;\n                return;\n            }\n\n            var videoList = data.result.videoList;\n\n            var channelName = data.result.channelInfo.channelName;\n            var firstItem = data.result.videoList[0];\n            var results = data.result;\n            var firstEntryDateTime = Convert.ToDateTime(data.result.videoList[0].onAirStartAt);\n            int i = 0;\n            newVOD = false;\n            live = false;\n\n            if (String.IsNullOrEmpty(vliveUploadDate[0]) || !DateTime.TryParse(vliveUploadDate[0], out lastDateTime))\n                vliveUploadDate[0] = default(DateTime).ToString();\n            lastDateTime = Convert.ToDateTime(vliveUploadDate[0]);\n            //notifies if currently live\n            if ((lastDateTime != firstEntryDateTime) && (data.result.videoList[0].videoType.Contains("live", StringComparison.OrdinalIgnoreCase)))\n            {\n                live = true;\n                LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  Vlive! Now Live!" + Environment.NewLine);\n                string temp = $"https://www.vlive.tv/video/{data.result.videoList[0].videoSeq}?channelCode={"vlive channel code"}";\n                Task.Run(() =>\n                {\n                    System.Media.SystemSounds.Beep.Play();\n\n                    var dialogResult = MessageBox.Show($"{firstItem.onAirStartAt} {channelName} went live!\\n\\nTitle: {firstItem.title}\\nPlays: {firstItem.playCount}\\n" +\n                        $"Likes: {firstItem.likeCount}\\nComments: {firstItem.commentCount}\\n\\n" +\n                        $"{temp}\\n\\nOpen in browser?", $"{channelName} is Live!", MessageBoxButtons.OKCancel);\n\n                    if (dialogResult == DialogResult.OK)\n                        Process.Start(temp);\n\n                });\n            }\n            //checks any new vods were posted\n            foreach (VideoList item in videoList)\n            {\n                videoStartTimes[i] = item.onAirStartAt;\n                if (lastDateTime < Convert.ToDateTime(item.onAirStartAt))\n                {\n                    newVOD = true;\n                    videoCounter++;\n                    newVideo[i] = true;\n                }\n                i++;\n            }\n            //notifies if there were any new vods posted\n            for (int j = videoCounter - 1; j >= 0; j--)\n            {\n                if (live && (j == 0))\n                    continue;\n\n                string temp = $"https://www.vlive.tv/video/{data.result.videoList[j].videoSeq}?channelCode={"vlive channel code"}";\n                string likeCount = results.videoList[j].likeCount, commentCount = results.videoList[j].commentCount,\n                    playCount = results.videoList[j].playCount, title = results.videoList[j].title, startTime = videoStartTimes[j];\n                LogBox.Text = LogBox.Text.Insert(0, $"{DateTime.Now.ToString()}  Vlive! A new video was uploaded on {startTime} ({title}){Environment.NewLine}");\n                //Console.WriteLine($"{DateTime.Now.ToLongTimeString()}\\tA new video was uploaded on {videoStartTimes[j]}\\t( {temp} )");\n\n                Task.Run(() =>\n                {\n                    System.Media.SystemSounds.Beep.Play();\n\n                    var dialogResult = MessageBox.Show($"{channelName} uploaded a video on {startTime}!" +\n                        $"\\n\\nTitle: {title}\\nPlays: {playCount}\\n" +\n                        $"Likes: {likeCount}\\nComments: {commentCount}" +\n                        $"\\n\\nOpen in browser?", $"Vlive New Video!", MessageBoxButtons.OKCancel);\n\n                    if (dialogResult == DialogResult.OK)\n                        Process.Start(temp);\n\n                });\n            }\n            lastDateTime = Convert.ToDateTime(data.result.videoList[0].onAirStartAt);\n            vliveDateTextBox.Text = String.Empty;\n            vliveDateTextBox.Text = lastDateTime.ToString();\n\n\n            if (MinimizeToTray.Visible)\n            {\n                if (live)\n                {\n                    MinimizeToTray.BalloonTipTitle = "Now Live!";\n                    MinimizeToTray.BalloonTipText = $"VLIVE! {channelName} is now Live!";\n                    MinimizeToTray.ShowBalloonTip(5000);\n                }\n                else if (newVOD)\n                {\n                    MinimizeToTray.BalloonTipTitle = "New Vlive Video!";\n                    MinimizeToTray.BalloonTipText = "VLIVE! A New Video!";\n                    MinimizeToTray.ShowBalloonTip(5000);\n                }\n            }\n            if (!live && !newVOD)\n                LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  Vlive: No New Videos!" + Environment.NewLine);\n            busy = false;\n\n        }\n\n        //************************************************************************INSTAGRAM UPDATE***************************************************************************************\n        private async Task InstagramUpdateAsync()   //checks for new posts from instagram accounts\n        {\n            if (!SaveFile.Checked && !SaveTxt.Checked && !OpenFile.Checked)    //stops the program from executing if no selection is made to open,save txt, and save file\n            {\n                if (AutoUpdateCheckBox.Checked)\n                {\n                    AutoUpdateCheckBox.CheckState = CheckState.Unchecked;\n                }\n                Task.Run(() =>\n                {\n                    System.Media.SystemSounds.Exclamation.Play();\n                    MessageBox.Show("Please choose what you want done using the checkboxes at the top-right.", "Instagram Update No Selection(s)", MessageBoxButtons.OK);\n                });\n\n                return;\n            }\n\n            busy = true;\n            autoUpdateClicked = true;\n\n            string[] stringSep = new string[] { "\\r\\n" };      //string separator, characters to split\n            profileArray = profileBox.Text.Split(stringSep, StringSplitOptions.None);  //separates user inputed URLs with stringSep and store in the array urlArray\n\n            indexToClean = 0;\n            oldArrayLength = profileArray.Length;\n            for (int i = 0; i < oldArrayLength; i++)  //cycles through and remove bad indexes leaving the array with only URLs\n            {\n                if (String.IsNullOrEmpty(profileArray[indexToClean]) || String.IsNullOrWhiteSpace(profileArray[indexToClean]) || profileArray[indexToClean].Length < 22 || !profileArray[indexToClean].Contains("instagram", StringComparison.OrdinalIgnoreCase))\n                {\n                    profileArray = RemoveIndex(profileArray, indexToClean);\n                }\n                else\n                    indexToClean++;\n            }\n\n            if (profileArray == null || profileArray.Length == 0)   //if urlarray is empty, stops here\n            {\n                Task.Run(() =>\n                {\n                    System.Media.SystemSounds.Exclamation.Play();\n                    MessageBox.Show("Nothing Downloaded.\\nPlease Make Sure You Used Valid Urls.", "Download Failed", MessageBoxButtons.OK);\n                });\n                ProgramExecute.Text = "";\n                busy = false;\n                return;\n            }\n\n            DateTime tempDateTime = new DateTime();\n            int upToDateCount = 0;\n\n            uploadDate = profileDateTextBox.Text.Split(stringSep, StringSplitOptions.None);  //separates user inputed URLs with stringSep and store in the array urlArray\n            while (uploadDate.Length < profileArray.Length)\n            {\n                if (uploadDate.Length < profileArray.Length)\n                {\n                    profileDateTextBox.Text = profileDateTextBox.Text + Environment.NewLine;\n                    uploadDate = profileDateTextBox.Text.Split(stringSep, StringSplitOptions.None);\n                }\n            }\n\n            while (uploadDate.Length > profileArray.Length)\n                uploadDate = RemoveIndex(uploadDate, uploadDate.Length - 1);\n\n            profileArrayCurrentCount = 1;\n\n            for (int j = 0; j < profileArray.Length; j++)\n            {\n                upToDateCheck = false;\n                ProgramExecute.Text = "Checking for latest post!";\n                urlBox.Text = "";\n                busy = true;\n\n                if (String.IsNullOrEmpty(uploadDate[j]) || !DateTime.TryParse(uploadDate[j], out tempDateTime))\n                    uploadDate[j] = default(DateTime).ToString();\n                tempDateTime = Convert.ToDateTime(uploadDate[j]);\n\n                urlProfile.AutoGrab(profileArray[j], tempDateTime, client, doc); //from AutoInstaGrab\n\n                //.Substring(26, profileArray[j].Contains("hl=en", StringComparison.OrdinalIgnoreCase)? profileArray[j].Length - 6: profileArray[j].Length - 1)\n                if (urlProfile.failedDownload)  //if went into catch, go onto next url\n                {\n                    LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  Check Failed for: @" + profileArray[j].Split(\'/\', \'/\')[3] + "!" + Environment.NewLine);\n                    continue;\n                }\n\n                LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  Checking for Latest Post(s) For " + urlProfile.profileAt + "!" + Environment.NewLine);\n\n                instagramProfileAt = urlProfile.profileAt;  //saves the profile name\n\n                if (urlProfile.toDownloadCount > 0) //fills up urlBox with new posts with respect to saved previous upload date and upload time\n                {\n                    int k = urlProfile.postsToDownload.Length - 1;\n                    for (int i = 0; i < urlProfile.postsToDownload.Length; i++)\n                    {\n                        urlBox.Text = urlBox.Text + urlProfile.postsToDownload[i] + Environment.NewLine;\n                        string tempUrl = urlProfile.postsToDownload[i];\n                        string tempComment = urlProfile.commentsDownloaded[i];\n                        DateTime tempDateAndTime = urlProfile.postUploadDateAndTime[k];\n\n                        Task.Run(() =>\n                        {\n                            System.Media.SystemSounds.Beep.Play();\n\n                            var dialogResult = MessageBox.Show($"{urlProfile.profileAt} uploaded a post on {tempDateAndTime.ToShortDateString()} at {tempDateAndTime.ToLongTimeString()}" +\n                                $"!\\n\\nCaption:\\n{tempComment}\\n\\n{tempUrl}\\n\\n" +\n                                $"Would you like to open the post in a browser?", "New Insta Post!", MessageBoxButtons.OKCancel);\n\n                            if (dialogResult == DialogResult.OK)\n                                Process.Start(tempUrl);\n\n                        });\n\n                        k--;\n                    }\n\n                    uploadDate[j] = urlProfile.latestPost.ToString();\n                }\n                else if (urlProfile.toDownloadCount == 0)\n                {\n                    upToDateCheck = true;\n                    Log();\n                    upToDateCount++;\n                    continue;\n                }\n                await InstagramGrabAsync();        //downloads posts\n                urlBox.Text = "";\n\n            }\n            busy = true;\n            profileDateTextBox.Text = "";\n            for (int k = 0; k < uploadDate.Length; k++)\n            {\n                if (k < uploadDate.Length - 1)\n                    profileDateTextBox.Text = profileDateTextBox.Text + uploadDate[k] + Environment.NewLine;\n                else\n                    profileDateTextBox.Text = profileDateTextBox.Text + uploadDate[k];\n\n            }\n            if (upToDateCount == profileArray.Length)\n            {\n                ProgramExecute.Text = "Already Up To Date!";\n                LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  All Profile(s) Already Up To Date!" + Environment.NewLine);\n\n                ResetProgramExecuteStatus();\n            }\n            else\n            {\n                /*\n                if (AutoUpdateCheckBox.Checked)\n                    System.Media.SystemSounds.Hand.Play();\n                    */\n                ProgramExecute.Text = "Instagram Profile(s) Up To Date!" + " Standby...";  //shows current status, in label then timer used to clear label)\n                TotalProgressBar.Value = 0;\n                CurrentProgressBar.Value = 0;\n\n\n            }\n            autoUpdateClicked = false;\n            busy = false;\n        }\n\n        //************************************************************************ErrorCheck***************************************************************************************\n        private void ErrorCheck() //checks for any errors during grab, displays which urls failed etc.\n        {\n            if (error)  //if catch occurs\n            {\n                ProgramExecute.Text = "One or more URLs failed!";  //shows current status, in label then timer used to clear label\n\n                string[] failedUrlArray = new string[failCount];\n                int j = 0;\n                int[] urlFailLocation = new int[failCount];       //array to store number location of failed URL\n                for (int i = 0; i < urlGrabSuccess.Length; i++)\n                {\n                    if (urlGrabSuccess[i] == false)     //loops through bool urlGrabSuccess, if false stores that URL location number, also stores the line that failed into failedUrlArray\n                    {\n                        failedUrlArray[j] = urlArray[i];\n                        urlFailLocation[j] = i + 1;\n                        j++;\n                    }\n                }\n\n                string failedUrls = string.Join(Environment.NewLine, failedUrlArray);//concatenates the array into single string to show in messagebox\n                string failLocation = string.Join(", ", urlFailLocation);      //concatenates the array into single string to show in messagebox\n                Task.Run(() =>\n                {\n                    System.Media.SystemSounds.Exclamation.Play();\n                    MessageBox.Show(failCount + " URL(s) failed!\\n" + "Failed to grab URL(s) number: " + failLocation +\n                    Environment.NewLine + Environment.NewLine + failedUrls\n                    + "\\n\\nMake sure to input valid URLs.", "Failed to Grab One or More URL(s)");\n                });\n\n                error = false;\n            }\n            else if (noDownload)    //if urlarray was empty and nothing was downloaded\n                ProgramExecute.Text = "No URL(s) Grabbed!" + " Standby...";  //shows current status, in label then timer used to clear label\n            else    //code successfully ran\n            {\n                //Finished\n                if (imgurRadioButton.Checked)\n                {\n                    if (totalImgurMediaGrabbed == 0)\n                        ProgramExecute.Text = "Album Already Grabbed! " + " Standby...";\n                    else\n                    {\n                        ProgramExecute.Text = "Successfully Grabbed " + totalImgurMediaGrabbed + " imgur image(s)!" + " Standby...";\n                        Log();\n                    }\n                }\n                else if (autoUpdateClicked)\n                {\n                    ProgramExecute.Text = "Instagram Profile(s) Up To Date!" + " Standby...";  //shows current status, in label then timer used to clear label)\n                    Log();\n                }\n                else if (naverRadioButton.Checked)\n                {\n                    if (naverPreventRd)\n                        ProgramExecute.Text = "Post(s) Already Grabbed! " + " Standby...";  //shows current status, in label then timer used to clear label\n                    else\n                    {\n                        ProgramExecute.Text = "Successfully Grabbed From URL(s)!" + " Standby...";  //shows current status, in label then timer used to clear label\n                        Log();\n                    }\n\n                    naverPreventRd = false;\n                }\n                else\n                {\n                    Log();\n                    ProgramExecute.Text = "Successfully Grabbed From URL(s)!" + " Standby...";  //shows current status, in label then timer used to clear label\n                }\n            }\n            busy = false;\n        }\n\n        //************************************************************************GrabURLS***************************************************************************************\n        private void GrabUrls(string file) //finds media from either imgur or instagram using json parsing\n        {\n\n            //doc = new HtmlAgilityPack.HtmlDocument();\n            doc.LoadHtml(file);\n\n            if (instaRadioButton.Checked)\n            {\n                //extracts json block from html\n                json = doc.DocumentNode.Descendants().Where(x => x.InnerText.StartsWith("window._sharedData")).First().InnerText;\n                //cleans json block and parses above json using InstagramPost mapping\n                var data = JsonConvert.DeserializeObject<InstagramPost>(json.Substring(21, json.Length - 22));\n\n                var eToUtc = epoch.AddSeconds(Convert.ToDouble(data.entryData.postPage.First().graphql.media.taken_at_timestamp));\n                var userName = data.entryData.postPage.First().graphql.media.owner.username;\n                var type = data.entryData.postPage.First().graphql.media.__typename;\n                var instaMedia = data.entryData.postPage.First().graphql.media;\n                instagramDateAndTime = eToUtc;\n                instagramUploadDate = eToUtc.Year + "-" + eToUtc.Month + "-" + eToUtc.Day;\n                instagramProfileAt = "@" + userName;\n                shortcode = data.entryData.postPage[0].graphql.media.shortcode;\n                if (data.entryData.postPage[0].graphql.media.caption.captionEdges.Any())\n                    instagramCaption = data.entryData.postPage[0].graphql.media.caption.captionEdges[0].captionNode.text;\n                else\n                    instagramCaption = "No Caption!";\n\n                //checks if post includes image(s) and/or video(s)\n                if (type == "GraphSidecar")\n                {\n                    var edges = data.entryData.postPage[0].graphql.media.children.edges;\n                    int i = 0;\n                    string tempUrl = "";\n                    mediaURLs = new string[edges.Length];\n\n                    foreach (InstagramPost.Edges e in edges)\n                    {\n                        if (e.node.__typename == "GraphImage")\n                            tempUrl = e.node.resources.Last().src;\n                        else if (e.node.__typename == "GraphVideo")\n                            tempUrl = e.node.video_url;\n\n                        mediaURLs[i] = tempUrl;\n                        i++;\n                    }\n                }\n                //checks if post is an image\n                else if (type == "GraphImage")\n                {\n                    var singleImg = data.entryData.postPage.First().graphql.media.resources.Last().src;\n                    mediaURLs = new string[1];\n                    mediaURLs[0] = singleImg;\n                }\n                //checks if post is a video\n                else if (type == "GraphVideo")\n                {\n                    var singleVid = data.entryData.postPage.First().graphql.media.video_url;\n                    mediaURLs = new string[1];\n                    mediaURLs[0] = singleVid;\n                }\n            }\n            else if (imgurRadioButton.Checked)\n            {\n                /* Old scraping method before imgur implemented their API\n                 //extracts json block from imgur album html\n                json = doc.DocumentNode.Descendants().Where(x => x.InnerText.Trim().StartsWith("window.runSlots")).First().InnerText;\n                //removes left over string, "\\n"\n                json = Regex.Replace(json, @"\\n", string.Empty);\n                //cleans up json block and parses using ImgurPost mapping\n                var data = JsonConvert.DeserializeObject<ImgurPost>(json.Substring(30, json.Length - 253));\n                */\n\n                var mappedData = JsonConvert.DeserializeObject<ImgurPostAPI>(file); //using the new Imgur API endpoint\n                var images = mappedData.data.images;\n                imgurAlbumTitle = mappedData.data.title != null ? mappedData.data.title : mappedData.data.id;\n                imgurDownloadCount = images.Length;\n                mediaURLs = new string[images.Length];\n                imgurId = new string[images.Length];\n\n                int k = 0;\n                //creates imgur media urls from gathered hash code\n                foreach (ImgurPostAPI.Images e in images)\n                {\n                    imgurId[k] = images[k].id;\n                    //mediaURLs[k] = "https://i.imgur.com/" + images[k].hash + images[k].ext;\n                    mediaURLs[k] = images[k].link;\n                    k++;\n                }\n            }\n            if (mediaURLs.Length > 400)\n                scaler = 30;\n            else if (mediaURLs.Length > 200 && mediaURLs.Length < 400)\n                scaler = 25;\n            else if ((mediaURLs.Length > 100) && (mediaURLs.Length < 200))\n                scaler = 20;\n            else if ((mediaURLs.Length > 30) && (mediaURLs.Length < 100))\n                scaler = 15;\n            else if (mediaURLs.Length > 15 && mediaURLs.Length < 30)\n                scaler = 5;\n            else\n                scaler = 1;\n        }\n\n        private static async Task GetMedia(string mediaUrl, string downloadPath, HttpClient client) //downloads file to specified path using httpclient\n        {\n            File.WriteAllBytes(downloadPath, (await client.GetByteArrayAsync(mediaUrl)));\n        }\n\n        private void CheckUrlBoxBeforeGrab()    //checks if textbox is empty or if no option is selected\n        {\n            if (String.IsNullOrWhiteSpace(urlBox.Text) || urlBox.Text.Length < 2)      //stops the program from executing if empty url box, popup window opens\n            {\n                Task.Run(() =>\n                {\n                    System.Media.SystemSounds.Exclamation.Play();\n                    MessageBox.Show("Please Enter a URL and/or Choose a Directory.", "Empty Input", MessageBoxButtons.OK);\n                });\n\n                checkFailed = true;\n            }\n            else if (!SaveFile.Checked && !SaveTxt.Checked && !OpenFile.Checked)    //stops the program from executing if no selection is made to open,save txt, and save file\n            {\n                Task.Run(() =>\n                {\n                    System.Media.SystemSounds.Exclamation.Play();\n                    MessageBox.Show("Please choose what you want done using the checkboxes at the top-right.", "No Selection(s)", MessageBoxButtons.OK);\n                });\n\n                checkFailed = true;\n            }\n        }\n\n        private void ResetProgramExecuteStatus()    //resets status textbox\n        {\n            var timer = new Timer();\n            timer.Interval = 2500;\n            timer.Tick += (s, Timer) =>\n            {\n                ProgramExecute.Text = "Standby...";\n                timer.Stop();\n            };\n            timer.Start();\n        }\n\n        private void Log()  //additional logging for logbox\n        {\n            CheckLogBoxLength();\n\n            if (AutoUpdateCheckBox.Checked || autoUpdateClicked)\n            {\n                if (upToDateCheck)\n                    LogBox.Text = LogBox.Text.Insert(0, $"{DateTime.Now.ToString()}  No New Post(s) For {urlProfile.profileAt}!{Environment.NewLine}");\n                else\n                {\n                    LogBox.Text = LogBox.Text.Insert(0, $"{DateTime.Now.ToString()}  New Post(s) Downloaded For {urlProfile.profileAt}!{Environment.NewLine}");\n\n                    if (MinimizeToTray.Visible)\n                    {\n                        MinimizeToTray.BalloonTipTitle = $"Instagram: {urlProfile.profileAt}!";\n                        MinimizeToTray.BalloonTipText = $"A New Post Was Downloaded From {urlProfile.profileAt}!";\n                        MinimizeToTray.ShowBalloonTip(5000);\n                    }\n                }\n\n            }\n            else if (instaRadioButton.Checked && !AutoUpdateCheckBox.Checked)\n                LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  Post(s) Grabbed!" + Environment.NewLine);\n            else if (imgurRadioButton.Checked)\n                LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  Imgur Album(s) Grabbed!" + Environment.NewLine);\n            else if (naverRadioButton.Checked)\n                LogBox.Text = LogBox.Text.Insert(0, DateTime.Now.ToString() + "  Naver Post(s) Grabbed!" + Environment.NewLine);\n        }\n\n        //************************************************************************RemoveIndex***************************************************************************************\n        private static string[] RemoveIndex(string[] stringToRemove, int index) //make a new copy of stringToRemove without the string at desired index\n        {\n            //temp[] to hold new copy without specified index\n            string[] temp = new string[stringToRemove.Length - 1];\n            int i = 0;\n            int j = 0;\n\n            while (i < stringToRemove.Length)\n            {\n                if (i != index) //if i does not equal the desired index to remove, copy to temp and increase index of temp. else don\'t copy, then copy the rest\n                {\n                    temp[j] = stringToRemove[i];\n                    j++;\n                }\n                i++;\n            }\n\n            return temp;\n        }\n    }\n}\n',fileName:"Form1",language:"csharp",id:"01"},{path:'using System;\nusing System.Windows.Forms;\nusing System.Net.Http;\nusing System.Linq;\nusing ConsoleApp3;\nusing Newtonsoft.Json;\nusing static ConsoleApp3.InstagramProfile;\nusing Newtonsoft.Json.Linq;\nusing System.Threading.Tasks;\n\nnamespace InstaGrabber\n{\n    public class AutoInstaGrab\n    {\n        //***********************************************************************GLOBAL VARIABLES*************************************************************************************************\n        #region Variables\n        private static string[] Post = new string[12];  //post[] holds the 12 posts from the profile\n\n        public int toDownloadCount;             //keeps tracck of how many posts need to be downloaded\n\n        public string[] postsToDownload, commentsDownloaded;        //holds the posts which need to be downloaded\n\n        public string profileAt;               //name of the profile\n        public string shortCode;\n        private static string Url;                      //url of the profile\n\n        private bool[] toDownload = new bool[12];//keeps track of which index needs to be downloaded, parallel with postsToDownload\n\n        public bool failedDownload;             //if failed to grab html at one of the two points\n        private static readonly DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n        public DateTime[] postUploadDateAndTime = new DateTime[12];\n        public DateTime latestPost;\n        public string[] postShortCodes = new string[12];\n\n        #endregion\n        //***************************************************************************************************************************************************************************************\n\n        //**********************************************************************METHODS**********************************************************************************************************\n        public void AutoGrab(string url, DateTime lastPostDateAndTime, HttpClient client, HtmlAgilityPack.HtmlDocument doc)\n        {\n            failedDownload = false;\n            Url = url;\n\n            try\n            {\n                string html = client.GetStringAsync(url).GetAwaiter().GetResult();\n                GrabPosts(html, lastPostDateAndTime, client, doc);\n            }\n            catch (Exception e)\n            {\n\n                Task.Run(() =>\n                {\n                    System.Media.SystemSounds.Exclamation.Play();\n                    MessageBox.Show(Url + "\nFailed to download.\nProfile uses a different format.\n" + e, "Url Failed!");\n                });\n\n                failedDownload = true;\n                return;\n            }\n        }\n\n        public void GrabPosts(string html, DateTime lastPostDateAndTime, HttpClient client, HtmlAgilityPack.HtmlDocument doc)\n        {\n            string[] postUrls = new string[12], postCaptions = new string[12], shortCodes = new string[12];\n            string json;\n            toDownloadCount = 0;\n            //doc = new HtmlAgilityPack.HtmlDocument();\n            doc.LoadHtml(html);\n            json = doc.DocumentNode.Descendants().Where(x => x.InnerText.StartsWith("window._sharedData")).First().InnerText;\n            var data = JsonConvert.DeserializeObject<InstagramProfile>(json.Substring(21, json.Length - 22));\n            var profile = data.entryData.profilePage[0].graphql.user.username;\n            profileAt = "@" + profile;\n            \n            latestPost = epoch.AddSeconds(Convert.ToDouble(data.entryData.profilePage[0].graphql.user.postEdges.edges[0].node.taken_at_timestamp));\n            if (lastPostDateAndTime == latestPost)\n                return;\n            var profileEdge = data.entryData.profilePage[0].graphql.user.postEdges.edges;\n            \n            int k = 0;\n            foreach (Edges e in profileEdge)\n            {\n                var eToUtc = epoch.AddSeconds(Convert.ToDouble(e.node.taken_at_timestamp));\n                if (eToUtc > lastPostDateAndTime)\n                    toDownloadCount++;\n                else\n                    break;\n\n                string caption = string.Empty;\n                postUrls[k] = "https://www.instagram.com/p/" + e.node.shortcode;\n\n                if (e.node.captionEdge.edges2.Any())\n                    caption = e.node.captionEdge.edges2[0].node2.text;\n                else\n                    caption = "No Caption!";\n\n                shortCodes[k] = shortCode;\n                postCaptions[k] = caption;\n                postUploadDateAndTime[k] = eToUtc;\n\n                k++;\n            }\n\n            commentsDownloaded = new string[toDownloadCount];\n            postsToDownload = new string[toDownloadCount];  //saves each new post which has not been downloaded yet into a new array\n            int w = 0;\n            for (int y = toDownloadCount - 1; y >= 0; y--)\n            {\n                commentsDownloaded[w] = postCaptions[y];\n                postShortCodes[w] = shortCodes[y];\n                postsToDownload[w] = postUrls[y];\n                w++;\n            }\n        }\n        //***************************************************************************************************************************************************************************************\n\n    }\n}\n',fileName:"AutoInstaGrab",language:"csharp",id:"02"},{path:'using Newtonsoft.Json;\n\nnamespace ConsoleApp3\n{\n    public class InstagramPost\n    {\n        [JsonProperty("entry_data")]\n        public EntryData entryData { get; set; }\n\n        public class EntryData\n        {\n            [JsonProperty("PostPage")]\n            public PostPage[] postPage { get; set; }\n        }\n\n        public class PostPage\n        {\n            [JsonProperty("graphql")]\n            public Graphql graphql { get; set; }\n        }\n\n        public class Graphql\n        {\n            [JsonProperty("shortcode_media")]\n            public Media media { get; set; }\n        }\n\n        public class Media\n        {\n            public string __typename { get; set; }\n            public string shortcode { get; set; }\n            public string video_url { get; set; }\n            public string taken_at_timestamp { get; set; }\n\n            [JsonProperty("edge_media_to_caption")]\n            public Caption caption { get; set; }\n\n            [JsonProperty("display_resources")]\n            public Resources[] resources { get; set; }\n\n            [JsonProperty("owner")]\n            public Owner owner { get; set; }\n\n            [JsonProperty("edge_sidecar_to_children")]\n            public Children children { get; set; }\n        }\n\n        public class Caption\n        {\n            [JsonProperty("edges")]\n            public CaptionEdges[] captionEdges { get; set; }\n        }\n\n        public class CaptionEdges\n        {\n            [JsonProperty("node")]\n            public CaptionNode captionNode { get; set; }\n        }\n\n        public class CaptionNode\n        {\n            public string text { get; set; }\n        }\n\n        public class Children\n        {\n            [JsonProperty("edges")]\n            public Edges[] edges { get; set; }\n        }\n\n        public class Edges\n        {\n            [JsonProperty("node")]\n            public Node node { get; set; }\n        }\n\n        public class Node\n        {\n            public string video_url { get; set; }\n            public string __typename { get; set; }\n\n            [JsonProperty("display_resources")]\n            public Resources[] resources { get; set; }\n        }\n\n        public class Owner\n        {\n            public string username { get; set; }\n        }\n\n        public class Resources\n        {\n            public string src { get; set; }\n        }\n\n    }\n}\n',fileName:"InstagramPostMap",language:"csharp",id:"03"},{path:'using Newtonsoft.Json;\n\n\nnamespace ConsoleApp3\n{\n    class InstagramProfile\n    {\n        [JsonProperty("entry_data")]\n        public EntryData entryData { get;set; }\n        \n        public class EntryData\n        {\n            [JsonProperty("ProfilePage")]\n            public ProfilePage[] profilePage { get; set; }\n        }\n\n        public class ProfilePage\n        {\n            [JsonProperty("graphql")]\n            public Graphql graphql { get; set; }\n        }\n\n        public class Graphql\n        {\n            [JsonProperty("user")]\n            public User user { get; set; }\n        }\n\n        public class User\n        {\n            public string username { get; set; }\n\n            [JsonProperty("edge_owner_to_timeline_media")]\n            public PostEdges postEdges { get; set; }\n        }\n\n        public class PostEdges\n        {\n            [JsonProperty("edges")]\n            public Edges[] edges { get; set; }\n        }\n        public class Edges\n        {\n            [JsonProperty("node")]\n            public Node node { get; set; }\n        }\n\n        public class Node\n        {\n            public string shortcode { get; set; }\n            public string taken_at_timestamp { get; set; }\n\n            [JsonProperty("edge_media_to_caption")]\n            public CaptionEdge captionEdge { get; set; }\n        }\n\n        public class CaptionEdge\n        {\n            [JsonProperty("edges")]\n            public Edges2[] edges2 { get; set; }\n        }\n\n        public class Edges2\n        {\n            [JsonProperty("node")]\n            public Node2 node2 { get; set; }\n        }\n\n        public class Node2\n        {\n            public string text { get; set; }\n        }\n\n    }\n}\n',fileName:"InstagramProfileMap",language:"csharp",id:"04"},{path:'using Newtonsoft.Json;\n\nnamespace ConsoleApp3\n{\n    public class ImgurPost\n    {\n        [JsonProperty("item")]\n        public Item item { get; set; }\n\n        public class Item\n        {\n            public string id { get; set; }\n            public string hash { get; set; }\n            public string title { get; set; }\n\n            [JsonProperty("album_images")]\n            public AlbumImages albumImages { get; set; }\n        }\n\n        public class AlbumImages\n        {\n            public string count { get; set; }\n\n            [JsonProperty("images")]\n            public Images[] images { get; set; }\n        }\n\n        public class Images\n        {\n            public string hash { get; set; }\n            public string ext { get; set; }\n        }\n    }\n}\n',fileName:"ImgurPostMap",language:"csharp",id:"05"},{path:'using Newtonsoft.Json;\n\nnamespace InstaGrabber\n{\n    class VliveMap\n    {\n        [JsonProperty("result")]\n        public Result result { get; set; }\n\n        public class Result\n        {\n            public string totalVideoCount { get; set; }\n\n            [JsonProperty("channelInfo")]\n            public ChannelInfo channelInfo { get; set; }\n\n            [JsonProperty("videoList")]\n            public VideoList[] videoList { get; set; }\n        }\n\n        public class ChannelInfo\n        {\n            public string channelSeq { get; set; }\n            public string channelCode { get; set; }\n            public string channelName { get; set; }\n            public string fanCount { get; set; }\n            public string upcomingShowYn { get; set; }\n            public string channelProfileImage { get; set; }\n            public string channelCoverImage { get; set; }\n            public string comment { get; set; }\n        }\n\n        public class VideoList\n        {\n            public string videoSeq { get; set; }\n            public string videoType { get; set; }\n            public string title { get; set; }\n            public string playCount { get; set; }\n            public string likeCount { get; set; }\n            public string commentCount { get; set; }\n            public string thumbnail { get; set; }\n            public string willStartAt { get; set; }\n            public string onAirStartAt { get; set; }\n            public string @type { get; set; }\n        }\n    }\n}\n',fileName:"VliveMap",language:"csharp",id:"06"}],screenShots:[{path:"p1/1.png",id:"s01"},{path:"p1/2.png",id:"s02"},{path:"p1/3.png",id:"s03"},{path:"p1/4.png",id:"s04"},{path:"p1/5.png",id:"s05"}]},{name:"InstaProfiles",index:1,description:"This program attempts to scrape every post of any given profile using additional api endpoints.",sourceCode:[{path:'using Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing HtmlAgilityPack;\nusing ConsoleApp3;\nusing InstaGrabber;\nusing static instagramPagesTest.InstagramNextPage;\n\nnamespace instagramPagesTest\n{\n    class Program\n    {\n        private static HttpClient client = new HttpClient();\n        private static HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument(), doc2 = new HtmlAgilityPack.HtmlDocument();\n        private static string json, html, instagramUploadDate, shortcode, end_cursor, prev_end_cursor = string.Empty, html2, url,\n                              root = Environment.GetFolderPath(Environment.SpecialFolder.Desktop), instagramProfileAt, profile = string.Empty,\n                              username = string.Empty, LogPath = string.Empty, caption = string.Empty;\n        private static string[] mediaURLs;\n        private static List<string> shortCodeUrls = new List<string>();\n        private static readonly DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n        private static DateTime eToUtc;\n        private static StringBuilder sb = new StringBuilder();\n        private static List<string> input = new List<string>();\n        private static int counter = 1, totalCounter, postCount;\n        private static bool nullUser = false, doesNotExist = false, getCaptions = false, getMedia = false;\n\n        static void Main(string[] args)\n        {\n            Console.SetBufferSize(250, 1000);\n            Console.ForegroundColor = ConsoleColor.DarkCyan;\n            Console.Title = "Profile Grabber!";\n\n            client.DefaultRequestHeaders.Add("User-Agent", "user agent info");\n\n            Directory.CreateDirectory(root + @"InstaGrabberDownloaded FilesNew Insta");\n            while (true)\n            {\n                nullUser = false;\n                end_cursor = string.Empty;  //pagination value used to access the next page\n                counter = 1; //keeps track of pagination of instagram posts\n\n                while (true)\n                {\n                    try\n                    {\n                        Input();\n\n                        if (profile.All(char.IsDigit))\n                        {    //if an instagram profile\'s id is given instead of username, get the username\n                            username = GetUsername(profile);\n                            postCount = Convert.ToInt32(GetPostCount(username));\n                        }\n                        else if (profile == "n")    //if exitting program\n                            break;\n                        else\n                        {  //if an instagram profile\'s username is given, get the id\n                            username = profile;\n                            GetId(profile);\n                        }\n                        if (!doesNotExist)\n                        {    //create directories if they do not already exist\n                            Directory.CreateDirectory(root + $"\\InstaGrabber\\Downloaded Files\\New Insta\\@{username}");\n                            if (getCaptions)\n                            {\n                                LogPath = root + $"\\InstaGrabber\\Downloaded Files\\New Insta\\@{username}\\@{username}_Captions.txt";\n                                if (!File.Exists(root + $"\\InstaGrabber\\Downloaded Files\\New Insta\\@{username}\\@{username}_Captions.txt"))\n                                    File.Create(root + $"\\InstaGrabber\\Downloaded Files\\New Insta\\@{username}\\@{username}_Captions.txt").Close();\n                            }\n                            break;\n                        }\n\n                        doesNotExist = false;\n                    }\n                    catch (Exception e)\n                    {\n                        Console.WriteLine(e);\n                    }\n\n                }\n                if (profile == "n")\n                    break;\n                totalCounter = 0;\n                Console.Clear();\n                Console.Title = $"Attempting to grab {postCount} post(s) from {((postCount % 50 > 0) ? postCount / 50 + 1 : postCount / 50)} page(s)! [Username:{username}] [ID:{profile}]!";\n                Console.WriteLine(!string.IsNullOrEmpty(username) ? $"Attempting to grab {postCount} post(s) from {((postCount % 50 > 0) ? postCount / 50 + 1 : postCount / 50)} page(s)! [Username:{username}] [ID:{profile}]!\n" +\n                    $"Files saved to directory \\Desktop\\InstaGrabber\\Downloaded Files\\New Insta\\@{username}" : $"Error from {profile}!");\n\n                while (true)\n                {  //grab urls of all post of the current page\n                    if (!getCaptions && !getMedia)\n                        break;\n                    prev_end_cursor = end_cursor;   //sets the pagination cursor\n                    url = $"api query url";\n                    GrabShortCodes(url);\n\n                    if (nullUser)\n                        break;\n\n                    Console.WriteLine($"Grabbing! [Page:{counter} of {((postCount % 50 > 0) ? postCount / 50 + 1 : postCount / 50)}] [Profile:{username}] [ID:{profile}] Next:( {end_cursor} )");\n                    foreach (string shortCode in shortCodeUrls) //grab media for every post url\n                        InstagramGrabAsync(shortCode).GetAwaiter().GetResult();\n\n                    if (prev_end_cursor == end_cursor)\n                        break;\n\n                    counter++;\n                }\n                if (!nullUser)\n                {\n                    Console.WriteLine($"Finished Grabbing From @{username}! Downloaded {totalCounter} of {postCount} post(s)!\n");\n                    Console.Title = $"Finished! [@{username}] [{profile}] {(getCaptions ? "[Downloaded All Posts and Captions!]" : "[Downloaded All Posts!]")} [Downloaded:{totalCounter} post(s)!]";\n                }\n            }\n        }\n\n        private static void Input() //process the user input\n        {\n            while (true)\n            {\n                Console.WriteLine($"Enter the ID of the profile to grab or type (n) to exit.{Environment.NewLine}Type "profileName/profileID" "captions/media/(leave emtpy to download both)"");\n                input = Console.ReadLine().Split(\' \').ToList();\n                if (input.All(x => string.IsNullOrEmpty(x.Trim())))\n                    Console.WriteLine("Nothing was entered!");\n                else\n                {\n                    if (input.Count == 2)\n                    { //if either captions or media needs to be downloaded\n                        profile = input[0];\n                        if (input[1] == "captions")\n                        {\n                            getCaptions = true;\n                            getMedia = false;\n                        }\n                        else if (input[1] == "media")\n                        {\n                            getCaptions = false;\n                            getMedia = true;\n                        }\n                        else\n                        {\n                            Console.WriteLine($"{input[1]} is not a valid input!");\n                            continue;\n                        }\n                        break;\n                    }\n                    else if (input.Count > 2)\n                        Console.WriteLine($"Accepts only one or two strings.");\n                    else\n                    {  //if only the instagram profile was input\n                        profile = input[0];\n                        getCaptions = true;\n                        getMedia = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        private static void DoesNotExist()  //console message used during error\n        {\n            Console.ForegroundColor = ConsoleColor.DarkRed;\n            Console.WriteLine($"Failed To grab from {profile}! Make sure the account exists!");\n            Console.ForegroundColor = ConsoleColor.DarkCyan;\n\n        }\n\n        private static string GetUsername(string profile)   //gets the string username of a profile when the id is provided\n        {\n            string url = $"api user url";\n            try\n            {\n                string tempJson = client.GetStringAsync(url).GetAwaiter().GetResult();\n                var data = JsonConvert.DeserializeObject<InstagramProfile>(tempJson);\n                return data.user2.username;\n            }\n            catch (Exception)\n            {\n                DoesNotExist();\n                doesNotExist = true;\n                return string.Empty;\n            }\n        }\n\n        private static void GetId(string profileName)   //gets the id of a profile if the username is provided\n        {\n            string temp = $"https://www.instagram.com/{profileName}/";\n            try\n            {\n                html = client.GetStringAsync(temp).GetAwaiter().GetResult();\n            }\n            catch (Exception)\n            {\n                DoesNotExist();\n                doesNotExist = true;\n                return;\n            }\n            doc.LoadHtml(html);\n            json = doc.DocumentNode.Descendants().Where(x => x.InnerText.StartsWith("window._sharedData")).First().InnerText;   //extract the json block from the scraped html\n            var data = JsonConvert.DeserializeObject<InstagramProfile>(json.Substring(21, json.Length - 22));   //map the json block so the data can be easily accessed\n            postCount = Convert.ToInt32(data.entryData.profilePage[0].graphql.user.postEdges.count);\n            if (data != null)\n                profile = data.entryData.profilePage[0].graphql.user.id;\n            else\n                doesNotExist = true;\n        }\n\n        private static string GetPostCount(string profileName)  //gets the number of posts a user has\n        {\n            string temp = $"https://www.instagram.com/{profileName}/";\n            try\n            {\n                html = client.GetStringAsync(temp).GetAwaiter().GetResult();\n                doc.LoadHtml(html);\n                json = doc.DocumentNode.Descendants().Where(x => x.InnerText.StartsWith("window._sharedData")).First().InnerText;\n                var data = JsonConvert.DeserializeObject<InstagramProfile>(json.Substring(21, json.Length - 22));\n                return data.entryData.profilePage[0].graphql.user.postEdges.count;\n            }\n            catch (Exception)\n            {\n                DoesNotExist();\n                doesNotExist = true;\n                return string.Empty;\n            }\n        }\n\n        private static void GrabShortCodes(string url)  //grabs the urls to every post on the current pagination\n        {\n            shortCodeUrls.Clear();\n            try\n            {\n                html2 = client.GetStringAsync(url).GetAwaiter().GetResult();\n            }\n            catch (Exception e)\n            {\n                Console.ForegroundColor = ConsoleColor.DarkRed;\n                Console.WriteLine($"Error When Attempting To Grab ShortCodes.\n{e}");\n                Console.ForegroundColor = ConsoleColor.DarkCyan;\n                nullUser = true;\n                return;\n            }\n\n            var data = JsonConvert.DeserializeObject<InstagramNextPage>(html2); //map the json block\n            if (data.data.user == null)\n            {\n                nullUser = true;\n                return;\n            }\n            var profileEdge = data.data.user.edgeToMedia.edges;\n\n            if (!String.IsNullOrEmpty(data.data.user.edgeToMedia.pageInfo.end_cursor))\n                end_cursor = data.data.user.edgeToMedia.pageInfo.end_cursor;\n\n            foreach (Edges e in profileEdge)    //loop through the json data property containing post urls\n                shortCodeUrls.Add("https://www.instagram.com/p/" + e.mediaNode.shortcode);\n        }\n\n        private static async Task InstagramGrabAsync(string url)    //downloads the captions and media of a post\n        {\n            bool downloaded = false;\n            string date = string.Empty;    //string for concatenation of path and file name\n            int downCount = 1;  //keeps track of how many posts are donwloaded\n            string path = root + @"InstaGrabberDownloaded FilesNew Insta";\n            try\n            {\n                html = client.GetStringAsync(url).GetAwaiter().GetResult();\n                GrabUrls(html);        //finds media urls from the post, save and trim to mediaURLs\n                date = instagramUploadDate;\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e);\n                return;\n            }\n\n            for (int j = 0; j < mediaURLs.Length; j++)\n            { //Downloads or opens file in browser \n                //prevents media from being overwritten, by checking if it already exits\n                if (File.Exists(path + "\\" + instagramProfileAt + "\\" + date + "_" + shortcode + "_" + downCount + ".jpg") || File.Exists(path + "\\" + instagramProfileAt + "\\" + date + "_" + shortcode + "_" + downCount + ".mp4"))\n                {\n                    continue;\n                }\n\n                //if url in mediaURLs is jpg, download as jpg\n                if (mediaURLs[j].Contains("jpg", StringComparison.OrdinalIgnoreCase))\n                {\n                    try\n                    {\n                        if (getMedia)\n                            await GetMedia(mediaURLs[j], path + "\\" + instagramProfileAt + "\\" + date + "_" + shortcode + "_" + downCount + ".jpg", client);\n                    }\n                    catch (Exception)\n                    {\n                        Console.ForegroundColor = ConsoleColor.DarkMagenta;\n                        Console.WriteLine($"{mediaURLs[j]} did not download {shortcode} https://www.instagram.com/p/{shortcode} {Environment.NewLine}");\n                        Console.ForegroundColor = ConsoleColor.DarkCyan;\n                        downCount++;\n                        continue;\n                    }\n\n                    downCount++;    //increase download count\n                }\n                else if (mediaURLs[j].Contains("mp4", StringComparison.OrdinalIgnoreCase))\n                {   //if url in mediaURLs is mp4, download as mp4\n                    try\n                    {\n                        if (getMedia)\n                            await GetMedia(mediaURLs[j], path + "\\" + instagramProfileAt + "\\" + date + "_" + shortcode + "_" + downCount + ".mp4", client);\n                    }\n                    catch (Exception)\n                    {\n                        Console.ForegroundColor = ConsoleColor.DarkMagenta;\n                        Console.WriteLine($"{mediaURLs[j]} did not download {shortcode} https://www.instagram.com/p/{shortcode} {Environment.NewLine}");\n                        Console.ForegroundColor = ConsoleColor.DarkCyan;\n                        downCount++;\n                        continue;\n                    }\n                    downCount++;    //increase download count\n                }\n                downloaded = true;\n            }\n\n            if (downloaded)\n            {\n                totalCounter++; //update current downloading status\n                Console.Title = $"Grabbing! [@{username}] [{profile}] {(getCaptions ? "[Downloading Posts and Captions!]" : "[Downloading Posts!]")} " +\n                    $"[Page:{counter} of {((postCount % 50 > 0) ? postCount / 50 + 1 : postCount / 50)}] [Downloaded:{totalCounter} of {postCount}]";\n                if (getCaptions)\n                {  //write captions to txt file\n                    sb.Append($"[{eToUtc}] [ShortCode: {shortcode} ] [URL: https://www.instagram.com/p/{shortcode} ]{Environment.NewLine}[Comment:{caption}]{Environment.NewLine}{Environment.NewLine}");\n                    File.AppendAllText(LogPath, sb.ToString());\n                    sb.Clear();\n                }\n            }\n        }\n\n        private static void GrabUrls(string file) //uses regex to find jpg and mp4 urls and store them\n        {\n            doc.LoadHtml(file);\n            json = doc.DocumentNode.Descendants().Where(x => x.InnerText.StartsWith("window._sharedData")).First().InnerText;   //extract json block\n            var data = JsonConvert.DeserializeObject<InstagramPost>(json.Substring(21, json.Length - 22));  //map extracted json\n            eToUtc = epoch.AddSeconds(Convert.ToDouble(data.entryData.postPage.First().graphql.media.taken_at_timestamp));\n            var type = data.entryData.postPage.First().graphql.media.__typename;\n            var instaMedia = data.entryData.postPage.First().graphql.media;\n            var userName = data.entryData.postPage.First().graphql.media.owner.username;\n            instagramUploadDate = eToUtc.Year + "-" + eToUtc.Month + "-" + eToUtc.Day;\n            instagramProfileAt = "@" + userName;\n            shortcode = data.entryData.postPage[0].graphql.media.shortcode;\n\n            if (getCaptions)\n            {\n                caption = "No Caption!";\n                if (data.entryData.postPage[0].graphql.media.caption.captionEdges.Any())    //checks if a caption was included with the post\n                    caption = data.entryData.postPage[0].graphql.media.caption.captionEdges[0].captionNode.text;\n            }\n\n            if (type == "GraphSidecar")\n            {   //property value indicating multiple media\n                var edges = data.entryData.postPage[0].graphql.media.children.edges;\n                int i = 0;\n                string tempUrl = "";\n                mediaURLs = new string[edges.Length];\n\n                foreach (InstagramPost.Edges e in edges)\n                {\n                    if (e.node.__typename == "GraphImage")\n                        tempUrl = e.node.resources.Last().src;\n                    else if (e.node.__typename == "GraphVideo")\n                        tempUrl = e.node.video_url;\n\n                    mediaURLs[i] = tempUrl;\n                    i++;\n                }\n            }\n\n            if (type == "GraphImage")\n            { //property value indicating a single image\n                var singleImg = data.entryData.postPage.First().graphql.media.resources.Last().src;\n                mediaURLs = new string[1];\n                mediaURLs[0] = singleImg;\n            }\n\n            if (type == "GraphVideo")\n            { //property value indicating a single video\n                var singleVid = data.entryData.postPage.First().graphql.media.video_url;\n                mediaURLs = new string[1];\n                mediaURLs[0] = singleVid;\n            }\n        }\n\n        private static async Task GetMedia(string mediaUrl, string downloadPath, HttpClient client)\n        {\n            File.WriteAllBytes(downloadPath, (await client.GetByteArrayAsync(mediaUrl)));\n        }\n    }\n}\n',fileName:"Program",language:"csharp",id:"10"},{path:'using Newtonsoft.Json;\n\nnamespace ConsoleApp3\n{\n    public class InstagramPost\n    {\n        //for https://www.instagram.com/p/{post_shortcode}/\n\n        [JsonProperty("entry_data")]\n        public EntryData entryData { get; set; }\n\n        public class EntryData\n        {\n            [JsonProperty("PostPage")]\n            public PostPage[] postPage { get; set; }\n        }\n\n        public class PostPage\n        {\n            [JsonProperty("graphql")]\n            public Graphql graphql { get; set; }\n        }\n\n        public class Graphql\n        {\n            [JsonProperty("shortcode_media")]\n            public Media media { get; set; }\n        }\n\n        public class Media\n        {\n            public string __typename { get; set; }\n            public string shortcode { get; set; }\n            public string video_url { get; set; }\n            public string taken_at_timestamp { get; set; }\n\n            [JsonProperty("edge_media_to_caption")]\n            public Caption caption { get; set; }\n\n            [JsonProperty("display_resources")]\n            public Resources[] resources { get; set; }\n\n            [JsonProperty("owner")]\n            public Owner owner { get; set; }\n\n            [JsonProperty("edge_sidecar_to_children")]\n            public Children children { get; set; }\n        }\n\n        public class Caption\n        {\n            [JsonProperty("edges")]\n            public CaptionEdges[] captionEdges { get; set; }\n        }\n\n        public class CaptionEdges\n        {\n            [JsonProperty("node")]\n            public CaptionNode captionNode { get; set; }\n        }\n\n        public class CaptionNode\n        {\n            public string text { get; set; }\n        }\n\n        public class Children\n        {\n            [JsonProperty("edges")]\n            public Edges[] edges { get; set; }\n        }\n\n        public class Edges\n        {\n            [JsonProperty("node")]\n            public Node node { get; set; }\n        }\n\n        public class Node\n        {\n            public string video_url { get; set; }\n            public string __typename { get; set; }\n\n            [JsonProperty("display_resources")]\n            public Resources[] resources { get; set; }\n        }\n\n        public class Owner\n        {\n            public string username { get; set; }\n        }\n\n        public class Resources\n        {\n            public string src { get; set; }\n        }\n\n    }\n}\n',fileName:"InstagramPostMap",language:"csharp",id:"11"},{path:'using Newtonsoft.Json;\n\n\nnamespace ConsoleApp3\n{\n    class InstagramProfile\n    {\n        [JsonProperty("entry_data")]\n        public EntryData entryData { get; set; }\n\n        [JsonProperty("user")]\n        public User2 user2 { get; set; }\n\n        public class User2\n        {\n            public string pk { get; set; }\n            public string username { get; set; }\n            public string full_name { get; set; }\n            public string is_verified { get; set; }\n            public string media_count { get; set; }\n            public string follower_count { get; set; }\n            public string following_count { get; set; }\n        }\n\n        public class EntryData\n        {\n            [JsonProperty("ProfilePage")]\n            public ProfilePage[] profilePage { get; set; }\n        }\n\n        public class ProfilePage\n        {\n            public string logging_page_id { get; set; }\n\n            [JsonProperty("graphql")]\n            public Graphql graphql { get; set; }\n        }\n\n        public class Graphql\n        {\n            [JsonProperty("user")]\n            public User user { get; set; }\n        }\n\n        public class User\n        {\n            public string username { get; set; }\n            public string id { get; set; }\n\n            [JsonProperty("edge_owner_to_timeline_media")]\n            public PostEdges postEdges { get; set; }\n        }\n\n        public class PostEdges\n        {\n            public string count { get; set; }\n\n            [JsonProperty("page_info")]\n            public Page_Info pageInfo { get; set; }\n\n            [JsonProperty("edges")]\n            public Edges[] edges { get; set; }\n        }\n\n        public class Page_Info\n        {\n            public string end_cursor { get; set; }\n        }\n\n        public class Edges\n        {\n            [JsonProperty("node")]\n            public Node node { get; set; }\n        }\n\n        public class Node\n        {\n            public string shortcode { get; set; }\n            public string taken_at_timestamp { get; set; }\n        }\n\n    }\n}\n',fileName:"InstagramProfileMap",language:"csharp",id:"12"},{path:'using Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace instagramPagesTest\n{\n    class InstagramNextPage\n    {\n        [JsonProperty("data")]\n        public Data data { get; set; }\n\n        public class Data\n        {\n            [JsonProperty("user")]\n            public User user { get; set; }\n        }\n\n        public class User\n        {\n            [JsonProperty("edge_owner_to_timeline_media")]\n            public EdgeToMedia edgeToMedia { get; set; }\n        }\n\n        public class EdgeToMedia\n        {\n            [JsonProperty("page_info")]\n            public PageInfo pageInfo { get; set; }\n\n            [JsonProperty("edges")]\n            public Edges[] edges { get; set; }\n        }\n\n        public class PageInfo\n        {\n            public string end_cursor { get; set; }\n        }\n\n        public class Edges\n        {\n            [JsonProperty("node")]\n            public MediaNode mediaNode { get; set; }\n        }\n\n        public class MediaNode\n        {\n            public string id { get; set; }\n            public string __typename { get; set; }\n            public string shortcode { get; set; }\n            public string taken_at_timestamp { get; set; }\n\n            [JsonProperty("edge_media_to_caption")]\n            public EdgeMediaToCaption edgeMediaToCaption { get; set; }\n        }\n\n        public class EdgeMediaToCaption\n        {\n            [JsonProperty("edges")]\n            public CaptionEdge[] captionEdge { get; set; }\n        }\n\n        public class CaptionEdge\n        {\n            [JsonProperty("node")]\n            public CaptionNode captionNode { get; set; }\n        }\n\n        public class CaptionNode\n        {\n            public string text { get; set; }\n        }\n    }\n}\n',fileName:"InstagramNextPageMap",language:"csharp",id:"13"}],screenShots:[]},{name:"TwitterDL",index:2,description:"A console app which monitors a twitter stream(from followed accounts and specififed hashtags) to grab tweets in real time. Tweets are displayed with limited information in the console window. Tweets made by accounts followed have a popup and sound notification with a button to open the tweet. Media from all tweets can also be saved.",sourceCode:[{path:'using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Tweetinvi;\nusing System.Windows.Forms;\nusing System.Diagnostics;\nusing System.Threading;\nusing System.Timers;\nusing Newtonsoft.Json;\n\nnamespace TweetDL\n{\n    class Program\n    {\n        #region Credentials\n        const string consumerKey = "",\n                     consumerSecret = "",\n                     userAcessToken = "",\n                     userAccessSecret = "";\n        #endregion\n\n        #region Variables\n        private static int j = 0, folderCount = 0, videoFolderCount = 0, tweetCount = 0, timer = 0, downloadCount = 0;\n        private static bool validInput = false, invalidInputCheck, setOptions = false, downloadPhotos = false, downloadVideos = false, sound = true, popup = true, download = false,\n                            downloaded = false, duplicate = false, hideUnrelated = false, isReply = false, isQuote = false, isRetweet = false, isOriginalTweet = false, configBreak = false;\n        private static HttpClient client = new HttpClient();\n        private static StringBuilder sb = new StringBuilder();\n        private static string root = Environment.GetFolderPath(Environment.SpecialFolder.Desktop), path, newPath, logPath, es = String.Empty;\n        private static Tweetinvi.Models.ITweet newTweet;\n        private static List<string> mainProfiles = new List<string>(), bypassVidGifDlProfiles = new List<string>(), hTagExclusion = new List<string>(), excludedScreenNames = new List<string>(),\n                                    excludedDls = new List<string>(), excludedPups = new List<string>(), tagsWatchList = new List<string>();\n        private static System.Timers.Timer Timer;\n        #endregion\n\n        static void Main(string[] args)\n        {\n            Console.Title = "TweetDL!";\n            Init(); //initialize settings/authenticate user\n            if (configBreak)\n                return;\n            \n            Console.WriteLine("Loading Users and Filters!");\n            var user = User.GetAuthenticatedUser();\n            if (user == null) {\n                Console.WriteLine("Failed Obtaining Authenticated User!");\n                return;\n            }\n            var stream = Tweetinvi.Stream.CreateFilteredStream();\n\n            #region StreamTags  \n            foreach (var item in tagsWatchList) //adds tags to watch for\n                stream.AddTrack(item);\n            #endregion\n\n            foreach (var following in user.GetFriends()) {\n                mainProfiles.Add(following.ScreenName);\n                stream.AddFollow(following.Id);\n            }\n\n            Console.Clear();\n            Console.WriteLine("Users and Filters Loaded!");\n            Console.WriteLine("You can edit various inclusions/exclusions in the config.json file found in the "Twitter" folder found on the desktop.\nIf the file is broken, delete the file and relaunch the program.");\n\n            Timer = new System.Timers.Timer(1000) { //1 second timer\n                Enabled = true\n            };\n\n            Timer.Elapsed += new ElapsedEventHandler(OnTimedEvent);\n\n            //attach eventhandler\n            stream.MatchingTweetReceived += async (senders, data) => TweetHandler(data); //when a tweet is made, call the handler with the data found\n            stream.StartStreamMatchingAnyConditionAsync();\n\n            var t = Console.ReadKey();\n            while (t.Key != ConsoleKey.Escape) {\n                if (t.Key == ConsoleKey.Enter) { //Enter to restart the stream\n                    Console.ForegroundColor = ConsoleColor.Magenta;\n                    stream.StopStream();\n                    stream.StartStreamMatchingAnyConditionAsync();\n                    Console.WriteLine($"{DateTime.Now.ToString("HH:mm:ss")} Stream Restarted!");\n                } \n                t = Console.ReadKey();\n            }\n        }\n\n        private static void OnTimedEvent(Object src, ElapsedEventArgs e)\n        {\n            timer++;    //1 second timer handler\n            Console.Title = $"Now Listening! [Download:{download}] " +\n            $"[MediaType:{(!download ? "Downloading None" : (downloadPhotos && downloadVideos ? "All" : (downloadPhotos ? "Images" : "Videos and Gifs")))}] " +\n            $"[Sound:{(sound ? "On" : "Off")}] [Popups:{(popup ? "On" : "Off")}] " +\n            $"ApproxTimeElapsed: {(timer / 60 / 60).ToString("D2")}:{(timer / 60 % 60).ToString("D2")}:{(timer % 60).ToString("D2")} " +\n            $"TweetsThisSession: {tweetCount} NumberOfTweetsDownloaded: {downloadCount}";\n\n        }\n\n        private static async Task TweetHandler(Tweetinvi.Events.MatchedTweetReceivedEventArgs data)\n        {\n            string profile = String.Empty;\n            isReply = false;\n            isRetweet = false;\n            isQuote = false;\n            isOriginalTweet = false;\n\n            try {\n                if (hideUnrelated) //hide tweets that are not made by someone you follow\n                    if (!mainProfiles.Contains(data.Tweet.CreatedBy.ScreenName))\n                        return;\n\n                if (data.Tweet.IsRetweet) { //checks if the tweet is a retweet, quote, reply, or original\n                    isRetweet = true;\n                    newTweet = data.Tweet.RetweetedTweet;\n                }\n                else if (data.Tweet.QuotedStatusId != null) {\n                    isQuote = true;\n                    newTweet = data.Tweet.QuotedTweet;\n                }\n                else {\n                    if (data.Tweet.InReplyToStatusId != null)\n                        isReply = true;\n                    else\n                        isOriginalTweet = true;\n                    newTweet = data.Tweet;\n                }\n\n                profile = newTweet.CreatedBy.ScreenName;\n                tweetCount++;\n            }\n            catch (Exception e) {\n                sb.Append("Failed At: " + data.Tweet.CreatedAt + "  Tweet: " + data.Tweet.Url +\n                                    "  [Failed to Load] var tweet = Tweet.GetTweet(" + data.Tweet.Id + ");" + Environment.NewLine + e.Message + Environment.NewLine);\n                File.AppendAllText(logPath + "errorLog.txt", sb.ToString());\n                sb.Clear();\n\n                if (sound)\n                    System.Media.SystemSounds.Exclamation.Play();\n\n                if (popup) {\n                    Task.Run(() => {\n                    MessageBox.Show("Failed to load tweet!\n" + e.Message +\n                    "Check the log!", "ERROR!");\n                    });\n                }\n\n                var exceptionDetails = ExceptionHandler.GetLastException();\n                ExceptionHandler.SwallowWebExceptions = false;\n                ExceptionHandler.WebExceptionReceived += (sender, a) => {\n                    sb.Append("Failed At: " + data.Tweet.CreatedAt + "  Tweet: " + data.Tweet.Url +\n                    "  [Failed to Load] var tweet = Tweet.GetTweet(" + data.Tweet.Id + ");" + a.Value + exceptionDetails + Environment.NewLine);\n                    File.AppendAllText(logPath + "errorLog.txt", sb.ToString());\n                    sb.Clear();\n                };\n\n                return;\n            }\n\n            if (excludedScreenNames.Contains(data.Tweet.CreatedBy.ScreenName))  //return if an excluded twitter profile was found\n                return;\n            if (excludedScreenNames.Contains(profile))\n                return;\n\n            foreach (var h in newTweet.Hashtags) {  //check through the tags and return if an excluded tag is found\n                if (hTagExclusion.Contains(h.Text))\n                    return;\n            }\n\n            if (download) {\n                downloaded = false;\n                \n                foreach (var media in newTweet.Entities.Medias) {   //loop through the medias for download\n                    if (excludedDls.Contains(newTweet.CreatedBy.ScreenName))    //return if an excluded twitter profile for downloads is found\n                        break;\n\n                    if (media.MediaType == "photo") {\n                        if (downloadPhotos) {\n                            if (Directory.GetFiles(path + @"images" + folderCount + "\\").Length > 1000) {  //if the current images folder has 1000 files, make a new images folder\n                                folderCount++;\n                                Directory.CreateDirectory(root + @"TwitterDownloaded FilesMediaimages" + folderCount);\n                            }\n\n                            for (int i = 0; i <= folderCount; i++) {    //loop through the images folder to find duplicates, break if found\n                                if (File.Exists(path + @"images" + i + "\\" + newTweet.IdStr + "_" + media.IdStr + ".jpg")) {\n                                    duplicate = true;\n                                    break;\n                                }\n                            }\n                            if (duplicate) { //if duplicate found, continue to the next media\n                                duplicate = false;\n                                continue;\n                            }\n\n                            newPath = path + @"images" + folderCount + "\\" + newTweet.IdStr + "_" + media.IdStr + ".jpg";\n                            try {\n                                await GetMedia(media.MediaURL, newPath, client);\n                                downloaded = true;\n                                \n                            }\n                            catch (Exception e) {\n                                sb.Append("Failed At: " + data.Tweet.CreatedAt + "  Tweet: " + data.Tweet.Url +\n                                    "  [Failed to Load] var tweet = Tweet.GetTweet(" + data.Tweet.Id + ");" + Environment.NewLine + e.Message + Environment.NewLine);\n                                File.AppendAllText(logPath + "errorLog.txt", sb.ToString());\n                                sb.Clear();\n                                if (sound)\n                                    System.Media.SystemSounds.Exclamation.Play();\n                                if (popup) {\n                                    Task.Run(() => {\n                                    MessageBox.Show("\n\nFailed to download:\n" + media.MediaURL + Environment.NewLine + e.Message +\n                                    "\nCheck the log!", "ERROR!");\n                                    });\n                                }\n                                return;\n                            }\n                        }\n                        else\n                            break;\n\n                    }\n                    else if (media.MediaType == "video") {\n                        int comparitorVal = 0;\n                        string url = string.Empty;\n\n                        if (downloadVideos || bypassVidGifDlProfiles.Contains(newTweet.CreatedBy.ScreenName)) { //check for twitter profiles that would bypass if downloadVideos is false\n                            if (Directory.GetFiles(path + @"videos" + videoFolderCount + "\\").Length > 400) {  //if the current videos folder has 1000 files, make a new videos folder\n                                videoFolderCount++;\n                                Directory.CreateDirectory(root + @"TwitterDownloaded FilesMedia\videos" + videoFolderCount);\n                            }\n                            for (int i = 0; i <= videoFolderCount; i++) { //if the video has already been downloaded return because tweets only hold one video if one is included\n                                if (File.Exists(path + @"videos" + videoFolderCount + "\\" + newTweet.IdStr + "_" + media.IdStr + ".mp4"))\n                                    return;\n                            }\n\n                            newPath = path + @"videos" + videoFolderCount + "\\" + newTweet.IdStr + "_" + media.IdStr + ".mp4";\n                            j = 0;\n\n                            foreach (var x in media.VideoDetails.Variants) {    //loop through the video data and find the link which contains mp4\n                                if (x.URL.Contains("mp4")) {\n                                    if (comparitorVal < Convert.ToInt32(x.URL.Split(\'/\', \'/\')[7].Replace("x", ""))) {   //grab a specific part of the link indicating resolution, and grab the largest/highest quality\n                                        url = x.URL;\n                                        comparitorVal = Convert.ToInt32(x.URL.Split(\'/\', \'/\')[7].Replace("x", ""));\n                                    }\n                                }\n                            }\n                            try {\n                                await GetMedia(url, newPath, client);\n                            }\n                            catch (Exception e) {\n                                sb.Append("Failed At: " + data.Tweet.CreatedAt + "  Tweet: " + data.Tweet.Url +\n                                "  [Failed to Load] var tweet = Tweet.GetTweet(" + data.Tweet.Id + ");" + Environment.NewLine + e.Message + Environment.NewLine);\n                                File.AppendAllText(logPath + "errorLog.txt", sb.ToString());\n                                sb.Clear();\n                                if (sound)\n                                    System.Media.SystemSounds.Exclamation.Play();\n                                if (popup) {\n                                    Task.Run(() => {\n                                        MessageBox.Show("\n\nFailed to download:\n" + media.MediaURL + Environment.NewLine + e.Message +\n                                        "\nCheck the log!", "ERROR!");\n                                    });\n                                }\n                                return;\n                            }\n                            downloaded = true;\n                        }\n                        else\n                            break;\n                    }\n                    else if (media.MediaType == "animated_gif") {\n                        if (downloadVideos || bypassVidGifDlProfiles.Contains(newTweet.CreatedBy.ScreenName)) { //check for twitter profiles that would bypass if downloadVideos is false\n                            if (Directory.GetFiles(path + @"videos" + videoFolderCount + "\\").Length > 400) {  //if the current videos folder has 1000 files, make a new videos folder\n                                videoFolderCount++;\n                                Directory.CreateDirectory(root + @"TwitterDownloaded FilesMedia\videos" + videoFolderCount);\n                            }\n\n                            for (int i = 0; i <= videoFolderCount; i++) { //if the video has already been downloaded return because tweets only hold one video if one is included\n                                if (File.Exists(path + @"videos" + videoFolderCount + "\\" + newTweet.IdStr + "_" + media.IdStr + ".mp4"))\n                                    return;\n                            }\n\n                            newPath = path + @"videos" + videoFolderCount + "\\" + newTweet.IdStr + "_" + media.IdStr + ".mp4";\n                            try {\n                                await GetMedia(media.VideoDetails.Variants[0].URL, newPath, client);\n                            }\n                            catch (Exception e) {\n                                sb.Append("Failed At: " + data.Tweet.CreatedAt + "  Tweet: " + data.Tweet.Url +\n                                        "  [Failed to Load] var tweet = Tweet.GetTweet(" + data.Tweet.Id + ");" + Environment.NewLine + e.Message + Environment.NewLine);\n                                File.AppendAllText(logPath + "errorLog.txt", sb.ToString());\n                                sb.Clear();\n                                if (sound)\n                                    System.Media.SystemSounds.Exclamation.Play();\n                                if (popup) {\n                                    Task.Run(() =>\n                                    {\n                                    MessageBox.Show("\n\nFailed to download:\n" + media.MediaURL + Environment.NewLine + e.Message +\n                                    "\nCheck the log!", "ERROR!");\n\n                                    });\n                                }\n                                return;\n                            }\n                        }\n                        else\n                            break;\n\n                        downloaded = true;\n                    }\n                }\n                \n            }\n            if (downloaded) {   //change console write color if a tweeted media was downloaded\n                downloadCount++;\n                Console.ForegroundColor = ConsoleColor.DarkGreen;\n            }\n            else\n                Console.ForegroundColor = ConsoleColor.DarkYellow;\n\n            if (mainProfiles.Contains(profile)) //if the tweet was made to/about someone followed\n                Console.ForegroundColor = ConsoleColor.DarkCyan;\n\n            if (mainProfiles.Contains(data.Tweet.CreatedBy.ScreenName)) {   //if the tweet was made by someone followed\n                Console.ForegroundColor = ConsoleColor.DarkMagenta;\n                if (sound)\n                    System.Media.SystemSounds.Asterisk.Play();\n\n                string temp = data.Tweet.Url;   //save url to avoid the url changing when a new tweet is found\n\n                if (popup && !excludedPups.Contains(newTweet.CreatedBy.ScreenName) && !isReply) {   //setup the popup, does not display replies\n                    Task.Run(() => {\n                        var dialogResult = MessageBox.Show($"A new tweet by: {data.Tweet.CreatedBy.ScreenName}!" +\n                            $"{(data.Tweet.IsRetweet ? "\nThey Retweeted: " + newTweet.CreatedBy.ScreenName + "!" : ((data.Tweet.QuotedStatusId != null) ? "\nThey Quoted: " + newTweet.CreatedBy.ScreenName + "!" : es))}" +\n                            $"\nOn: {data.Tweet.CreatedAt.ToShortDateString()} At: {data.Tweet.CreatedAt.ToShortTimeString()}\n\n" +\n                            $"Tweet:\n( {data.Tweet.FullText} )\n\nOpen the Tweet in a browser?", "New Tweet!", MessageBoxButtons.OKCancel);\n\n                        if (dialogResult == DialogResult.OK)\n                            Process.Start(temp);\n                    });\n                }\n            }\n            //update status on title bar of console\n            Console.Title = $"Now Listening! [Download:{download}] " +\n            $"[MediaType:{(!download ? "Downloading None" : (downloadPhotos && downloadVideos ? "All" : (downloadPhotos ? "Images" : "Videos and Gifs")))}] " +\n            $"[Sound:{(sound ? "On" : "Off")}] [Popups:{(popup ? "On" : "Off")}] " +\n            $"ApproxTimeElapsed: {(timer / 60 / 60).ToString("D2")}:{(timer / 60 % 60).ToString("D2")}:{(timer % 60).ToString("D2")} " +\n            $"TweetsThisSession: {tweetCount} NumberOfTweetsDownloaded: {downloadCount}";\n            //writes to the console of the actions made\n            Console.WriteLine($"{data.Tweet.CreatedAt.TimeOfDay} [Download={downloaded}]{(downloaded ? " " : es)} " +\n                $"[HasMedia={(newTweet.Entities.Medias.Count > 0)}{((newTweet.Entities.Medias.Count > 0) ? ", " + newTweet.Entities.Medias[0].MediaType : es)}]" +\n                $"{((!(newTweet.Entities.Medias.Count > 0))?"\t":es)}\t[Orig:{data.Tweet.CreatedBy.ScreenName}]{((data.Tweet.CreatedBy.ScreenName.Length < 9) ? "\t" : es)}\t[{(data.Tweet.IsRetweet ? "Retweeted: " + newTweet.CreatedBy.ScreenName : ((data.Tweet.QuotedStatusId != null) ? "They Quoted: " + newTweet.CreatedBy.ScreenName : (isReply ?  "Replying to: " + data.Tweet.InReplyToScreenName: "Original Tweet")))}]" +\n                $"{(isRetweet ? ((newTweet.CreatedBy.ScreenName.Length < 11) ? "\t" : es) : es)}{(isQuote ? ((newTweet.CreatedBy.ScreenName.Length < 9) ? "\t" : es) : es)}{(isReply ? ((data.Tweet.InReplyToScreenName.Length < 9) ? "\t" : es) : es)}{(isOriginalTweet ? "\t": es)}\t( {data.Tweet.Url} )");\n\n        }\n\n        private static void Init()\n        {\n            string[] options = { "help", "dl", "all", "img", "vid", "soff", "puoff", "mm", "twice", "vtubers", "watchall", "hu" };\n            List<string> input = new List<string>();\n            string newInput = string.Empty, tempJson = string.Empty;\n\n            Console.SetBufferSize(250, 32000);  //setup console size and color\n            Console.ForegroundColor = ConsoleColor.DarkYellow;\n\n            Auth.SetUserCredentials(consumerKey, consumerSecret, userAcessToken, userAccessSecret); //authenticate user\n            RateLimit.RateLimitTrackerMode = RateLimitTrackerMode.TrackAndAwait;\n\n            Directory.CreateDirectory(root + @"TwitterDownloaded FilesMedia");  //creates directory if it isn\'t already made\n            Directory.CreateDirectory(root + @"TwitterDownloaded FilesMediaimages0");\n            Directory.CreateDirectory(root + @"TwitterDownloaded FilesMedia\videos0");\n\n            if (!File.Exists(root + @"TwittererrorLog.txt"))  //create the errorLog file if it isn\'t already made\n                File.Create(root + @"TwittererrorLog.txt").Close();\n\n            path = root + @"TwitterDownloaded FilesMedia";\n            logPath = root + @"Twitter";\n\n            while (Directory.Exists(root + @"TwitterDownloaded FilesMediaimages" + folderCount))    //grab the number for the current media folders to be downloaded to\n                folderCount++;\n            folderCount--;\n            while (Directory.Exists(root + @"TwitterDownloaded FilesMedia\videos" + videoFolderCount))\n                videoFolderCount++;\n            videoFolderCount--;\n\n            while (!setOptions) {   //sets settings of the program depending on what was input\n                while (!validInput) { //loop until an accepted input is used\n                    List<string> invalidInputs = new List<string>();\n                    Console.WriteLine("version 0.56");\n                    Console.WriteLine("What do you want to do?(help, dl + [all, img, vid], soff, puoff, mm, hu(hide unrelated tweets))\nFor more info on the commands, type help.");\n                    input = Console.ReadLine().Split(\' \').ToList(); //splits input and stores into input variable to be checked\n                    invalidInputCheck = false;\n                    newInput = string.Join(" ", input);\n                    foreach (string ip in input) {\n                        if (!(options.Any(ip.Equals))) { //if any of the inputted strings do not match with accepted inputs add to invalidInputs List\n                            invalidInputs.Add(ip);\n                            invalidInputCheck = true;\n                        }\n                    }\n                    if (invalidInputCheck)\n                        Console.WriteLine($"\nThe following are invalid commands: {string.Join(", ", invalidInputs)}\n");\n                    else if (ContainsAll(newInput, new string[] { "all", "img" }))  //if a wrong input combination is used\n                        Console.WriteLine("\nPair \'dl\' with only one of the media settings(dl all, dll img, or dl vid).\n");\n                    else if (ContainsAll(newInput, new string[] { "all", "vid" }))  //if a wrong input combination is used\n                        Console.WriteLine("\nPair \'dl\' with only one of the media settings(dl all, dll img, or dl vid).\n");\n                    else if (ContainsAll(newInput, new string[] { "img", "vid" }))  //if a wrong input combination is used\n                        Console.WriteLine("\nPair \'dl\' with only one of the media settings(dl all, dll img, or dl vid).\n");\n                    else\n                        validInput = true;\n                }\n\n                if (newInput.Contains("help")) {    //if help was inputted\n                    Console.WriteLine("\nThe Valid Commands Are:\n" +\n                                      "help \t= Displays the list of valid commands\n" +\n                                      "dl \t= Allows the download of media.\n" +\n                                      "all \t= Downloads both images and videos/gifs.\n" +\n                                      "img \t= Downloads only images.\n" +\n                                      "vid \t= Downloads only videos/gifs.\n" +\n                                      "soff \t= Turns off notification sounds.\n" +\n                                      "puoff \t= Turns off notification popups.\n" +\n                                      "mm \t= Watches for tweets but does not download(Monitor Mode).\n\n");\n\n                    validInput = false;\n                }\n                else if(newInput.Contains("mm")) {\n                    setOptions = true;\n                    //does not download tweets\n                }\n                else {\n                    setOptions = true;\n                    if (newInput.Contains("dl")) {  //download media\n                        download = true;\n                        if (newInput.Contains("all")) { //download all\n                            downloadPhotos = true;\n                            downloadVideos = true;\n                        }\n                        else if (newInput.Contains("img"))  //only download images \n                            downloadPhotos = true;\n                        else if (newInput.Contains("vid")) //only download videos \n                            downloadVideos = true;\n                        else {  //if no type was chosen\n                            Console.WriteLine("\nA media type was not chosen.\n");\n                            validInput = false;\n                            setOptions = false;\n                        }\n                    }\n                    else if (newInput.Contains("all") || newInput.Contains("img") || newInput.Contains("vid")) {  //if download was not input\n                        Console.WriteLine("\nUse the command \'dl\' if you want to download media.\n");\n                        validInput = false;\n                        setOptions = false;\n                    }\n                }\n\n                if (newInput.Contains("soff"))  //sound off\n                    sound = false;\n                if (newInput.Contains("puoff")) //popups off\n                    popup = false;\n                if (newInput.Contains("hu"))    //hide unrelated twitter profiles from being processed\n                    hideUnrelated = true;\n\n                if (!File.Exists(root + @"Twitterconfig.json")) { //if config file was not created\n                    File.Create(root + @"Twitterconfig.json").Close();\n\n                    sb.Append("{"tagsWatchList": "","bypassVidGifDlProfiles": "","hTagExclusion": "","excludedScreenNames": "","excludedDls": "","excludedPups": ""}");\n                    File.AppendAllText(logPath + "config.json", sb.ToString());\n                    sb.Clear();\n                    Console.WriteLine("You can edit various inclusions/exclusions in the config.json file found in the "Twitter" folder found on the desktop.\nIf the file is broken, delete the file and relaunch the program.");\n                    Console.WriteLine("Separate using using a single comma with no spaces. ie: "cats,dogs,ice cream,tag21" etc.");\n                    Console.WriteLine("tagsWatchList: list of tags to watch for\nbypassVidGifDlProfiles: list of twitter profiles which will download video media even with the option turned off\n" +\n                        "hTagExclusion: list of tags to exlude\nexcluddedScreenNames: list of twitter profles to exclude\nexcludedDls: list of twitter profiles to not download media from\n" +\n                        "excludedPups: list of twitter profiles that will not trigger a popup\n");\n                }\n                else {\n                    try {   //load strings from config.json\n                        tempJson = File.ReadAllText(root + @"Twitterconfig.json");\n                        var settings = JsonConvert.DeserializeObject<ConfigMap>(tempJson);\n                        tagsWatchList = settings.tagsWatchList.Split(\',\').ToList();\n                        bypassVidGifDlProfiles = settings.bypassVidGifDlProfiles.Split(\',\').ToList();\n                        hTagExclusion = settings.hTagExclusion.Split(\',\').ToList();\n                        excludedScreenNames = settings.excludedScreenNames.Split(\',\').ToList();\n                        excludedDls = settings.excludedDls.Split(\',\').ToList();\n                        excludedPups = settings.excludedPups.Split(\',\').ToList();\n                    }\n                    catch (Exception) {\n                        Console.WriteLine("Something went wrong with the config.json file, fix the file or delete it and rerun the program to get a fresh file.");\n                        configBreak = true;\n                        return;\n                    }\n                }\n            }\n            Console.WriteLine($"\nSetting have been changed...\n[Download:{download}] " +\n            $"[MediaType:{(!download ? "Downloading None" : (downloadPhotos && downloadVideos ? "All" : (downloadPhotos ? "Images" : "Videos and Gifs")))}] " +\n            $"[Sound:{(sound ? "On" : "Off")}] [Popups:{(popup ? "On" : "Off")}]");\n\n            Console.Title = $"[Download:{download}] " +\n            $"[MediaType:{(!download ? "Downloading None" : (downloadPhotos && downloadVideos ? "All" : (downloadPhotos ? "Images" : "Videos and Gifs")))}] " +\n            $"[Sound:{(sound ? "On" : "Off")}] [Popups:{(popup ? "On" : "Off")}] " +\n            $"ApproxTimeElapsed: {(timer / 60 / 60).ToString("D2")}:{(timer / 60 % 60).ToString("D2")}:{(timer % 60).ToString("D2")} " +\n            $"TweetsThisSession: {tweetCount} NumberOfTweetsDownloaded: {downloadCount}";\n        }\n\n        public static bool ContainsAll(string source, string[] values)\n        {\n            return values.All(x => source.Contains(x));\n        }\n\n        private static async Task GetMedia(string mediaUrl, string downloadPath, HttpClient client) //function used to download media\n        {\n            File.WriteAllBytes(downloadPath, (await client.GetByteArrayAsync(mediaUrl)));\n        }\n    }\n\n    class ConfigMap //mapping of config.json file\n    {\n        [JsonProperty("tagsWatchList")]\n        public string tagsWatchList { get; set; }\n\n        [JsonProperty("bypassVidGifDlProfiles")]\n        public string bypassVidGifDlProfiles { get; set; }\n\n        [JsonProperty("hTagExclusion")]\n        public string hTagExclusion { get; set; }\n\n        [JsonProperty("excludedScreenNames")]\n        public string excludedScreenNames { get; set; }\n\n        [JsonProperty("excludedDls")]\n        public string excludedDls { get; set; }\n\n        [JsonProperty("excludedPups")]\n        public string excludedPups { get; set; }\n    }\n\n}\n',fileName:"Program",language:"csharp",id:"20"}],screenShots:[{path:"p3/1.png",id:"s21"},{path:"p3/2.png",id:"s22"}]},{name:"jQuery Youtube Front-end",index:3,description:"A web development project made while learning how front-end and backend work together to create a functional webpage. This project uses jQuery, a RESTful API written with nodeJS and hosted on heroku, and mongoDB to hold all necessary data used by the front-end",sourceCode:[{path:'<!DOCTYPE html>\n<meta name="viewport" content="width=device-width, initial-scale=1.0">\n<html>\n    <link rel="stylesheet" href="resources/index2.css">\n    <script src="resources/jquery.min.js"><\/script>\n    <script type="text/javascript" src="resources/youtube.js"><\/script>\n    <title>Custom Youtube Project</title>\n    <body>\n        <div class="fixedContainer">\n            <header>\n                <div class="selectedChannel selectedChannelText selectedChannelHover" href="">The API may be starting from an idle state, please wait 5 to 10 seconds.</div>\n                <div class="logos"></div>\n                <div class="sortBy">\n                    <label for="dropDown">Sort by:</label>\n                    <select name="dropDown" id="dropDown" class="sortByDropDown">\n                        <option value="newestFirst">Newest First</option>\n                        <option value="oldestFirst">Oldest First</option>\n                    </select>\n                </div>\n                <div class="search">\n                    <input type="text" class="searchBar" placeholder="Search here...">\n                </div>\n                <a href="index.html" class="link">Back to Portfolio</a>\n            </header>\n            <div class="profileContainer">\n                <div class="profilesDiv"></div>\n            </div>\n            <section id="video" class="mainVideo"></section>\n            \n        </div>\n        <div class="videosContainer">\n            <main class="mainSelector"></main>\n        </div>\n        <button class="toTop">Top</button>\n    </body>\n</html>',fileName:"Index(html)",language:"markup",id:"30"},{path:"h4 {\n  padding: 0;\n  margin: 0;\n  line-height: 1.3;\n  font-weight: 600;\n  color: white;\n  max-width: 260px;\n  word-wrap: normal;\n}\n\np {\n  padding: 0;\n  margin: 0;\n  line-height: 1.3;\n  font-weight: 600;\n  color: white;\n  font-size: 0.7rem;\n}\n\n.center {\n  width: 1900px;\n  height: 100%;\n  margin: auto;\n}\n\nbody {\n  background-color: black;\n  width: 100%;\n  height: 100%;\n  overflow-x: hidden;\n}\n\n.fixedContainer {\n  position: fixed;\n  width: 100%;\n  top: 0;\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n}\n\nheader {\n  position: relative;\n  width: 1895px;\n  top: 0px;\n  background-color: black;\n}\n\n.selectedChannel {\n  display: inline-block;\n  position: absolute;\n  padding: 0;\n  margin: 0;\n  line-height: 1.3;\n  font-weight: 600;\n  color: white;\n  overflow: hidden;\n  line-height: 1.7;\n  top: 5px;\n}\n\n.selectedChannelHover:hover {\n  color: #c50000;\n  cursor: pointer;\n}\n\n.selectedChannelText {\n  font-size: 15px;\n}\n\n.logos {\n  display: inline-block;\n  margin-left: 740px;\n  padding: 2px;\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n}\n\n.logos:hover {\n  cursor: pointer;\n}\n\n.logo {\n  width: 115px;\n  padding: 5px;\n  border: 1px solid rgba(0, 0, 0, 0);\n}\n\n.logo:hover {\n  -webkit-transform: scale(1.05);\n  transform: scale(1.05);\n}\n\n.logo.voms {\n  width: 40px;\n}\n\n.hasLive {\n  border: 1px solid #88068d;\n}\n\n.search {\n  position: absolute;\n  display: inline-block;\n  right: 20px;\n  top: 10px;\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n}\n\n.searchBar {\n  padding: 0;\n  margin: 0;\n  line-height: 1.3;\n  font-weight: 600;\n  color: white;\n  height: 25px;\n  width: 285px;\n  border: 1px solid white;\n  background-color: black;\n  position: absolute;\n  display: inline-block;\n  right: 95px;\n}\n\n.searchBar:focus {\n  outline-style: double;\n  border: 1px solid #2cff96;\n}\n\na {\n  padding: 0;\n  margin: 0;\n  line-height: 1.3;\n  font-weight: 600;\n  color: white;\n  font-size: 14px;\n  position: absolute;\n  display: inline-block;\n  right: 5px;\n  top: 15px;\n}\n\n.sortBy {\n  padding: 0;\n  margin: 0;\n  line-height: 1.3;\n  font-weight: 600;\n  color: white;\n  font-size: 16px;\n  position: absolute;\n  display: inline-block;\n  right: 400px;\n  top: 14px;\n  width: 170px;\n}\n\n.sortByDropDown {\n  padding: 0;\n  margin: 0;\n  line-height: 1.3;\n  font-weight: 600;\n  color: white;\n  font-size: 13px;\n  background-color: black;\n}\n\n.profileContainer {\n  width: 1890px;\n  height: 98px;\n  overflow: hidden;\n  background-color: rgba(0, 0, 0, 0.726);\n  -webkit-transition: height 0.6s ease;\n  transition: height 0.6s ease;\n}\n\n.profilesDiv {\n  position: relative;\n  text-align: center;\n  margin: auto;\n  height: 98px;\n  overflow: auto;\n  width: 1890px;\n  -ms-overflow-style: none;\n  /* hides scrollbar on IE and Edge */\n  scrollbar-width: none;\n  /* hides scrollbar on Firefox */\n}\n\n.profilesDiv::-webkit-scrollbar {\n  display: none;\n}\n\n.profilePics {\n  display: inline-block;\n  padding-top: 2px;\n  padding-bottom: 2px;\n}\n\n.profilePic {\n  width: 82px;\n  border-radius: 50px;\n  border: 3px solid rgba(0, 0, 0, 0);\n}\n\n.profilePic:hover {\n  -webkit-transform: scale(1.05);\n  transform: scale(1.05);\n  cursor: pointer;\n  border: 3px solid #c50000;\n}\n\n.isLive {\n  border: 3px solid #9f08a5;\n}\n\n.profilePicSelected {\n  border: 3px solid #00c563;\n}\n\n.profilePicSelected:hover {\n  cursor: default;\n  border: 3px solid #00c563;\n}\n\n.mainVideo {\n  text-align: center;\n  height: fit-content;\n  width: 1885px;\n  overflow: hidden;\n  border-radius: 24px;\n  background-color: rgba(0, 0, 0, 0.726);\n  border: 2px solid rgba(0, 0, 0, 0);\n  -webkit-transition: height 0.6s ease;\n  transition: height 0.6s ease;\n}\n\n.mainVideo:hover {\n  border-radius: 24px;\n  cursor: pointer;\n  border: 2px solid #660000;\n}\n\n.videosContainer {\n  width: 1894px;\n  padding-top: 3px;\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  background-color: black;\n}\n\nmain {\n  padding: 466px 18px 10px;\n  -webkit-transition: padding-top 0.6s ease;\n  transition: padding-top 0.6s ease;\n}\n\n.videoList {\n  text-align: center;\n  padding: 10px 15px;\n  border: 2px solid black;\n  border-radius: 14%;\n  display: inline-block;\n}\n\n.videoList:hover {\n  border: 2px solid #660000;\n  background: #330000;\n}\n\n.thumbnail {\n  height: 146px;\n  padding: 0px 5px 5px;\n  border-radius: 4px;\n}\n\n.thumbnail:hover {\n  cursor: pointer;\n}\n\n.videoSelected {\n  border: 2px solid #009249;\n  background: #002c16;\n}\n\n.videoSelected:hover {\n  cursor: default;\n  border: 2px solid #009249;\n  background: #002c16;\n}\n\n/*\n.thumbSelected {\n    &:hover {\n        cursor: default;\n    }\n}\n*/\n.details {\n  padding-top: 2px;\n}\n\n.toTop {\n  display: none;\n  position: fixed;\n  bottom: 20px;\n  right: 30px;\n  z-index: 99;\n  font-size: 18px;\n  border: none;\n  outline: none;\n  background-color: rgba(255, 0, 0, 0.39);\n  color: white;\n  cursor: pointer;\n  padding: 15px;\n  border-radius: 4px;\n}\n\n.toTop:hover {\n  background-color: rgba(255, 0, 0, 0.637);\n}\n\n.link:hover {\n  color: #ff3d3d;\n  cursor: pointer;\n}\n\n/* width */\n::-webkit-scrollbar {\n  width: 15px;\n}\n\n/* Track */\n::-webkit-scrollbar-track {\n  background: #2b2b2b;\n  border-radius: .4em;\n}\n\n/* Handle */\n::-webkit-scrollbar-thumb {\n  background: rgb(128, 127, 127);\n  border-radius: .4em;\n}\n\n/* Handle on hover */\n::-webkit-scrollbar-thumb:hover {\n  background: rgb(197, 196, 196);\n}\n\n::-webkit-scrollbar-corner {\n  background: black;\n}\n\n/*# sourceMappingURL=index.css.map */",fileName:"Index(css)",language:"css",id:"31"},{path:'"use strict";\njQuery(function () {\n    //#region variables\n    //url to the restful api server\n    var apiUrl = "RESTful API URL";\n    var videoCountTracker = 0, paginationTracker = 0;\n    //videoCountTracker keeps track of total amount of videos loaded, also keeps track of searched video count\n    //paginationTracker keeps track of how many videos are loaded for the current database pagination\n    var playerHidden = false;   //bool to check if part of the header is hidden\n    var profileThumbnailsHidden = false; //bool to check if part of the header is hidden\n    var mainVideoPadding = 466; //formatting the video placements when hiding parts of the header\n    var pageFirstLoad = false;  //bool if the page\'s has been loaded for the first time\n    var channelData = {}, profileData = {}, liveData = {}, allLiveData = {}, upcomingStreamData = {}, allUpcomingStreamData = {}; //object holding all of the data brought in from the youtube api\n    var nowLive = false, upcoming = false;\n    var liveIds = [];   //used for highlighting previously selected videos in "live" , keeps track of profile id\'s of channels with live streams\n    var selected = {    //variables to keep track of various elements being selected\n        videosFromGroup: "group1",\n        videoFromProfile: "0",\n        video: "",\n        profile: "0",\n        profileFromGroup: "group1",\n        profileSelector: $(),\n        group: "group1",\n        category: "gaming"\n    };\n    var scrollBound = true, firstSearch = false, searching = false, emptySearch = false, loading = false, sortChanged = false, atTop = true, scrollingToTop = false, loadedAll = false;\n    //scrollbound blocks scroll input from firing the event when all pages are loaded\n    //firstSearch keeps track of first loop of a search\n    //searching keeps track of a search made by pressing enter\n    //loading stops the scroll event from firing if a search is currently running while at the bottom of the page\n    var searchWord = "";    //stores the word being searched to avoid running the same search\n    var searchedWord = "";  //stores the word that was searched to avoid running the same search\n    var searchQuery = "";   //stores queries to the api when a search is made\n    var sortOption = "newestFirst"; //keeps track of how the videos are displayed\n    //#endregion\n    pageLoad(); //loads the page with stored data\n\n    //--------------------------------------Main click functions----------------------------------\n    $(".logos").on(\'click\', ".logo", async function() {    //hides the profile pictures and fixes the attributes of the other elements\n        var logoClicked = $(this).attr("data-key"); //retrieve data-key which shows which logo was clicked\n        if (selected.group == logoClicked) {    //hide/show profileDiv if the same grouping was clicked\n            if (logoClicked != "live")\n                toggleProfileDiv();\n        }\n        else if (logoClicked == "live") {   //if live is clicked, append all livestreams\n            if (selected.profile == logoClicked)    //do nothing if live was already clicked and a new profile hasn\'t been selected yet\n                return;\n            if (!profileThumbnailsHidden)   //hides the thumbnails\n                toggleProfileDiv();\n            $(window).off("scroll");    //unbinds scroll to prevent buildVideoDiv from running\n            scrollBound = false;\n            $(".profilesDiv").empty();  //empties out the profileDiv\n            selected.group = logoClicked;\n            selected.videosFromGroup = logoClicked;\n            $("body").scrollTop(0);\n            $("main").scrollTop(0);\n            $("main").empty();\n            $(".selectedChannel.selectedChannelText").empty();\n            if ($(".selectedChannel").hasClass("selectedChannelHover"))\n                $(".selectedChannel").removeClass("selectedChannelHover");\n            $(".selectedChannel").attr("href", ``);\n            selected.profile = "live";\n            selected.profileFromGroup = "";\n            liveIds = [];\n            for (let i = 0; i < allLiveData.length; i++) {  //loops through the live data and appends video info to main if there is a channel live\n                for (let j = 0; j < allLiveData[i].members.length; j++) {\n                    if (allLiveData[i].members[j].isLive) {\n                        liveIds.push(allLiveData[i].members[j].id);\n                        $("main").append(`\n                        <article style="width: 269.55px" class="videoList ${allLiveData[i].members[j].id} ${allLiveData[i].members[j].videoId}" >\n                            <img style="height" src="${allLiveData[i].members[j].thumbnail}" alt="" class="thumbnail ${allLiveData[i].members[j].videoId}" data-key="${allLiveData[i].members[j].videoId};${allLiveData[i].members[j].id}" href="https://www.youtube.com/watch?v=${allLiveData[i].members[j].videoId}">\n                            <div class="details">\n                                <h4>${allLiveData[i].members[j].title.substring(0, 15) + "..."}</h4>\n                                <p>By: ${allLiveData[i].members[j].channelName}</p>\n                                <p>LIVE NOW!</p>\n                            </div>\n                        </article>\n                        `);\n                    }\n                }\n            }\n            if (nowLive)\n                $(".selectedChannel.selectedChannelText").text(`Number of Channels Live: ${liveIds.length}!`);\n            highlightSelectedVideo();   //highlight currently selected video if it is from that channel\n        }\n        else if (logoClicked == "main") {\n            if (selected.category == "gaming") { //vtubers logo was clicked\n                $(".logo.vtubers.main").toggle();\n                $(".logo.gaming.main").fadeToggle("slow");\n                $(".logo.gaming.group").toggle();\n                $(".logo.vtubers.group").toggle("easing")\n                selected.category = "vtubers";\n            }\n            else {  //gaming logo was clicked\n                $(".logo.gaming.main").toggle();\n                $(".logo.vtubers.main").fadeToggle("slow");\n                $(".logo.vtubers.group").toggle();\n                $(".logo.gaming.group").toggle("easing");\n                selected.category = "gaming";\n            } \n        }\n        else {  //if another grouping was clicked, show if hidden and rebuild profileDiv\n            await $.getJSON(apiUrl + "group/" + logoClicked, function(data) {   //GET request for data on the json-server\n                profileData = data;    //store the data from the json-server on the global object to be used, profile data on the group/logo clicked\n            });\n            populateLiveData(logoClicked);  //loads global vairable holding live stream data with respective group\n            populateUpcomingData(logoClicked);  //loads global vairable holding upcoming live stream data with respective group\n            if (profileThumbnailsHidden)\n                toggleProfileDiv();\n            selected.group = logoClicked;\n            buildProfileDivLoop(selected.group);//rebuild profile div with the group/logo clicked\n            $(".profilesDiv").scrollTop(0); //scroll to top on profile div when it is rebuilt\n            $(".profilesDiv").toggle();\n            $(".profilesDiv").fadeToggle(650);\n        }\n    });\n\n    $(".profilesDiv").on("click", ".profilePics", async function() {  //on profile picture click\n        $(".toTop").fadeOut(400); //fades out the toTop button if it is visible\n        if (!atTop) { //if page was scrolled before clicking a new profile\n            atTop = true;   \n            rebindScrollTopButton();\n        }\n        var id = $(this).attr("data-key");  //gets the data-key telling which profile was clicked\n        videoCountTracker = 0;  //reset counters\n        searchedWord = "";\n        searching = false;\n        loadedAll = false;\n        paginationTracker = 0;\n        if (id == selected.profile && selected.profileFromGroup == selected.group) //if the same profile was clicked, do nothing\n            return;\n        if (sortOption == "oldestFirst") {  //resets the sortBy to newestFirst\n            $(".sortByDropDown").val("newestFirst");\n            sortOption = $(".sortByDropDown").val();\n        }\n        await $.getJSON(apiUrl + "group/"  + selected.group + "/" + id + "/1", function(data) {   //GET request for data on the json-server\n            channelData = data;    //store the data from the json-server on the global object to be used\n        });\n        selected.profileSelector.removeClass("profilePicSelected"); //remove the class which shows the previous profile being selected\n        if (!$(".selectedChannel").hasClass("selectedChannelHover"))\n            $(".selectedChannel").addClass("selectedChannelHover");\n        if ($(".selectedChannel").is(":visible"))   //check to make the fadein work\n            $(".selectedChannel").toggle();\n        $(".selectedChannel").html(channelData.channelName + " [" + channelData.numberOfVideos + " videos]");\n        $(".selectedChannel").attr("href", `https://www.youtube.com/channel/${channelData.channelId}/videos`);\n        $(".selectedChannel").fadeToggle(700);\n        selected.videosFromGroup = channelData.group;\n        selected.profile = id;\n        selected.profileFromGroup = channelData.group; //keep track of which grouping the profile that was clicked is in\n        if (!scrollBound) {  //rebinds scroll event\n            scrollBound = true;\n            rebindScroll();\n        }\n        buildVideoLoop(videoCountTracker); //builds video page based off of profile clicked\n        highlightSelectedVideo();   //keep track of which video was previously clicked on\n    });\n\n    $("main").on("mousedown", ".thumbnail", function(e) {    //when the videos in main are clicked check if the thumbnail inside main was clicked\n        switch (e.button) {\n            case 0: {   //left mouse button clicked, set main video to the one clicked\n                var id = $(this).attr("data-key").split(\';\');  //get the videoID stored in data-key\n                if (id[0] == selected.video) { //if the video is already selected do nothing\n                    return;\n                }\n                if (selected.videoFromProfile == selected.profile || (selected.group == "live" && liveIds.includes(selected.videoFromProfile))) { //if a different video is selected, remove the markers from the other video\n                    if ($(`.videoList.${selected.videoFromProfile}.${selected.video}`).length && $(`.thumbnail.${selected.video}`).length) { //.length to check if it exists\n                        $(`.videoList.${selected.videoFromProfile}.${selected.video}`).removeClass("videoSelected");\n                        $(`.thumbnail.${selected.video}`).removeClass("thumbSelected")\n                    }\n                }\n                if (playerHidden)   //show the player if it is hidden\n                    togglePlayerHidden();\n                setMainVid(id); //change the embedded video to the video clicked on\n                }\n                break;\n            case 1: {   //middle mouse button clicked, open video in new tab\n                var href = $(this).attr("href");\n                window.open(href, "_blank");\n                }\n                break;\n            case 2:     //right mouse button clicked\n                e.preventDefault();\n                break;\n            default:\n                break;\n        }\n    });\n\n    $(".sortByDropDown").on("change", function() {  //when the sorting has changed\n        $(".toTop").fadeOut(400); //fades out the toTop button if it is visible\n        if (!atTop) { //if page was scrolled before clicking a new profile\n            atTop = true;   \n            rebindScrollTopButton();\n        }\n        if (!scrollBound) {  //rebinds scroll event\n            scrollBound = true;\n            rebindScroll();\n        }\n        sortOption = $(".sortByDropDown").val();\n        //wherever sortOptions is used in an eval statement in buildVideoLoop, operations are changed to display the videos forwards or in reverse\n        videoCountTracker = 0;\n        loadedAll = false;\n        searchedWord = "";\n        searching = false;\n        sortChanged = true;\n        buildVideoLoop(videoCountTracker);\n    });\n\n    $(".searchBar").on("keyup", async function(e) {    //if the enter key was pressed while in the searchbar  CHANGES keypress\n        if (e.code == "Enter") {\n            if (selected.profile == "live") //another preventive measure if the live logo was clicked\n                return;\n            searchWord = encodeURIComponent($(".searchBar").val().toLowerCase());\n            if (searchWord == searchedWord) //prevents multiple searchs of thes same word\n                return;\n            if ($(".searchBar").val().toLowerCase() != "") {    //if a new word is searched\n                searching = true;\n                firstSearch = true;\n            }\n            else {  //if the search box was emptied and enter was pressed\n                searching = false;\n                firstSearch = false;\n                emptySearch = true;\n            }\n            searchedWord = encodeURIComponent($(".searchBar").val().toLowerCase());\n            videoCountTracker = 0;  //reset trackers that help with loading videos\n            paginationTracker = 0;\n            loadedAll = false;\n            if (sortOption == "oldestFirst")\n                sortChanged = true;\n            $(".toTop").fadeOut(400); //fades out the toTop button if it is visible\n            if (!atTop) { //if page was scrolled before clicking a new profile\n                atTop = true;   \n                rebindScrollTopButton();\n            }\n            if (!scrollBound) {\n                scrollBound = true;\n                rebindScroll();\n            }\n            buildVideoLoop(videoCountTracker);\n        }\n    });\n    //----------------------------------------Main Functions-------------------------------------\n\n    async function pageLoad() { //on page load, builds the page based on the data stored in the json-server\n        try {\n            await $.getJSON(apiUrl + "group/"  + "group1", function(data) {   //GET request for data on the json-server\n                profileData = data;    //store the data from the json-server on the global object to be used\n            });\n            await $.getJSON(apiUrl + "group/"  + "group1/0/1", function(data) {   //GET request for data on the json-server\n                channelData = data;    //store the data from the json-server on the global object to be used, channel data with all videos\' information\n            });\n            await $.getJSON(apiUrl + "all/liveInfo", function(data) {   //GET request for data on the json-server, every channels\' live status\n                //appends and hides/shows clickable resources\n                $(".logos").append(`\n                <img src="Resources/logo/gamingLogo.png" alt="" class="logo gaming main" data-key="main">\n                <img src="Resources/logo/vtubersLogo.png" alt="" class="logo vtubers main" data-key="main">\n                <img src="Resources/logo/group1Logo.png" alt="" class="logo group1 gaming group" data-key="group1">\n                <img src="Resources/logo/group4Logo.png" alt="" class="logo group4 gaming group" data-key="group4">\n                <img src="Resources/logo/group2Logo.png" alt="" class="logo group2 vtubers group" data-key="group2">\n                <img src="Resources/logo/group3Logo3.png" alt="" class="logo group3 vtubers group" data-key="group3">\n                <img src="Resources/logo/vomsLogo2.png" alt="" class="logo voms vtubers group" data-key="voms">\n                <img src="Resources/logo/liveLogo.png" alt="" class="logo live" data-key="live">\n                `);\n                $(".logo.gaming.main").hide();\n                $(".logo.vtubers.group").hide();\n                $(".logo.live").toggle(); //hides the live logo\n                allLiveData = data;\n                for (let i = 0; i < data.length; i++) {\n                    for (let j = 0; j < data[i].members.length; j++) {\n                        if (data[i].members[j].isLive) {\n                            if (!nowLive)\n                                nowLive = true;\n                            $(`.logo.${data[i].group}`).addClass("hasLive");    //highlights the group/logo if a channel in that group is live\n                            break;\n                        }\n                    }\n                }\n            });\n\t\t\tawait $.getJSON(apiUrl + "all/UpcomingStreams", function (data) {  //GET request for data on the json-server, every channels\' live status\n\t\t\t\tallUpcomingStreamData = data;\n\t\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\t\tfor (let j = 0; j < data[i].members.length; j++) {\n\t\t\t\t\t\tif (data[i].members[j].hasUpcomingStream) {\n\t\t\t\t\t\t\tif (!upcoming) upcoming = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tpopulateLiveData("group1");\n\t\t\tpopulateUpcomingData("group1");\n        } catch (error) {\n            console.log(error);\n            return;\n        }\n        if (nowLive) //if there is a channel live, show the live logo\n            $(".logo.live").toggle();\n        selected.video = channelData.pages[0].videos[0].videoID; //sets the initial values to the first video of the first channel\n        buildProfileDivLoop("group1");  //build the part of the header displaying the profiles\n        buildVideoLoop(videoCountTracker);  //builds the main part of the page, displaying all of the videos for the first channel at index 0 of channelData.channels[0]\n        highlightSelectedVideo();   //highlights first video on first load\n        setMainVid([channelData.pages[0].videos[0].videoID, ";0"]);  //sets the first video as embedded video\n        rebindScroll(); //binds scroll event on first load\n        pageFirstLoad = true;   //indicating the page was loaded\n    };\n        \n    function buildProfileDivLoop(group) {    //loops through data object to display profiles in header\n        $(".profilesDiv").empty();  //clears profile pictures in the header\n        for (let i = 0; i < profileData.members.length; i++) { //loops and builds display\n            var thumbnail = profileData.members[i].thumbnail;\n            $(".profilesDiv").append(`\n            <article class="profilePics" data-key="${i}">\n                <img src="${thumbnail}" alt="" class="profilePic ${i}">\n            </article>\n            `)\n        }\n        if (pageFirstLoad) {    //if the page has already been loaded once\n            if (group == selected.profileFromGroup) //if the profile selected is from the grouping just clicked, set the class indicating which profile was clicked beforehand\n                selected.profileSelector = $(`.profilePic.${selected.profile}`).addClass("profilePicSelected");\n        }\n        checkLive();\n    };\n\n    async function buildVideoLoop(videoLoadAttemps) {   //loops through data object to display videos in main  \n        loading = true; //boolean to prevent scroll event firing\n        if (selected.profile == "live") //another preventive measure if the live logo was clicked\n            return;\n        if (channelData.pages.length <= 0)  //in case channelData somehow has no video data\n            return;\n        //get fresh data/data from first or last pagination if a new search is made\n        if ((firstSearch && channelData.pages[0].currentPage != (sortOption == "newestFirst" ? 1 : channelData.numberOfPages)) || sortChanged || (firstSearch && searching) || emptySearch) {\n            //GET request for data on the json-server\n            if (searching) {    //if a search was made, get data based off the queries\n                searchQuery = `?search=${searchedWord}&page=1&sorting=${sortOption}`;\n                await $.getJSON(apiUrl + "group/"  + channelData.group + "/" + channelData.id + searchQuery, function(data) {   \n                    channelData = data;    //store the data from the json-server on the global object to be used\n                });\n            }\n            else {\n                await $.getJSON(apiUrl + "group/"  + channelData.group + "/" + channelData.id + (sortOption == "newestFirst" ? "/1" : "/" + channelData.numberOfPages), function(data) {   \n                    channelData = data;    //store the data from the json-server on the global object to be used\n                });\n            }\n            if (sortChanged) {  //set the paginationTracker accordingly\n                paginationTracker = (sortOption == "newestFirst" || searching ? 0 : channelData.pages[0].videos.length - 1);\n                sortChanged = false;\n            }\n            if (emptySearch)    //search bar was cleared\n                emptySearch = false;\n        }\n        if (videoLoadAttemps == 0) {//displays the currently selected channel at the top left of the screen\n            selected.profileSelector = $(`.profilePic.${channelData.id}`).addClass("profilePicSelected");\n            $(".selectedChannel").html(channelData.channelName + "(" + channelData.numberOfVideos + " videos)");\n            $(".selectedChannel").attr("href", `https://www.youtube.com/channel/${channelData.channelId}/videos`);\n            $("main").empty(); //clear the videos before appending new data \n            $("body").scrollTop(0);\n            $("main").scrollTop(0); //scrolls all the way to the top of the page when rebuilding video main div so height of main resets, document.documentElement.scrollTop = 0; \n            if (!searching) {  //prepends live and upcoming lives when the empty search is made\n                setUpcomingStream();\n                setLiveVideo(); \n            }\n        }\n        if ((sortOption == "newestFirst" || searching) ? ((paginationTracker >= 59) && ( channelData.pages[0].nextPage != "" || (searching ? channelData.queryToken != "" : true) )) : (paginationTracker < 0 && (parseInt(channelData.pages[0].currentPage) - 1) >= 0)) {  //if all videos of the current page has been loaded\n            //GET request for data on the json-server\n            if (searching) {    //get data of the next set of videos matching the searched queries using the queryToken from the previous search query data\n                searchQuery = `?search=${searchedWord}&page=${channelData.pages[0].nextPage}&sorting=${sortOption}&queryToken=${channelData.queryToken}`;\n                await $.getJSON(apiUrl + "group/"  + channelData.group + "/" + channelData.id + searchQuery, function(data) {   \n                    channelData = data;    //store the data from the json-server on the global object to be used\n                });\n            }\n            else {\n                await $.getJSON(apiUrl + "group/"  + channelData.group + "/" + channelData.id + "/" + (sortOption == "newestFirst" ? channelData.pages[0].nextPage : parseInt(channelData.pages[0].currentPage) - 1), function(data) {   \n                    channelData = data;    //store the data from the json-server on the global object to be used\n                });\n            }\n            paginationTracker = (sortOption == "newestFirst" || searching ? 0 : channelData.pages[0].videos.length - 1);\n        }\n        let k = 0;  //tracker to load 30 videos at a time\n        while (((sortOption == "newestFirst" || searching) ? (paginationTracker < channelData.pages[0].videos.length) : (paginationTracker >= 0)) && k < 30) { \n            //loops through videos and appends video info to be displayed\n            var vidID = channelData.pages[0].videos[paginationTracker].videoID;\n            var thumbnail = channelData.pages[0].videos[paginationTracker].thumbnails.mediumURL;\n            var title = channelData.pages[0].videos[paginationTracker].title.substring(0, 15) + "...";\n            var date = channelData.pages[0].videos[paginationTracker].datePublished;\n            $("main").append(`\n            <article class="videoList ${channelData.id} ${vidID}" >\n                <img src="${thumbnail}" alt="" class="thumbnail ${vidID}" data-key="${vidID};${channelData.id}" href="https://www.youtube.com/watch?v=${vidID}">\n                <div class="details">\n                    <h4>${title}</h4>\n                    <p>${date}</p>\n                </div>\n            </article>\n            `);\n            if (sortOption == "newestFirst" || searching)\n                paginationTracker++;\n            else\n                paginationTracker--;\n            videoCountTracker++;\n            k++;\n        }\n        if(selected.video == "")    //needed if pageload is commented out\n            selected.video = channelData.pages[0].videos[0].videoID;\n        highlightSelectedVideo();   //highlight currently selected video if it is from that channel\n        if ($(".searchBar").val().length >= 0 && firstSearch) {\n            $(".selectedChannel").append(`<p class="searchCounter" style="display: inline-block;font-size: 1.1vw">  (Searched: ${videoCountTracker} videos)</p>`);\n            firstSearch = false;\n        }\n        else if ($(".searchBar").val().length >= 0)\n            $(".searchCounter").text(` (Searched: ${videoCountTracker} videos)`);\n        fixTextSize();  //resizes text to fit\n        if (!searching ? videoCountTracker >= channelData.numberOfVideos : (paginationTracker == channelData.pages[0].videos.length && channelData.queryToken == "")) \n            loadedAll = true;\n        else \n            loadedAll = false;\n        //if the window is at the bottom of the page and every video has not been searched, loop to keep searching\n        if ($(window).scrollTop() >= $(\'.videosContainer\').offset().top + $(\'.videosContainer\').outerHeight() - window.innerHeight && !loadedAll)\n            buildVideoLoop(videoCountTracker);\n        else\n            loading = false;\n    };\n\n    function setLiveVideo() {   //if the channel is live, preprend to main so it shows as the first video\n        if (liveData.members[channelData.id].isLive) {\n            $("main").prepend(`\n            <article style="width: 269.55px" class="videoList ${channelData.id} ${liveData.members[channelData.id].videoId}" >\n                <img style="height" src="${liveData.members[channelData.id].thumbnail}" alt="" class="thumbnail ${liveData.members[channelData.id].videoId}" data-key="${liveData.members[channelData.id].videoId};${channelData.id}" href="https://www.youtube.com/watch?v=${liveData.members[channelData.id].videoId}">\n                <div class="details">\n                    <h4>${liveData.members[channelData.id].title.substring(0, 15) + "..."}</h4>\n                    <p>LIVE NOW!</p>\n                </div>\n            </article>\n            `);\n        }\n    };\n\t\n    function setUpcomingStream() {\n        //if the channel has a scheduled upcoming stream, preprend to main so it shows as the first videos\n        if (upcomingStreamData.members[channelData.id].hasUpcomingStream) {\n            upcomingStreamData.members[channelData.id].stream.forEach((stream) => {\n            var dateScheduled = new Date(stream.dateMS);\n            var now = Date.now();\n            $("main").prepend(`\n            <article style="width: 269.55px" class="videoList ${channelData.id} ${stream.videoId}" >\n                <img style="height" src="${stream.thumbnail}" alt="" class="thumbnail ${stream.videoId}" data-key="${stream.videoId};${channelData.id}" href="https://www.youtube.com/watch?v=${stream.videoId}">\n                    <div class="details">\n                        <h4>${stream.title.substring(0, 15) + "..."}</h4>\n                        <p>Live ${dateScheduled < now ? "" : "in "}${findTimeBetween(dateScheduled, now)}${dateScheduled < now ? " ago" : ""}!</p>\n                        <p>Scheduled live for ${stream.date}!</p>\n                    </div>\n            </article>\n            `);\n            });\n        }\n    }\n\n    function setMainVid(key) {   //changes the html to display the desired video from the videoID\n        if (selected.group == "live")\n            selected.videoFromProfile = key[1];\n        else\n            selected.videoFromProfile = selected.profile;\n        selected.video = key[0];\n        $(`.videoList.${selected.videoFromProfile}.${key[0]}`).addClass("videoSelected");\n        $(`.thumbnail.${key[0]}`).addClass("thumbSelected")\n        $("#video").html(`\n        <iframe class="embeddedPlayer" width="560" height="315" src="https://www.youtube.com/embed/${key[0]}" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>\n        `);\n    };\n\n    function checkLive() {  //check if channel is live and highlight it if it is\n        for(let i = 0; i < liveData.members.length; i++)\n        {\n            if(liveData.members[i].isLive)\n                $(`.profilePic.${i}`).addClass("isLive");\n        }\n    };\n\n    function populateLiveData(groupName) {  //populates liveData depending on the group currently selected\n        for (let i = 0; i < allLiveData.length; i++) {\n            if (allLiveData[i].group == groupName) {\n                liveData = allLiveData[i];\n                break;\n            }\n        }\n    }\n\n    function populateUpcomingData(groupName) {  //populates liveData depending on the group currently selected\n        for (let i = 0; i < allLiveData.length; i++) {\n            if (allUpcomingStreamData[i].group == groupName) {\n                upcomingStreamData = allUpcomingStreamData[i];\n                break;\n            }\n        }\n    }\n\n    function highlightSelectedVideo() {\n        if (channelData.id == selected.videoFromProfile || liveIds.includes(selected.videoFromProfile)) {  //keep track of the video that was selected and makes it easier to tell\n            if ((`.videoList.${selected.videoFromProfile}.${selected.video}`).length && $(`.thumbnail.${selected.video}`).length) { //.length to check if it exists\n                if (!$(`.videoList.${selected.videoFromProfile}.${selected.video}`).hasClass("videoSelected") && !$(`.thumbnail.${selected.video}`).hasClass("thumbSelected")) {\n                    $(`.videoList.${selected.videoFromProfile}.${selected.video}`).addClass("videoSelected");\n                    $(`.thumbnail.${selected.video}`).addClass("thumbSelected");\n                }\n            }\n        }\n    };\n\n    function rebindScrollTopButton() {  //scroll event to display the toTop button\n        $(window).on("scroll", function() {\n            if (scrollingToTop) {   //if it is currently scrolling to the top, remove the scroll event\n                $(window).off("scroll");\n                return;\n            }\n            else if ($(window).scrollTop() >= 1) {  //if the page has been scrolled fade the toTop button in\n                $(window).off("scroll");\n                $(".toTop").fadeIn(400);\n                atTop = false;\n            }\n            if (videoCountTracker < channelData.numberOfVideos && !scrollingToTop)  //binds the page scroll event\n                rebindScroll();\n        });\n    };\n\n    function rebindScroll() {   //rebinds the scroll event, if all videos have loaded the event is unbound, if scrolled to bottom of the page -> load more videos if there are more to load\n        $(window).on("scroll", function() {\n            if (atTop)  //if the page is at the top, bind the scroll event for the toTop button\n                rebindScrollTopButton();\n            if (videoCountTracker >= channelData.numberOfVideos || loadedAll) {\n                $(window).off("scroll");\n                if (searching)\n                    searching = false;\n                scrollBound = false;\n            }\n            else if ($(window).scrollTop() >= $(\'.videosContainer\').offset().top + $(\'.videosContainer\').outerHeight() - window.innerHeight && videoCountTracker < channelData.numberOfVideos && !loading && !loadedAll) {\n                buildVideoLoop(videoCountTracker);\n            }\n        });\n    };\n        \n    //-------------------------------------------------other functions-----------------------------------\n    function togglePlayerHidden() { //hides the embedded player and fixes the attributes of the videoContainer\n        playerHidden = !playerHidden;\n        $(".embeddedPlayer").fadeToggle(400);\n        if (playerHidden) {\n            $(".mainVideo").height(15);\n            mainVideoPadding -= 300;\n            $(".mainSelector").css("padding-top", mainVideoPadding);\n        }\n        else {\n            $(".mainVideo").height(315);\n            mainVideoPadding += 300;\n            $(".mainSelector").css("padding-top", mainVideoPadding);\n        }\n    };\n\n    function toggleProfileDiv() {   //hides the profilediv and fixes the attributes of the videoContainer\n        profileThumbnailsHidden = !profileThumbnailsHidden;\n        if (profileThumbnailsHidden) {\n            mainVideoPadding -= 98;\n            $(".mainSelector").css("padding-top", mainVideoPadding);\n            $(".profileContainer").height(0);\n        }\n        else {\n            mainVideoPadding += 98;\n            $(".profileContainer").height(98);\n            $(".mainSelector").css("padding-top", mainVideoPadding);\n        }\n    };\n\n    //--------------------------------------------misc---------------------------------------\n    $(".toTop").on("click", function() {   //opens the youtube channel of the selected profile in a new tab\n        if ($(".toTop").is(":animated"))    //while the toTop button is in animation, return if clicked\n            return;\n        $(".toTop").fadeOut(400);\n        atTop = true;\n        scrollingToTop = true;\n        $("body").animate({scrollTop: 0}, 1000, function() {    //animate the scrollTop and rebind after the animation finishes\n            scrollingToTop = false;\n            rebindScrollTopButton();\n        });\n    });\n\n    $(".selectedChannel").on("click", function() {   //opens the youtube channel of the selected profile in a new tab\n        var href = $(this).attr("href");\n        if (href != "")\n            window.open(href, "_blank");\n    });\n\n    $(".mainVideo").on(\'click\', togglePlayerHidden);\n\n    function fixTextSize() {    //resizes text displayed at the top left of the screen\n        var length = $(".selectedChannel").text().length;\n        if (length >= 59)\n            $(".selectedChannelText").css("font-size", "1vw");\n        else\n            $(".selectedChannelText").css("font-size", "1.3vw");\n    };\n\n    function findTimeBetween(scheduledDate, now) {  //finds the time difference between two dates and formats it\n        var millisecondDifference = Math.abs(scheduledDate - now) / 1000;\n        const days = Math.floor(millisecondDifference / 86400);\n        millisecondDifference -= days * 86400;\n        const hours = Math.floor(millisecondDifference / 3600) % 24;\n        millisecondDifference -= hours * 3600;\n        const minutes = Math.floor(millisecondDifference / 60) % 60;\n        return `${days >= 1 ? (days === 1 ? days + \' day, \': days + \' days, \') : \'\'}${hours >= 1 ? (hours === 1 ? hours + \' hour, \'  : hours + \' hours, \') : \'\'}` + \n               `${minutes >= 1 ? (minutes === 1 ? minutes + \' minute\' : minutes + \' minutes\') : \'\'}`;\n    };\n});\n//# sourceMappingURL=youtube.js.map',fileName:"MainScript",language:"javascript",id:"32"}],screenShots:[]},{name:"jQuery Youtube API",index:4,description:"The API used in the jQuery webpage project.",sourceCode:[{path:"const express = require('express');\nconst app = express();\nconst _group1Routes = require('./api/routes/group1');\nconst _group2Routes = require('./api/routes/group2');\nconst _group3Routes = require('./api/routes/group3');\nconst _group4Routes = require('./api/routes/group4');\nconst _group5Routes = require('./api/routes/group5');\nconst _liveGroupRoutes = require('./api/routes/groupLiveInfo');\nconst _upcomingStreamsGroupRoutes = require('./api/routes/groupUpcomingStreamsInfo');\nconst morgan = require('morgan');\n\napp.use(morgan('dev')); //pass request through the morgan logger\n\napp.use((req, res, next) => {   //add headers to incoming request to avoid CORS errors\n    res.header('Cache-Control', 'public, max-age=300, s-maxage=600'); //cache data retrieved from the get requests made\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Headers', '*');//'Origin, X-Requested-With, Content-Type, Accept, Authorization'\n    if (req.method === 'OPTIONS') {\n        res.header('Access-Control-Allow-Methods', 'GET');\n        return res.status(200).json({});\n    }\n    next(); //send the request through with the new headers\n});\n\napp.use('/api/v1/group/group1', _group1Routes);\napp.use('/api/v1/group/group2', _group2Routes);\napp.use('/api/v1/group/group3', _group3Routes);\napp.use('/api/v1/group/group4', _group4Routes);\napp.use('/api/v1/group/group5', _group5Routes);\napp.use('/api/v1/all/liveInfo', _liveGroupRoutes);\napp.use('/api/v1/all/UpcomingStreams', _upcomingStreamsGroupRoutes);\n\napp.use((req, res, next) => {   //if 404\n    const error = new Error('Page Not Found!');\n    error.status = 404;\n    next(error);\n});\n\napp.use((error, req, res, nest) => {    //if some other error\n    res.status(error.status || 500).json({\n        Error: {\n            StatusCode: 404,\n            Message: error.message\n        }\n    });\n});\n\nmodule.exports = app;",fileName:"App",language:"javascript",id:"40"},{path:"const http = require('http');\nconst app = require('./app');\nconst mongoose = require('mongoose');\n\nasync function connectToDB() {\n    try {\n        await mongoose.connect('database address'), { useNewUrlParser: true, useUnifiedTopology: true  };\n    } catch (error) {\n        console.log(error);\n    }\n};\nconnectToDB();\n\nconst port = process.env.PORT || 3000;  //port of the node server\nconst server = http.createServer(app);  //connect app.js to the server\n\nserver.listen(port);    //starts listening for connections",fileName:"Index",language:"javascript",id:"41"},{path:"const mongoose = require('mongoose');\n\n//schema for channelData, exported the schema to be able to dynamically choose which collection to save the data to\nconst channelDataSchema = mongoose.Schema({ \n    _id: String,\n    id: Number,\n    channelId: String, //or use mongoos unique object id\n    channelName: String, \n    numberOfVideos: String,\n    numberOfPages: String, \n    group: String, \n    playlistId: String, \n    pages: [\n        {\n            _id: 0, //stops _id from being made\n            videos: [\n                {\n                    _id: 0,\n                    title: String,  \n                    videoID: String, \n                    datePublished: String,\n                    datePublishedUnformatted: String,\n                    thumbnails: \n                    {\n                        mediumURL: String \n                    } \n                }\n            ],\n            currentPage: String,\n            nextPage: String\n        }\n    ]\n});\n\nmodule.exports = channelDataSchema;",fileName:"ChannelDataModel",language:"javascript",id:"42"},{path:"const mongoose = require('mongoose');\n\nconst groupDataSchema = mongoose.Schema({   //schema for groupInfo\n    _id: String,\n    group: String, //or use mongoos unique object id\n    members: [\n        {\n            id: String, \n            channelId: String, \n            channelName: String, \n            thumbnail: String, \n            playlistId: String\n        }\n    ]\n});\n\nmodule.exports = mongoose.model('GroupData', groupDataSchema, 'groupInfo');",fileName:"GroupDataModel",language:"javascript",id:"43"},{path:"const mongoose = require('mongoose');\n\nconst groupLiveDataSchema = mongoose.Schema({   //schema for groupLiveInfo\n    _id: String,\n    group: String, //or use mongoos unique object id\n    members: [\n        {\n            id: String,\n            channelId: String, \n            channelName: String,\n            isLive: Boolean, \n            title: String,\n            thumbnail: String,\n            videoId: String\n        }\n    ]\n});\n\nmodule.exports = mongoose.model('GroupLiveData', groupLiveDataSchema, 'groupLiveInfo');",fileName:"GroupLiveDataModel",language:"javascript",id:"44"},{path:"const mongoose = require('mongoose');\n\nconst groupUpcomingStreamsDataSchema = mongoose.Schema({   //schema for groupUpcomingStreamsInfo\n    _id: String,\n    group: String, //or use mongoos unique object id\n    members: [\n        {\n            id: String,\n            channelId: String, \n            channelName: String,\n            hasUpcomingStream: Boolean,\n            stream: [{\n                title: String,\n                thumbnail: String,\n                videoId: String,\n                date: String,\n                dateMS: Number\n            }]\n        }\n    ]\n});\n\nmodule.exports = mongoose.model('GroupUpcomingStreamsData', groupUpcomingStreamsDataSchema, 'groupUpcomingStreamsInfo');",fileName:"GroupUpcomingStreamsDataModel",language:"javascript",id:"45"},{path:"const express = require('express');\nconst router = express.Router();\nconst Group = require('../models/groupLiveData');\n\nrouter.get('/', (req, res, next) => {   //return data of all channels' live status\n    Group.find()\n        .select('-_id -__v -members._id')\n        .exec()\n        .then(doc => {\n            res.status(200).json(doc);\n        })\n        .catch(error => {\n            console.log(error);\n            res.status(500).json({error: error});\n        });\n});\n\nrouter.get('/774inc', (req, res, next) => {   //return data of live status of channels in 774inc\n    Group.findById('774inc_Live')\n        .select('-_id -__v -members._id')\n        .exec()\n        .then(doc => {\n            res.status(200).json(doc);\n        })\n        .catch(error => {\n            console.log(error);\n            res.status(500).json({error: error});\n        });\n});\n\nrouter.get('/voms', (req, res, next) => {   //return data of live status of channels in voms\n    Group.findById('voms_Live')\n        .select('-_id -__v -members._id')\n        .exec()\n        .then(doc => {\n            res.status(200).json(doc);\n        })\n        .catch(error => {\n            console.log(error);\n            res.status(500).json({error: error});\n        });\n});\n\nrouter.get('/hololive', (req, res, next) => {   //return data of live status of channels in hololive\n    Group.findById('hololive_Live')\n        .select('-_id -__v -members._id')\n        .exec()\n        .then(doc => {\n            res.status(200).json(doc);\n        })\n        .catch(error => {\n            console.log(error);\n            res.status(500).json({error: error});\n        });\n});\n\nmodule.exports = router;",fileName:"GroupLiveInfoRoute",language:"javascript",id:"46"},{path:"const express = require('express');\nconst router = express.Router();\nconst Group = require('../models/groupUpcomingStreamsData');\n\nrouter.get('/', (req, res, next) => {   //return data of all channels' live status\n    Group.find()\n        .select('-_id -__v -members._id -members.stream._id')\n        .exec()\n        .then(doc => {\n            res.status(200).json(doc);\n        })\n        .catch(error => {\n            console.log(error);\n            res.status(500).json({error: error});\n        });\n});\n\nrouter.get('/774inc', (req, res, next) => {   //return data of live status of channels in 774inc\n    Group.findById('774inc_UpcomingStreamsData')\n        .select('-_id -__v -members._id -members.stream._id')\n        .exec()\n        .then(doc => {\n            res.status(200).json(doc);\n        })\n        .catch(error => {\n            console.log(error);\n            res.status(500).json({error: error});\n        });\n});\n\nrouter.get('/voms', (req, res, next) => {   //return data of live status of channels in voms\n    Group.findById('voms_UpcomingStreamsData')\n        .select('-_id -__v -members._id -members.stream._id')\n        .exec()\n        .then(doc => {\n            res.status(200).json(doc);\n        })\n        .catch(error => {\n            console.log(error);\n            res.status(500).json({error: error});\n        });\n});\n\nrouter.get('/hololive', (req, res, next) => {   //return data of live status of channels in hololive\n    Group.findById('hololive_UpcomingStreamsData')\n        .select('-_id -__v -members._id -members.stream._id')\n        .exec()\n        .then(doc => {\n            res.status(200).json(doc);\n        })\n        .catch(error => {\n            console.log(error);\n            res.status(500).json({error: error});\n        });\n});\n\nmodule.exports = router;",fileName:"GroupUpcomingStreamsInfoRoute",language:"javascript",id:"47"},{path:'//{groupName}route.js file replacing groupName with desired route name for every route available\nconst express = require(\'express\');\nconst router = express.Router();\nconst Group = require(\'../models/groupData\');\nconst ChannelSchema = require(\'../models/channelData\');\nconst mongoose = require(\'mongoose\');\nconst Channel = mongoose.model(\'ChannelData\', ChannelSchema, \'groupName\');\n\nrouter.get(\'/:channel\', (req, res, next) => {   //return channelInfo of specific channel in groupName, all videos\n    const id = req.params.channel;\n    if (isNaN(id) && isNaN(parseInt(id))) { //check if the parameter is a number\n        res.status(404).json({Error: {StatusCode: 404, Message: "Page Not Found!"}});\n        return;\n    }\n    //collect query values if they were included in the request url\n    var searchQuery = req.query.search.toLowerCase();   //searched word\n    const searchPage = req.query.page;  //only used to check if queryToken is needed\n    var sorting = req.query.sorting == undefined? "newestFirst" : req.query.sorting;    //used to determine whether to reverse the data or not\n    var trySearch = false;\n    var initialSearch = false;  //resets the limits for the j variable after the queryToken has been used in the initial search\n    var posToken = [ 0, 0 ];    //used to keep track of the index already searched\n    if (searchPage > 1) \n        posToken = req.query.queryToken.split("_");\n    if (searchQuery)    //if a non empty string was used\n        trySearch = true;\n    Channel.findById(\'groupName_\' + id)\n        .select(trySearch == true ? "" : \'-_id -__v -playlistId -pages\')    //if searching, get whole document\n        .exec()\n        .then(doc => {\n            if (trySearch) {\n                var searchedDoc = {id: doc.id, channelId: doc.channelId, channelName: doc.channelName, numberOfVideos: doc.numberOfVideos, numberOfPages : doc.numberOfPages, group: doc.group, queryToken: "", pages: [ { videos: [], currentPage: searchPage, nextPage: "" } ]};\n                var counter = 0;\n                if (posToken[0] == 0 && posToken[1] == 0 && sorting == "oldestFirst")   //sets index when the data needs to be reversed\n                    posToken = [ (doc.pages.length - 1), (doc.pages[doc.pages.length - 1].videos.length - 1) ];\n                for (let i = posToken[0]; sorting == "newestFirst" ? i < doc.pages.length : i >= 0; sorting == "newestFirst" ? i++ : i--) {\n                    for (let j = initialSearch == false ? posToken[1] : (sorting == "newestFirst" ? 0 : doc.pages[i].videos.length - 1); sorting == "newestFirst" ? j < doc.pages[i].videos.length : j >= 0; sorting == "newestFirst" ? j++ : j--) {\n                        if (doc.pages[i].videos[j].title.toLowerCase().includes(searchQuery)) { //if the search word is included in a video\'s title\n                            searchedDoc.pages[0].videos.push(doc.pages[i].videos[j]);   //push the video details\n                            counter++;\n                            if (counter == 60) {    //when 60 videos have been pushed into the object\n                                searchedDoc.queryToken = i + "_" + (sorting == "newestFirst" ? (j + 1) : (j - 1));  //set queryToken for additional searches of the same word\n                                searchedDoc.pages[0].nextPage = parseInt(searchPage) + 1;\n                                break;\n                            }\n                        } \n                    }\n                    if (!initialSearch)\n                            initialSearch = true;\n                    if (counter == 60) \n                        break;\n                }\n                if (searchedDoc.pages.length > 0)\n                    res.status(200).json(searchedDoc);\n                else\n                    res.status(404).json({Error: {StatusCode: 404, Message: "Page Not Found!"}});\n            }\n            else {\n                if (doc != null)\n                    res.status(200).json(doc);\n                else\n                    res.status(404).json({Error: {StatusCode: 404, Message: "Page Not Found!"}});\n            }\n        })\n        .catch(error => {\n            console.log(error);\n            res.status(500).json({error: error});\n        });\n});\n\nrouter.get(\'/:channel/:page\', (req, res, next) => {   //return channelInfo of specific channel in groupName, all videos\n    const id = req.params.channel;\n    const pageNumber = req.params.page;\n\n    if ((isNaN(pageNumber) && isNaN(parseInt(pageNumber))) || (isNaN(id) && isNaN(parseInt(id)))) { //check if the parameters are numbers\n        res.status(404).json({Error: {StatusCode: 404, Message: "Page Not Found!"}});\n        return;\n    }\n    var projection = {_id:0, id: 1, channelId: 1, channelName: 1, numberOfVideos: 1, numberOfPages: 1, group: 1, \n        pages: { $arrayElemAt: ["$pages", parseInt(pageNumber - 1)]}};\n    Channel.findById(\'groupName_\' + id)\n    .select(projection)\n    .exec()\n    .then(doc => {\n        if (doc.pages.length > 0)\n            res.status(200).json(doc);\n        else\n            res.status(404).json({Error: {StatusCode: 404, Message: "Page Not Found!"}});\n    })\n    .catch(error => {\n        console.log(error);\n        res.status(500).json({error: error});\n    });\n});\n\nrouter.get(\'/\', (req, res, next) => {   //return groupInfo/memberInfo for each channel in groupName\n    Group.findById(\'groupName\')\n        .select(\'-_id -__v -members._id -members.playlistId\')\n        .exec()\n        .then(doc => {\n            res.status(200).json(doc);\n        })\n        .catch(error => {\n            console.log(error);\n            res.status(500).json({error: error});\n        });\n});\n\nmodule.exports = router;',fileName:"GroupNameRoute",language:"javascript",id:"48"}],screenShots:[]},{name:"Youtube Data Gatherer",index:5,description:"The program used to populate the mongoDB database with data on youtube channels. This uses a mix of channel page scraping to gather live streaming data and youtube's API to gather data on every public video uploaded. This also uses the same models as the API.",sourceCode:[{path:'const readline = require(\'readline\');\nconst mongoose = require(\'mongoose\');\nconst superagent = require(\'superagent\');\nconst ChannelSchema = require(\'./models/channelData\');\nconst ChannelDataSchema = require(\'./models/channelData\');\nconst GroupData = require(\'./models/groupData\');\nconst GroupLiveData = require(\'./models/groupLiveData\');\nconst GroupUpcomingStreamsData = require(\'./models/groupUpcomingStreamsData\');\nconst { isNull } = require(\'util\');\n\nasync function connectToDB() {\n    try {\n        await mongoose.connect(\'database address\'), { useNewUrlParser: true, useUnifiedTopology: true  };\n    } catch (error) {\n        console.log(error);\n    }\n};\nconnectToDB();\n\n//#region key\nvar key = "youtube api key";\n//#endregion\nvar monthList = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];   //used for formatting youtube creation/prublished dates\nvar urls = {    //urls utilizing youtube api to gather data\n    channelInfo: "https://www.googleapis.com/youtube/v3/channels",\n    allUploadsInfo: "https://www.googleapis.com/youtube/v3/playlistItems",\n    playlistInfo: "https://www.googleapis.com/youtube/v3/playlists"\n};\n//channel ids for each defined group\n\nvar channelIdsGroup1 = ["array of channel ids for group1"];\nvar channelIdsGroup2 = ["array of channel ids for group2"];\nvar channelIdsGroup3 = ["array of channel ids for group3"];\nvar channelIdsGroup4 = ["array of channel ids for group4"];\nvar channelIdsGroup5 = ["array of channel ids for group5"];\n\n//items(snippet(title,description,thumbnails),contentDetails(videoId,videoPublishedAt))\n\nvar unitCounter = 0;//keep track of how many queries are being made\nvar options = { upsert: true };  //option for mongodb to upsert data being added\n\nconst rl = readline.createInterface({   //used to implement input on the terminal\n    input: process.stdin,\n    output: process.stdout\n});\n\nrl.on(\'line\', userInput => {    //when \'line\'/enter is pressed\n    const input = userInput;\n    if (input == "update") {\n        console.log("Updating...");\n        unitCounter = 0;\n        update(channelIdsGroup3, "Group3");\n        update(channelIdsGroup5, "Group5");\n        update(channelIdsGroup2, "Group2");\n        update(channelIdsGroup1, "Group1");\n        update(channelIdsGroup4, "Group4");\n    }\n    else if (input == "check") {\n        console.log("Checking for live channels!");\n        var promises = [];\n        promises.push(checkLive(channelIdsGroup3, "Group3"));\n        promises.push(checkLive(channelIdsGroup5, "Group5"));\n        promises.push(checkLive(channelIdsGroup2, "Group2"));\n        //promises.push(checkLive(channelIdsGroup1, "Group1"));\n        //promises.push(checkLive(channelIdsGroup4, "Group4"));\n\n        Promise.all(promises).then(() => {\n            console.log("Finished checking all groups for upcoming and currently live streams!");\n        }).catch(err => {console.log(err)});\n    }\n    else if (input == "reset") { //reset all timers\n        //updateTimerMintueCounter = 0;\n        //checkTimerMinuteCounter = 0;\n        //updateTimer.refresh();\n        //checkTimer.refresh();\n        //minuteTimer.refresh();\n        console.log("Timers have been reset!");\n    }\n});\n/*\n//var updateTimerMintueCounter = 0;\nvar checkTimerMinuteCounter = 0;\n        //1800000 30 minutes   300000 5 minutes     60000 1 minute\n\n//var updateTimer = setInterval(() => {\n///    console.log("Updating...");\n//    update(channelIds, groupNames);\n//}, 3660000);\n\nvar checkTimer = setInterval(() => {    //timer used to check if a channel is live\n    console.log("Checking for live channels!");\n    checkLive(channelIdsGroup3, "Group3");\n    checkLive(channelIdsGroup5, "Group5");\n    checkLive(channelIdsGroup2, "Group2");\n}, 1800000);\n\nvar minuteTimer = setInterval(() => {   //minute timer to keep track of how many minutes have passed\n    //updateTimerMintueCounter++;\n    checkTimerMinuteCounter++;\n    if (checkTimerMinuteCounter == 30)\n        checkTimerMinuteCounter = 0;\n    //if (updateTimerMintueCounter == 61)\n    //    updateTimerMintueCounter = 0;\n    //console.log(`${61 - updateTimerMintueCounter} minutes until next database update!`);\n    console.log(`${30 - checkTimerMinuteCounter} minutes until next live check!`);\n}, 60000);\n*/\n//note: this function could be changed similar to the updateVideos function to run faster, but to avoid the multiple fast GET requests to youtube, requests are made one at a time\n//instead of all at once. a short delay is also added in between requests.\nasync function checkLive(urls, group) { //check which channels are currently live\n    var liveData = { _id: group + "_Live", group: group, members: [] }; \n    var upcomingStreamsData = { _id: group + "_UpcomingStreamsData", group: group, members: [] };\n    for (let i = 0; i < urls.length; i++) {\n        try {\n            // push before so indexes are made even if a channel is not live or if they do not have a scheduled live stream\n            liveData.members.push({ id: i, channelId: urls[i], channelName: "", isLive: false, title: "", thumbnail: "", videoId: "" });\n            upcomingStreamsData.members.push({ id: i, channelId: urls[i], channelName: "", hasUpcomingStream: false, stream: [] });\n            //get request to the youtube channel\'s main page\n            const data = await superagent.get("https://www.youtube.com/channel/" + urls[i]).set("User-Agent", "user agent info");\n            const html = data.text;\n            var tempString;\n            var tempString2;\n            var upcomingCounter = 0; //counter used to keep track of the index when storing data for multiple scheduled live streams\n            //when using .match, the regex expression is surrounded by //g to allow the match to grab all matches and put them in an array, otherwise it will only return the first match\n            if (html.includes("{"text":" watching"}") || html.includes("Live now")) {  //if the channel is live, the html can contain either of these strings\n                //first chunk {"videoRenderer":{"videoId":(.*?),"accessibility":\n                if (/{"videoRenderer":{"videoId":(.*?),"navigationEndpoint"/.test(html)) {   //if the channel set up a currently live display on their main page\n                    tempString = html.match("{"videoRenderer":{"videoId":(.*?),"navigationEndpoint"")[0];   //takes a chunk of json data stored on the html with various data\n                    liveData.members[i].title = tempString.match("(?<="text":")[^"]*")[0];  //filter out the chunk to retrieve the title of the live stream\n                    liveData.members[i].channelName = tempString.match(/(?<="text":")[^"]*/g)[2];   //same filer as title, but gets the last match index containing channel name\n                }\n                else {  //if the currently live stream is in their playlists displayed on their main page\n                    tempString = html.match("hqdefault_live(.*?)"label":"LIVE"")[0];   //takes a chunk of json data stored on the html with various data\n                    liveData.members[i].title = tempString.match("(?<=simpleText":")(.*?)(?="},")")[0];  //filter out the chunk to retrieve the title of the live stream\n                    liveData.members[i].channelName = tempString.match("(?<=by )(.*)(?= [0-9].* views)")[0];   //filter out the chunk to retrieve channel name\n                }\n                liveData.members[i].thumbnail = tempString.match("(?<="url":")[^"]*")[0];   //filter out the chunk to retrieve the thumbnail of the live stream\n                liveData.members[i].videoId = tempString.match("(?<="videoId":")[^"]*")[0];     //filter out the chunk to retrieve the videoId of the live stream \n                liveData.members[i].isLive = true;\n                console.log(`${liveData.members[i].channelName} is live at: ( https://www.youtube.com/watch?v=${liveData.members[i].videoId} )`);\n            }\n            if (html.includes("Upcoming live streams")) {//if the channel has a scheduled live stream, the html will contain this string\n                //original regex for matching data on multiple upcoming live streams\n                var upcomingDataRegex = /[Vv]ideoRenderer(.*?)upcomingEventText/g;\n                //when the html contains duplicate info on an upcoming live stream, match data only in the upcoming live stream section\n                tempString2 = html.match(/itemSectionRenderer":{"contents":[{"shelfRenderer":{"title":{"runs":[{"text":"Upcoming live streams(.*?)itemSectionRenderer/g)[0]; //takes a chunk of json data with info on upcoming live streams\n                upcomingStreamsData.members[i].channelName = tempString2.match("(?<=by )(.*?)(?= No views)")[0];    //filter out the chunk for channel name\n                upcomingStreamsData.members[i].hasUpcomingStream = true;\n                if (tempString2.includes("watching")) {  //where live stream is still inside upcoming live stream section\n                    if (!(/,{"gridVideoRenderer"(.*?)upcomingEventText/g.test(tempString2)))    //if live stream is the only video inside upcoming live stream section\n                        continue;\n                    upcomingDataRegex = /,{"gridVideoRenderer"(.*?)upcomingEventText/g; //get the rest of the upcoming live streams\n                }\n                tempString2.match(upcomingDataRegex).forEach(upComingStream => {    //filter the chunk and loops for mulitple scheduled live streams\n                    upcomingStreamsData.members[i].stream.push({title: "", thumbnail: "", videoId: "", date: "" }); //push for each scheduled live stream\n                    upcomingStreamsData.members[i].stream[upcomingCounter].title = upComingStream.match("(?<=simpleText":")[^"]*")[0];   //filter for title\n                    upcomingStreamsData.members[i].stream[upcomingCounter].thumbnail = upComingStream.match("(?<="url":")[^"]*")[0];    //filter for thumbnail\n                    upcomingStreamsData.members[i].stream[upcomingCounter].videoId = upComingStream.match("(?<="videoId":")[^"]*")[0];  //filter for video id\n                    //The start time given by youtube is a unix timestamp, the timestamp is multiplied by 1000 to get the correct date in milliseconds, then converted with a new Date and\n                    //formatted with the function formatDateTime()\n                    var dateMS = upComingStream.match("(?<="startTime":")(.*?)(?=")")[0] * 1000;\n                    upcomingStreamsData.members[i].stream[upcomingCounter].date = formatDateTime(new Date(dateMS));\n                    upcomingStreamsData.members[i].stream[upcomingCounter].dateMS = dateMS;\n                    upcomingCounter++;\n                });\n            }\n        } catch (error) {\n            console.log(`( https://www.youtube.com/channel/${urls[i]} )\n${error}`);\n        }\n        console.log(`Finished checking ${i+1}/${urls.length} for ${group}!`);\n        await new Promise(resolve => setTimeout(resolve, 400)); //wait some time before each request\n    }\n    const groupLiveData = new GroupLiveData(liveData);  //store/update the database with liveData\n    groupLiveData.updateOne(liveData, options, function(error) {\n        if (error)\n            console.log(error);\n    });\n    const groupUpcomingStreamsData = new GroupUpcomingStreamsData(upcomingStreamsData);  //store/update the database with upcomingStreamsData\n    groupUpcomingStreamsData.updateOne(upcomingStreamsData, options, function(error) {\n        if (error)\n            console.log(error);\n    });\n    console.log(`Finished checking for live channels and upcoming streams for ${group}!`);\n};\n\nasync function update(channelIds, group) {  //used to grab data on all uploaded videos for each channel\n    //because playlist id and channel name is being retreived during this function call and it is needed for the updateVideos function, it is awaited and the value is stored in channelIdAndName\n    var channelIdAndName = await updateGroupInfo(channelIds, group);\n    var Channel = mongoose.model(\'ChannelData\', ChannelSchema, group);\n    let promises = [];  //array to hold promise from async update function\n    for (let i = 0; i < channelIdAndName.length; i++) { //for loop to utilize multiple async calls to youtube api to gather data faster\n        var numOfVid = await Channel.findById(group + \'_\' + i)  //access the database to grab value for numberOfVideos a channel has\n        .select(\'-_id -__v -channelId -channelName -pages -group -id -playlistId -numberOfPages\') //remove unecessary properties/values\n        .exec()\n        .then(doc => { if (doc == null) return -1; else return doc.numberOfVideos;} ) //return the value to pass through updateVideos function for comparison\n        .catch(error => {console.log(error);} );\n        promises.push(updateVideos(channelIds[i], group, channelIdAndName[i], i, numOfVid)); //pushes the async function into the promise array\n    }\n    Promise.all(promises).then(() => {  //waits for all of the promises to complete\n        console.log(`Finished updating data for ${group}! Units used: ${unitCounter}`);\n    }).catch(err => {\n        console.log(err);\n    });\n};\n//gets group data for the array of channel ids and stores in the database, returns an array of channel names and playlist Ids\n//{_id:String, group: String, members:[{id:String, channelId:String, channelName:String, thumbnail:String, playlistId:String}]}\nasync function updateGroupInfo(channelIds, group) { \n    var channelInfoOptions = { //options for the request for channel info\n        part: \'snippet,contentDetails\',\n        key: key,\n        fields: "items(snippet(title,thumbnails/medium/url),contentDetails.relatedPlaylists/uploads)",  //the specific information requested\n        id: ""\n    };\n    var nameId = []; //holds channelname and channel playlistID\n    var groupInfo = { _id: group, group: group, members: []}; //object to be stored into the database after it is populated\n    for (let i = 0; i < channelIds.length; i++) {   //loops through the amount of channels being displayed\n        channelInfoOptions.id = channelIds[i];  //pass channel id into options/query for the get request to get playlist id\n        try {\n            const data = await superagent.get(urls.channelInfo).query(channelInfoOptions);  //get channel info and playlist id\n            unitCounter++;\n            //push to hold the desired information on the group of channels   , description: "", allUploadsPlaylistID: ""\n            nameId.push({playlistId: data.body.items[0].contentDetails.relatedPlaylists.uploads, channelName: data.body.items[0].snippet.title});\n            groupInfo.members.push({ id: i, channelId: channelIds[i], channelName: data.body.items[0].snippet.title, \n                                    thumbnail: data.body.items[0].snippet.thumbnails.medium.url, playlistId: data.body.items[0].contentDetails.relatedPlaylists.uploads });\n        } catch (error) {\n            //alert("Check the log, any error has occured: GET request to channels.")\n            console.log("Check the log, any error has occured: GET request to channels.");\n            console.log(error);\n            console.log(`${groupInfo.members[i].channelName} - ${groupInfo.members[i].playlistId}}`);\n            continue;\n        }\n        console.log(`Finished updating group data ${i+1}/${channelIds.length} for ${group}! Units used: ${unitCounter}`);\n    }\n    const groupData = new GroupData(groupInfo);\n    groupData.updateOne(groupInfo, options, function(error) {   //store/update the database with groupInfo\n        if (error)\n            console.log(error);\n    });\n    return nameId;  //return channel names and playlistid\n};\n//gets data on all of the videos uploaded by a channel and stores in the database\n//{_id:String, id:Number, channelId:String, channelName:String, numberOfVideos:String, group:String, playlistId:String, videos:[{title:String, videoID:String, datePublished:String, thumbnails:{mediumURL:String}}]} \n//the request while loop is fully ran for every call of update in the case of past videos becoming unavailable/available and or changes to those videos are made, instead of only getting\n//the first page and breaking the loop early to update with the most recent uploads\nasync function updateVideos(channelId, group, nameId, index, numOfVids) {\n    try {\n        var fullUpdate = false; //fully update the database\n        const data1 = await superagent.get(urls.playlistInfo).query({   //make a api request for info on the all uploads playlist\n            part: \'contentDetails\',\n            id: nameId.playlistId,\n            key: key\n        }); \n        unitCounter++;\n        if (data1.body.items[0].contentDetails.itemCount.toString() == numOfVids && fullUpdate == false) {  //checks if there are any changes in number of videos with value stored in database\n            console.log(`${nameId.channelName} is already up to date! Units used: ${unitCounter}`);\n            return;\n        } \n    } catch (error) {\n        //alert("Check the log, any error has occured: GET request to playlists.")\n\t\tconsole.log("Check the log, any error has occured: GET request to playlists.")\n\t\tconsole.log(error);\n\t\tconsole.log(`${currentChannelInfo.channelName} - ${currentChannelInfo.playlistId}}`);\n\t\treturn;\n    }\n    var currentPage = 0;    //parent array index to hold info on 60 videos\n    var currentPageCounter = 0; //keep track of how many videos are in the current page array\n    var allUploadsInfoOptions = {   //options for the request for all videos uploaded info\n        part: \'snippet,contentDetails\',\n        key: key,\n        maxResults: 50,\n        playlistId: "",\n        fields: "items(snippet(title,thumbnails/medium/url),contentDetails(videoId,videoPublishedAt)),nextPageToken",   //the specific information requested\n        pageToken: ""\n    };\n    //object to be stored into the database after it is populated\n    var currentChannelInfo = { _id: group + "_" + index, id: index, channelId: channelId, channelName: nameId.channelName, numberOfVideos: "", numberOfPages: "", group: group , playlistId: nameId.playlistId, pages: [ { currentPage: currentPage + 1, nextPage: "", videos: [] } ] };\n    allUploadsInfoOptions.playlistId = nameId.playlistId;   //sets the options for the next GET request\n    var prevToken = ""; //variable to keep track of the nextpage/previouspage tokens to break out of the while loop, for allUploadsInfoOptions\n    var k = 0;  //variable to index all of the videos in a channel, GET request fetches data on 50 videos at a time\n    while (prevToken != null) { //while there are more pages of video info to retrieve\n        try {\n            const data = await superagent.get(urls.allUploadsInfo).query(allUploadsInfoOptions);    //get request for video info for the current page token\n            unitCounter++;\n            for (let j = 0; j < data.body.items.length; j++) {\n                if (data.body.items[j].snippet.title == "Deleted video")\n                    continue;\n                var date = new Date(data.body.items[j].contentDetails.videoPublishedAt);\n                var newDate = formatDateTime(date);\n                //push to hold desired video info , description: ""\n                currentChannelInfo.pages[currentPage].videos.push({title: data.body.items[j].snippet.title,  videoID: data.body.items[j].contentDetails.videoId, \n                                                datePublished: newDate, datePublishedUnformatted: data.body.items[j].contentDetails.videoPublishedAt,\n                                                thumbnails: {mediumURL: data.body.items[j].snippet.thumbnails.medium.url } });\n                k++;\n                currentPageCounter++;\n                if (currentPageCounter == 60 && j < data.body.items.length) {    //if the currentPage array has 60 videos, start pushing data into the next page index\n                    currentChannelInfo.pages[currentPage].nextPage = currentPage + 2;\n                    currentPage++;\n                    currentPageCounter = 0;\n                    currentChannelInfo.pages.push({ currentPage: currentPage + 1, nextPage: "", videos: [] });\n                }\n            }\n            prevToken = data.body.nextPageToken;\n            allUploadsInfoOptions.pageToken = prevToken;    //set the options to make a new GET request to the next page\n        } catch (error) {\n            //alert("Check the log, any error has occured: GET request to playlistItems.")\n            console.log("Check the log, any error has occured: GET request to playlistItems.")\n            console.log(error);\n            console.log(`${currentChannelInfo.channelName} - ${currentChannelInfo.playlistId}}`);\n            break;\n        }\n    }\n    currentChannelInfo.numberOfVideos = k;\n    currentChannelInfo.numberOfPages = currentPage + 1;\n    const channelDataModel = mongoose.model(\'ChannelData\', ChannelDataSchema, group);   //build model to update database with collection \'group\'\n    const channelData = new channelDataModel(currentChannelInfo);\n    channelData.updateOne(currentChannelInfo, options, function(error) {    //store/update the database with currentChannelInfo\n        if (error)\n            console.log(error);\n    });\n    console.log(`Finished updating videos for ${currentChannelInfo.channelName} in ${group}! Units used: ${unitCounter}`);\n    return;\n};\n\nfunction formatDateTime(date) { //formats the youtube datetime to {month} {day}, {year} at {time}{am/pm}\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    var day = date.getDate();\n    var month = date.getMonth();\n    var year = date.getFullYear();\n    var ampm = hours >= 12 ? "pm" : "am";\n    hours = hours % 12;\n    hours = hours ? hours : 12;\n    minutes = minutes < 10 ? "0" + minutes : minutes;\n    var dateTime = `${monthList[month]} ${day}, ${year} at ${hours}:${minutes}${ampm}`;\n    return dateTime;\n};',fileName:"Index",language:"javascript",id:"50"}],screenShots:[]},{name:"Random Scrapers",index:6,description:"These programs were made to scrape media from media hosting sites with htmls that have varying structures. Being able to analyze different html structures and figuring out how to extract necessary data was the main goal of this project.",sourceCode:[{path:'using System;\nusing System.Net.Http;\nusing ImageGrabberConsoleApp.Grabbers;\n\nnamespace ImageGrabberConsoleApp\n{\n    class Program\n    {\n        private static readonly HttpClient client = new HttpClient();\n        static void Main(string[] args)\n        {\n            Scraper1 scraper1 = new Scraper1();\n            Scraper2 scraper2 = new Scraper2();\n            Scraper3 scraper3 = new Scraper3();\n\n            Console.Title = $"StandBy, waiting for url.";\n            while (true)\n            {\n                Console.WriteLine("Enter the Url and number(blank for max pages) of the pages to be processed. "exit" to quit.");\n                var url = Console.ReadLine().Split(\' \');    //two inputs, url and desired number of pages to download\n                var numOfPages = 0;\n                if (url.Length > 1)\n                {\n                    if (int.TryParse(url[1], out _))\n                        numOfPages = int.Parse(url[1]);\n                    else\n                    {\n                        Console.WriteLine("The second input was not a number!");\n                        continue;\n                    }    \n                }\n                if (url[0].Equals("exit", StringComparison.OrdinalIgnoreCase))\n                    break;\n                if (url[0].Length <= 5)\n                    continue;\n                if (url[0].Contains("scraper1 url", StringComparison.OrdinalIgnoreCase))\n                    scraper1.Scrape(url[0], client, numOfPages);\n                else if (url[0].Contains("scraper2 url", StringComparison.OrdinalIgnoreCase) || url[0].Contains("scraper2 url 2", StringComparison.OrdinalIgnoreCase))\n                    scraper2.Scrape(url[0], client, numOfPages);\n                else if (url[0].Contains("scraper3 url", StringComparison.OrdinalIgnoreCase))\n                    scraper3.Scrape(url[0], client, numOfPages);\n                else\n                    Console.WriteLine("The url is not supported by this program!");\n                \n            }\n            Console.WriteLine("Program ready to exit.");\n        }\n    }\n}\n',fileName:"Program",language:"csharp",id:"60"},{path:'using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing ImageGrabberConsoleApp.Maps;\nusing Newtonsoft.Json;\n\nnamespace ImageGrabberConsoleApp.Grabbers\n{\n    class Scraper1\n    {\n        //note: pagination specific to scraper1 url\n        #region Scraper\n        // ([^/]+$) everything after last /              (d+) all numbers\n        private static string html = string.Empty;\n        private static int countTotal = 0, countRelative = 0, picturesSkipped = 0;\n        private static readonly HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();\n        private static readonly Regex filterPagination = new Regex(@"(d+)"), filterName = new Regex(@"([^/]+$)");\n\n        public void Scrape(string url, HttpClient client, int numOfPages) //numOfPages, the number of pages the user wants to grab from\n        {\n            try\n            {\n                SignIn(client);\n                html = client.GetStringAsync(url).GetAwaiter().GetResult();\n                doc.LoadHtml(html);\n            }\n            catch (Exception)\n            {\n                Console.WriteLine("Something went wrong with the inputted url");\n                return;\n            }\n            string newUrl = string.Empty;\n\n            string title = doc.DocumentNode.Descendants("title").First().InnerText;\n\n            //remove the character \'|\' so the title can be used as the folder name\n            if (title.Contains(\'|\'))\n                title = title.Replace(\'|\', \' \');\n\n            //create folder on desktop with title\n            string root = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); //finds the desktop of current user and stores in string root\n            Directory.CreateDirectory(root + $@"{title}");               //creates necessary folders/directories\n            string downloadFolderPath = root + $@"{title}";\n\n            //convert matches to string array then string array to int array\n            var paginationRange = filterPagination.Matches(doc.DocumentNode.Descendants("p").Where(x => x.HasClass("pagination")).First().InnerText).Cast<Match>().Select(m => m.Value).ToArray().Select(int.Parse).ToArray();\n            var endPage = paginationRange[1];\n            //if no imput was made for numOfPages default to max pages grabbed, else endPage is set as desired\n            if ((numOfPages > 0) && ((paginationRange[0] + numOfPages - 1) <= paginationRange[1]))\n                endPage = paginationRange[0] + numOfPages - 1;\n            \n            //gets rid of pagination querry if it was included in original url\n            if (url.Contains($"&p={paginationRange[0]}"))\n                newUrl = url.Substring(0, url.Length - 4);\n            else\n                newUrl = url;\n\n            int pageCounter = 0;\n            countRelative = 0;\n            picturesSkipped = 0;\n            //loop through the pagination range and gets the html of each\n            for (int i = paginationRange[0]; i <= endPage; i++)\n            {\n                if (i > paginationRange[0]) //gets the html of next page after the initial url has been processed\n                {\n                    try\n                    {\n                        html = client.GetStringAsync(newUrl + $"&p={i}").GetAwaiter().GetResult();\n                        doc.LoadHtml(html);\n                    }\n                    catch (Exception)\n                    {\n                        Console.WriteLine($"Something went wrong with the url: ( {newUrl}&p={i} )");\n                        return;\n                    }\n                }\n                //if there is no next page and if there is no itemlist\n                if (!doc.DocumentNode.Descendants("p").Where(x => x.HasClass("pagination")).Any() && !doc.DocumentNode.Descendants("script").Where(x => x.InnerText.Contains("itemListElement")).Any())\n                    continue;\n                //extract jsonblock from html\n                string json = doc.DocumentNode.Descendants("script").Where(x => x.InnerText.Contains("itemListElement")).First().InnerText;\n                var data = JsonConvert.DeserializeObject<Scraper1Map>(json);    //map json to Scraper1Map\n\n                //loopthrough data.ItemListElements to download pictures for that specific pagination\n                for (int j = 0; j < data.ItemListElements.Length; j++)\n                {\n                    Console.Title = $"Downloading picture {j + 1}/{data.ItemListElements.Length} of page {i}/{endPage}! Downloaded from Url: {countRelative} Total Downloaded: {countTotal} Skipped: {picturesSkipped}";\n                    //parse the picture url to extract suitable file name\n                    string fileName = filterName.Match(data.ItemListElements[j].url).Value;\n                    //check if picture already exists, continue\n                    if (File.Exists(downloadFolderPath + fileName))\n                    {\n                        picturesSkipped++;\n                        Console.WriteLine($"Skipped {data.ItemListElements[j].url}");\n                        continue;\n                    }\n\n                    //download picture with GetMedia\n                    GetMedia(data.ItemListElements[j].url, downloadFolderPath + fileName, client).GetAwaiter().GetResult();\n                    countTotal++;\n                    countRelative++;\n                }\n            }\n            Console.WriteLine($"[Pages Downloaded: {pageCounter}] [Total Media Downloaded: {countTotal}] [Skipped: {picturesSkipped}]");\n            Console.Title = "Finished Grabbing, waiting for new URL!";\n        }\n\n        private static void SignIn(HttpClient client)\n        {\n            //string ref = "/" + filterName.Match(redirect).Value;\n            string url = "scraper1 login url";\n            FormUrlEncodedContent form = new FormUrlEncodedContent(new Dictionary<string, string>\n            {\n                ["ref"] = "",\n                ["name"] = "",\n                ["password"] = "",\n                ["login"] = "",\n            });\n\n            HttpResponseMessage response = client.PostAsync(url, form).GetAwaiter().GetResult();\n\n            if (response.StatusCode != System.Net.HttpStatusCode.RedirectMethod)\n                Console.WriteLine("Login failed!");\n        }\n\n        private static async Task GetMedia(string mediaUrl, string downloadPath, HttpClient client) //downloads file to specified path using httpclient\n        {\n            File.WriteAllBytes(downloadPath, (await client.GetByteArrayAsync(mediaUrl)));\n        }\n\n        #endregion\n    }\n}\n',fileName:"scraper1",language:"csharp",id:"61"},{path:'using Newtonsoft.Json;\n\nnamespace ImageGrabberConsoleApp.Maps\n{\n    public class Scraper1Map\n    {\n        [JsonProperty("itemListElement")]\n        public ItemListElement[] ItemListElements { get; set; }\n\n        public class ItemListElement\n        {\n            public string url { get; set; }\n        }\n    }\n}\n',fileName:"scraper1Map",language:"csharp",id:"62"},{path:'using System;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing ExtensionClass;\nusing ImageGrabberConsoleApp.Maps;\n\nnamespace ImageGrabberConsoleApp.Grabbers\n{\n    class Scraper2\n    {\n        //note: pagination specific to scraper2\n        #region Scraper\n        // ({.*}) everything between {}              (d+) all numbers\n        private static string html = string.Empty, nextPageHref = string.Empty;\n        private static int countTotal = 0, countRelative = 0, picturesSkipped = 0;\n        private static readonly HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();\n        private static readonly Regex filterPagination = new Regex(@"(d+)"), filterFragmentedJson = new Regex(@"{.*}");\n\n        public void Scrape(string url, HttpClient client, int numOfPages)   //numOfPages, the number of pages the user wants to grab from\n        {\n            try\n            {\n                html = client.GetStringAsync(url).GetAwaiter().GetResult();\n                doc.LoadHtml(html);\n            }\n            catch (Exception)\n            {\n                Console.WriteLine("Something went wrong with the inputted url");\n                return;\n            }\n            string newUrl = string.Empty;\n            //grab text from the first title tag\n            string title = doc.DocumentNode.Descendants("title").First().InnerText;\n\n            char[] seperators = new char[] { \'|\', \'\\\', \'/\' };\n\n            if (seperators.Any(title.Contains))\n                title = title.Replace(seperators, " ");\n\n            //create folder on desktop with title\n            string root = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); //finds the desktop of current user and stores in string root\n            Directory.CreateDirectory(root + $@"{title}");               //creates necessary folders/directories\n            string downloadFolderPath = root + $@"{title}";\n\n            /*\n            convert matches to string array then string array to int array\n            range paginationRange[1] -> paginationRange[paginationRange.Length - 2]\n            */\n\n            int startPage = 1;\n            int endPage = 1;\n            if (doc.DocumentNode.Descendants("div").Where(x => x.HasClass("pagination")).Any())\n            {\n                var paginationRange = filterPagination.Matches(doc.DocumentNode.Descendants("div").Where(x => x.HasClass("pagination")).First().InnerText).Cast<Match>().Select(m => m.Value).ToArray().Select(int.Parse).ToArray();\n                startPage = int.Parse(doc.DocumentNode.Descendants("em").Where(x => x.HasClass("current")).First().InnerText);  //em tag with class current, gives value indicating current page\n                endPage = paginationRange[paginationRange.Length - 2];\n            }\n\n            //if no input was made for numOfPages default to max pages grabbed, else endPage is set as desired\n            if ((numOfPages > 0) && ((startPage + numOfPages - 1) <= endPage))\n                endPage = startPage + numOfPages - 1;\n\n            //clear url of queries to be able to attach next_page href\n            if (url.Contains("Scraper2 url"))\n                newUrl = url.Substring(0, 20);\n            else\n                newUrl = url.Substring(0, 16);\n\n            if (doc.DocumentNode.Descendants("a").Where(x => x.HasClass("next_page")).Any())\n                nextPageHref = doc.DocumentNode.Descendants("a").Where(x => x.HasClass("next_page")).First().Attributes["href"].Value;\n\n            int pageCounter = 0;\n            countRelative = 0;\n            picturesSkipped = 0;\n            //loop through the pagination range and gets the html of each\n            for (int i = startPage; i <= endPage; i++)\n            {\n                if (i > startPage) //gets the html of next page after the initial url has been processed\n                {\n                    try\n                    {\n                        html = client.GetStringAsync(newUrl + nextPageHref).GetAwaiter().GetResult();\n                        doc.LoadHtml(html);\n\n                        if (doc.DocumentNode.Descendants("a").Where(x => x.HasClass("next_page")).Any())\n                            nextPageHref = doc.DocumentNode.Descendants("a").Where(x => x.HasClass("next_page")).First().Attributes["href"].Value;\n                    }\n                    catch (Exception)\n                    {\n                        Console.WriteLine($"Something went wrong with the url: ( {newUrl}{nextPageHref} )");\n                        return;\n                    }\n                }\n                if (!doc.DocumentNode.Descendants("script").Where(x => x.InnerText.Contains("Post.register")).Any())\n                    continue;\n\n\n                //extract multiple jsonblock from html and skips first block (first block has unneccessary info), creates array then joins all idexes together into string json\n                var jsonArray = filterFragmentedJson.Matches(doc.DocumentNode.Descendants("script").Where(x => x.InnerText.Contains("Post.register")).First().InnerText).Cast<Match>().Select(m => m.Value).Skip(1).ToArray();\n                string json = ("{"itemListElement":[" + string.Join(",", jsonArray) + "]}");\n                var data = JsonConvert.DeserializeObject<Scraper2Map>(json);    //map json to Scraper2Map\n\n                if (!data.ItemListElements.Any())\n                    continue;\n                //loopthrough data.ItemListElements to download pictures for that specific pagination\n                for (int j = 0; j < data.ItemListElements.Length; j++)\n                {\n                    Console.Title = $"Downloading picture {j + 1}/{data.ItemListElements.Length} of page {i}/{endPage}! Downloaded from Url: {countRelative} Total Downloaded: {countTotal} Skipped: {picturesSkipped}";\n                    //parse the picture url to extract suitable file name\n                    string fileName = data.ItemListElements[j].id + ".jpg";\n                    //check if picture already exists, continue\n                    if (File.Exists(downloadFolderPath + fileName))\n                    {\n                        picturesSkipped++;\n                        Console.WriteLine($"Skipped {data.ItemListElements[j].jpeg_url}");\n                        continue;\n                    }\n\n                    //download picture with GetMedia\n                    GetMedia(data.ItemListElements[j].jpeg_url, downloadFolderPath + fileName, client).GetAwaiter().GetResult();\n                    countTotal++;\n                    countRelative++;\n                }\n            }\n            Console.WriteLine($"[Pages Downloaded: {pageCounter}] [Total Media Downloaded: {countTotal}] [Skipped: {picturesSkipped}]");\n            Console.Title = "Finished Grabbing, waiting for new URL!";\n        }\n\n        private static async Task GetMedia(string mediaUrl, string downloadPath, HttpClient client) //downloads file to specified path using httpclient\n        {\n            File.WriteAllBytes(downloadPath, (await client.GetByteArrayAsync(mediaUrl)));\n        }\n\n        #endregion\n    }\n}\n',fileName:"scraper2",language:"csharp",id:"63"},{path:'using Newtonsoft.Json;\n\nnamespace ImageGrabberConsoleApp.Maps\n{\n    public class Scraper2Map\n    {\n        [JsonProperty("itemListElement")]\n        public ItemListElement[] ItemListElements { get; set; }\n\n        public class ItemListElement\n        {\n            public string id { get; set; }\n            public string file_url { get; set; }\n            public string jpeg_url { get; set; }\n        }\n    }\n}\n',fileName:"scraper2Map",language:"csharp",id:"64"},{path:'using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\n\nnamespace ImageGrabberConsoleApp.Grabbers\n{\n    class Scraper3\n    {\n        //note: pagination specific to Scraper3\n        #region Scraper\n        // ([^/]+$) everything after last /              (d+) all numbers\n        private static string html = string.Empty, nextPageHref = string.Empty;\n        private static int countTotal = 0, countRelative = 0, picturesSkipped = 0;\n        private static readonly HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();\n        private static readonly Regex filterName = new Regex(@"([^/]+$)");\n        private static bool downloadAll = false;\n\n        public void Scrape(string url, HttpClient client, int numOfPages) //numOfPages, the number of pages the user wants to grab from\n        {\n            try\n            {\n                html = client.GetStringAsync(url).GetAwaiter().GetResult();\n                doc.LoadHtml(html);\n            }\n            catch (Exception)\n            {\n                Console.WriteLine("Something went wrong with the inputted url");\n                return;\n            }\n            string newUrl = string.Empty;\n\n            string title = doc.DocumentNode.Descendants("title").First().InnerText;\n\n            if (title.Contains(\'|\'))\n                title = title.Replace(\'|\', \' \');\n\n            //create folder on desktop with title\n            string root = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); //finds the desktop of current user and stores in string root\n            Directory.CreateDirectory(root + $@"{title}");               //creates necessary folders/directories\n            string downloadFolderPath = root + $@"{title}";\n\n            //convert matches to string array then string array to int array\n            int startPage = 1;\n            //if (doc.DocumentNode.Descendants("li").Where(x => x.HasClass("current-page")).Any())\n                //startPage = int.Parse(doc.DocumentNode.Descendants("li").Where(x => x.HasClass("current-page")).First().InnerText);  //li tag with class current-page, gives value indicating current page\n\n            //gets rid of pagination querry that is included in original url\n            newUrl = url.Substring(0, 26);\n            var endPage = 0;\n            if (numOfPages > 0) //setup endPage to break out of the while loop if a desired number of pages was inputted\n                endPage = startPage + numOfPages - 1;\n            if (endPage == 0)\n                downloadAll = true;\n            countRelative = 0;\n            picturesSkipped = 0;\n            //loop through the pagination range and gets the html of each\n            int i = startPage;\n            int pageCounter = 0;\n            bool continueLoop = true;\n            while (continueLoop)    //while loop because some urls do not include information on a last page\n            {\n                if (i > startPage) //gets the html of next page after the initial url has been processed\n                {\n                    try\n                    {\n                        html = client.GetStringAsync(newUrl + nextPageHref).GetAwaiter().GetResult();\n                        doc.LoadHtml(html);\n                    }\n                    catch (Exception)\n                    {\n                        Console.WriteLine($"Something went wrong with the url: ( {newUrl}{nextPageHref} )");\n                        return;\n                    }\n                }\n                //last page has a paginator-next class in a "span" Descendant with no href\n                if (doc.DocumentNode.Descendants("a").Where(x => x.HasClass("paginator-next")).Any())   //checks for the tag containing information on the next page and gets the href if it exists, if not, set the loop to break after this run through\n                    nextPageHref = doc.DocumentNode.Descendants("a").Where(x => x.HasClass("paginator-next")).First().Attributes["href"].Value;\n                else\n                    continueLoop = false;\n\n                if (!doc.DocumentNode.Descendants("article").Where(x => x.HasClass("post-preview")).Any())  //if for some reason the page does not have media to download, move on to next loop iteration\n                {\n                    i++;\n                    continue;\n                }\n                    \n                //extract the media url from the article tag which has the class post-preview and add it to a list, use regex on the url to create a filename\n                List<string> fileUrl = new List<string>();\n                List<string> fileName = new List<string>();\n                foreach (var node in doc.DocumentNode.Descendants("article").Where(x => x.HasClass("post-preview")))\n                {\n                    fileUrl.Add(node.Attributes["data-file-url"].Value);\n                    fileName.Add(filterName.Match(node.Attributes["data-file-url"].Value).Value);\n                }\n\n                if (!fileUrl.Any())     //if there was an article tag but no media urls, continue to the next iteration\n                {\n                    i++;\n                    continue;\n                }\n                    \n                //loopthrough fileUrl to download pictures for that specific pagination\n                for (int j = 0; j < fileUrl.Count; j++)\n                {\n                    Console.Title = $"Downloading picture {j + 1}/{fileUrl.Count} of page {i}{(numOfPages > 0 ? "/" + endPage + "!" : "...")} Downloaded from Url: {countRelative} Total Downloaded: {countTotal} Skipped: {picturesSkipped}";\n                    //check if picture already exists, continue\n                    if (File.Exists(downloadFolderPath + fileName[j]))\n                    {\n                        picturesSkipped++;\n                        Console.WriteLine($"Skipped {fileUrl[j]}");\n                        continue;\n                    }\n\n                    //download picture with GetMedia\n                    GetMedia(fileUrl[j], downloadFolderPath + fileName[j], client).GetAwaiter().GetResult();\n                    countTotal++;\n                    countRelative++;\n                }\n                i++;\n                pageCounter++;\n                if (numOfPages > 0)\n                    if (i > endPage && !downloadAll)\n                        break;\n            }\n            Console.WriteLine($"[Pages Downloaded: {pageCounter}] [Total Media Downloaded: {countTotal}] [Skipped: {picturesSkipped}]");\n            Console.Title = "Finished Grabbing, waiting for new URL!";\n        }\n\n        private static async Task GetMedia(string mediaUrl, string downloadPath, HttpClient client) //downloads file to specified path using httpclient\n        {\n            File.WriteAllBytes(downloadPath, (await client.GetByteArrayAsync(mediaUrl)));\n        }\n\n        #endregion\n    }\n}\n\n',fileName:"scraper3",language:"csharp",id:"65"}],screenShots:[]},{name:"Friot",index:7,description:"Academic senior project focussing on Internet-of-Things. Mobile to microcontroller communication. This portion of the project is the android mobile app used to send requests to the microcontroller.",sourceCode:[{path:'package com.friot.activity;\n\nimport android.annotation.TargetApi;\nimport android.content.ActivityNotFoundException;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.speech.RecognizerIntent;\nimport android.text.method.ScrollingMovementMethod;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.CheckBox;\nimport android.widget.EditText;\nimport android.widget.ImageButton;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport com.friot.live.R;\nimport com.google.firebase.database.DataSnapshot;\nimport com.google.firebase.database.DatabaseError;\nimport com.google.firebase.database.DatabaseReference;\nimport com.google.firebase.database.FirebaseDatabase;\nimport com.google.firebase.database.ValueEventListener;\nimport com.google.gson.Gson;\n\nimport org.jetbrains.annotations.NotNull;\n\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Locale;\n\nimport okhttp3.Call;\nimport okhttp3.Callback;\nimport okhttp3.MultipartBody;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;\nimport okhttp3.Response;\n\npublic class Voice2Activity  extends AppCompatActivity {\n\n    private static final int REQ_CODE_SPEECH_INPUT = 100; //Value for speech detect Request Code\n    //Assigning controls to variables\n    private TextView input, totalText, responseBox, requestBox, serverText;\n    private CheckBox checkBox;\n    private EditText editText, editText2;\n    private Date resultDate;\n    private String device = "", codeToSend = "", command = "", savedJson = "";\n    private boolean found = false;\n\n    //SimpleDateFormat to hold specific string pattern when displaying date/time    "MM/dd \'at\'"\n    private SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss aa", Locale.US);\n\n    private SharedPreferences preferences;\n    private SharedPreferences.Editor editor;\n\n    private FirebaseDatabase database;\n    private DatabaseReference ref;\n    private String jsonString = "";\n    private SnapshotMap parsedJson;\n\n    private OkHttpClient client = new OkHttpClient();\n    private String postUrl = "http://esp8266.local/receive";\n\n    private List<String> commandsList = Arrays.asList("off", "on", "blue", "light blue", "red", "pink", "magenta", "light magenta", "green", "light green", "cyan", "light cyan", "yellow", "light yellow");\n    private List<String> codesList = Arrays.asList("0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101");\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.voice2_activity);\n        editor = getPreferences(MODE_PRIVATE).edit();\n        preferences = getPreferences(MODE_PRIVATE);\n        savedJson = preferences.getString("savedJson", "");\n\n        Gson GSON = new Gson();\n        if (savedJson != "")\n            parsedJson = GSON.fromJson(savedJson, SnapshotMap.class);\n\n        database = FirebaseDatabase.getInstance();\n        ref = database.getReference("Devices");\n        ref.keepSynced(true);\n        DatabaseReference connected = database.getReference(".info/connected");\n\n        ImageButton activateSpeechBtn;\n        Button setButton, setServerWifiBtn, accessWifiSettingsBtn, displayDeviceButton;\n        //Connects assigned controls with respective ID from the UI\n        activateSpeechBtn = findViewById(R.id.btnSpeak);\n        setButton = findViewById(R.id.setButton);\n        setServerWifiBtn = findViewById(R.id.wifiIpBtn);\n        accessWifiSettingsBtn = findViewById(R.id.wifiSettingBtn);\n        displayDeviceButton = findViewById(R.id.displayDevices);\n        checkBox = findViewById(R.id.checkBox);\n        requestBox = findViewById(R.id.textView7);\n        responseBox = findViewById(R.id.response);\n        totalText = findViewById(R.id.allText);\n        input = findViewById(R.id.input);\n        serverText = findViewById(R.id.serverText);\n        editText = findViewById(R.id.editText);\n        editText2 = findViewById(R.id.editText2);\n\n        //Scrolling attribute to totalText TextView\n        //totalText.setMovementMethod(new ScrollingMovementMethod());\n        serverText.setMovementMethod(new ScrollingMovementMethod());\n\n        accessWifiSettingsBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                startActivity(new Intent(Settings.ACTION_WIFI_SETTINGS));\n            }\n        });\n\n        setButton.setOnClickListener(new View.OnClickListener() {\n            @TargetApi(Build.VERSION_CODES.GINGERBREAD)\n            @Override\n            public void onClick(View v) {\n                try\n                {\n                    Boolean changed = false, allStatus = false;\n                    String nameBox = editText2.getText().toString(), nameBox2 = editText.getText().toString();\n                    input.setText(""" + nameBox + " " + nameBox2 + """);\n                    resultDate = new Date(System.currentTimeMillis());\n\n                    for (SnapshotMap.Devices device : parsedJson.DEVICES) {\n                        if (device != null)\n                        {\n                            DatabaseReference data = FirebaseDatabase.getInstance().getReference("Devices").child(device.INDEX);\n                            if (nameBox.equals("all") && commandsList.contains(nameBox2))  //If "all" and nameBox2 is valid command change STATUS for every device\n                            {\n                                changed = true;\n                                allStatus = true;\n                                data.child("STATUS").setValue(nameBox2);\n                            }\n                            else if (device.NAME.equalsIgnoreCase(nameBox)) //Check if device exists\n                            {\n                                if (commandsList.contains(nameBox2))    //If command was entered in second box, Check and change STATUS\n                                {\n                                    data.child("STATUS").setValue(nameBox2);\n                                    responseBox.setText("Status changed.");\n                                    changed = true;\n                                    break;\n                                }\n                                else    //Else, NAME will be changed\n                                {\n                                    data.child("NAME").setValue(nameBox2);\n                                    responseBox.setText("Name changed.");\n                                    changed = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (!changed)\n                        responseBox.setText("Cannot find name to change or invalid command.");\n                    if (allStatus)\n                        responseBox.setText("Status changed.");\n\n                    totalText.setText(sdf.format(resultDate) + ": "" + nameBox + " " + nameBox2 + ""\n" + totalText.getText());\n                }\n                catch (Exception error)\n                {\n                    totalText.setText( error + "\r\n" + totalText.getText());\n                }\n            }\n        });\n\n        setServerWifiBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                try {\n                    Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://esp8266")); //Opens captive portal of local esp8266\n                    startActivity(browserIntent);\n                }catch (Exception e)\n                {\n                    serverText.setText(getString(R.string.serverLogger, sdf.format(resultDate), e.toString(),serverText.getText()));\n                }\n            }\n        });\n\n\n        //Click event to get IP and NAMEs from\n        displayDeviceButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                try {\n\n                    resultDate = new Date(System.currentTimeMillis());\n\n                    for (SnapshotMap.Devices device : parsedJson.DEVICES) //Loops through reference and displays information of each device\n                    {\n                        if (device != null)\n                            totalText.setText("Name: " + device.NAME + "  IP: " + device.IP + "  Status: " + device.STATUS + "\r\n" + totalText.getText());\n                    }\n                    totalText.setText(sdf.format(resultDate) + ": List of Devices:\r\n" + totalText.getText());\n                    responseBox.setText("Displayed Devices.");\n                }\n                catch  (Exception e)\n                {\n\n                    responseBox.setText(e.toString());\n                    totalText.setText(sdf.format(resultDate) + ": error\n" + totalText.getText());\n                }\n            }\n        });\n\n        connected.addValueEventListener(new ValueEventListener() {\n            @Override\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\n                Boolean connected = dataSnapshot.getValue(Boolean.class);    //Gets True or False if connected to firebase\n                resultDate = new Date(System.currentTimeMillis());\n                if (connected)\n                    serverText.setText(sdf.format(resultDate) + ": Database connected!\n" + totalText.getText());\n                else\n                    serverText.setText(sdf.format(resultDate) + ": Database not connected\n" + totalText.getText());\n            }\n\n            @Override\n            public void onCancelled(@NonNull DatabaseError databaseError) {\n\n            }\n        });\n        // Read from the database\n        ref.addValueEventListener(new ValueEventListener() {\n            @Override\n            public void onDataChange(DataSnapshot dataSnapshot) {\n                // This method is called once with the initial value and again\n                // whenever data at this location is updated.\n                try {\n                    Gson GSON = new Gson();\n                    jsonString = "{Devices:" + GSON.toJson(dataSnapshot.getValue()) + "}";  //Gets Json of the snapshot and reformat by adding strings at the beginning and end\n                    parsedJson = GSON.fromJson(jsonString, SnapshotMap.class);  //Maps the Json to be able to access any data in the Json\n                    editor.putString("savedJson", savedJson);   //Save the Json to be loaded\n                    editor.apply();\n                    resultDate = new Date(System.currentTimeMillis());\n                    serverText.setText(sdf.format(resultDate) + ": Database Updated!\n" + serverText.getText());\n                }\n                catch (Exception error)\n                {\n                    totalText.setText( error + "\r\n" + totalText.getText());\n                }\n            }\n\n            @Override\n            public void onCancelled(DatabaseError error) {\n                // Failed to read value\n\n            }\n        });\n\n        //Click event to begin speech-to-text\n        activateSpeechBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) { startVoiceInput(); }\n        });\n    }\n\n    //public static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");\n    private Call CreatePostRequest(String OutputDevice, String Command)\n    {\n        RequestBody body = new MultipartBody.Builder()\n                .setType(MultipartBody.FORM)\n                .addFormDataPart("OutputDevice", OutputDevice)\n                .addFormDataPart( "Command", Command)\n                .build();\n        Request request = new Request.Builder()\n                .url(postUrl)\n                .post(body)\n                .build();\n        Call call = client.newCall(request);\n\n        return call;\n    }\n\n    private void SendCommand(String OutputDevice, String Code, String command)\n    {\n        try\n        {\n            if (checkBox.isChecked())   //Send command through firebase\n            {\n                Boolean changed = false;\n\n                for (SnapshotMap.Devices device : parsedJson.DEVICES) {\n                    if (device != null)\n                    {\n                        DatabaseReference data = FirebaseDatabase.getInstance().getReference("Devices").child(device.INDEX);    //Get database reference pointer\n                        if (OutputDevice.equals("all") && commandsList.contains(command)) //If "all" devices\n                        {\n                            data.child("STATUS").setValue(command); //Set STATUS as command for each device\n                            changed = true;\n                        }\n                        else if (device.NAME.equalsIgnoreCase(OutputDevice))    //If OuputDevice matches an existing Device, change STATUS\n                        {\n                            if (commandsList.contains(command))\n                            {\n                                data.child("STATUS").setValue(command);\n                                changed = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (!changed)\n                    responseBox.setText("Cannot find name to change or invalid command.");\n                else\n                    responseBox.setText("Status changed.");\n            }\n            else\n            {\n                Call call = CreatePostRequest(OutputDevice, Code);\n                call.enqueue(new Callback() {\n                    @Override\n                    public void onFailure(@NotNull Call call, @NotNull IOException e) {\n                        resultDate = new Date(System.currentTimeMillis());\n                        serverText.setText(getString(R.string.failedConnection, sdf.format(resultDate),serverText.getText()));\n                        serverText.setText(getString(R.string.serverLogger, sdf.format(resultDate), e.toString(),serverText.getText()));\n                        requestBox.setText(e.toString());\n                    }\n\n                    @Override\n                    public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {\n                        String respData = response.body().string();\n                        serverText.setText(getString(R.string.serverLogger, sdf.format(resultDate), respData,serverText.getText()));\n                        requestBox.setText(respData);\n                    }\n                });\n            }\n        } catch (Exception e)\n        {\n            String temp = "No URL or Invalid URL! " + postUrl;\n            serverText.setText(getString(R.string.serverLogger, sdf.format(resultDate), temp,serverText.getText()));\n            requestBox.setText(e.toString());\n        }\n    }\n\n    //Initialize needed specifications for speech analysis and start voice input\n    private void startVoiceInput() {\n        //Set specific parameters to the speech recognizer\n        Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);\n        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);\n        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault());\n        intent.putExtra(RecognizerIntent.EXTRA_PROMPT, "Please specify a command.");\n\n        //Try catch for voice input\n        try {\n            startActivityForResult(intent, REQ_CODE_SPEECH_INPUT);\n        } catch (ActivityNotFoundException a) {\n            input.setText(a.toString());\n        }\n    }\n\n    private void setNameAndCode(String speechResult)\n    {\n        try\n        {\n            List<String> speech = new LinkedList<String>(Arrays.asList(speechResult.toLowerCase().split(" "))); //Convert speech to List String to manipulate\n            command = speech.get(speech.size() - 1);    //Gets the command from speech\n            speech.remove(speech.size() - 1);   //Removes the command from speech\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n                device = String.join(" ", speech).toLowerCase();    //Gets the device from speech\n            }\n            found = false;\n            postUrl = "http://esp8266.local/receive";\n            if (commandsList.contains(command)) //Check if command is valid and retrieve the codeToSend for codesList\n                codeToSend = codesList.get(commandsList.indexOf(command));\n\n            if (device.equalsIgnoreCase("all")) //If device name is "all"\n            {\n                if (!checkBox.isChecked())  //Set post url to first IP address\n                    postUrl = "http://" + parsedJson.DEVICES[0].IP + "/receive";\n                found = true;\n            }\n            else\n            {\n                //Loop through reference, set post url\n                for (SnapshotMap.Devices dev : parsedJson.DEVICES)\n                {\n                    if (dev != null)\n                    {\n                        if (dev.NAME.equalsIgnoreCase(device))  //If device exists, set the post url with its IP\n                        {\n                            if (!checkBox.isChecked())\n                                postUrl = "http://" + dev.IP + "/receive";\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        catch (Exception error)\n        {\n            requestBox.setText(error.getMessage());\n        }\n    }\n\n    //After voice input finishes\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n\n        //When the request is for speech input\n        if (requestCode == REQ_CODE_SPEECH_INPUT)\n        {\n            //If successfully analyzed speech\n            if (resultCode == RESULT_OK && null != data) {\n                //Gets current time to be used in string output\n                resultDate = new Date(System.currentTimeMillis());\n                //Creates a String ArrayList "result," from the data of a successful analysis\n                ArrayList<String> result = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);\n\n                //Display word(s) from result\n                input.setText(getString(R.string.speechInput, result.get(0))); //Arrays.asList(result.get(0).toLowerCase().split(" "))   speech-to-text to list\n\n                //Evaluate speech with parsedJson, setting device and codeToSend, and checking if device exists\n                setNameAndCode(result.get(0));\n\n                requestBox.setText("");\n                try\n                {\n                    if (found)  //If device exists\n                        SendCommand(device, codeToSend, command);\n                    else\n                        codeToSend = "No Device Found!";\n\n                    totalText.setText(getString(R.string.totalTextR,sdf.format(resultDate), "", result.get(0), totalText.getText()));\n                    responseBox.setText("Action: "+ codeToSend + "...");\n\n                } catch (Exception e)\n                {\n                    requestBox.setText(e.getMessage());\n                }\n            }\n        }\n    }\n}\n',fileName:"VoiceActivity",language:"csharp",id:"80"}],screenShots:[{path:"p9/1.PNG",id:"s81"},{path:"p9/2.PNG",id:"s82"},{path:"p9/3.PNG",id:"s83"},{path:"p9/4.PNG",id:"s84"},{path:"p9/5.PNG",id:"s85"},{path:"p9/6.PNG",id:"s86"},{path:"p9/7.PNG",id:"s87"},{path:"p9/8.PNG",id:"s88"}]}]},m=(t(16),t(0)),h=function(e){var n=Object(o.useRef)(null),t=Object(o.useState)(""),a=Object(c.a)(t,2),i=a[0],r=a[1];return Object(m.jsx)("div",{children:Object(m.jsxs)("div",{className:"bottomContainer",children:[Object(m.jsx)("div",{className:"pictureContainer",children:Object(m.jsx)("img",{className:"picture",alt:"",src:"resources/s/".concat(e.selectedS),onClick:function(t){return function(e){document.body.style.overflow="hidden",n.current.style.visibility="visible",r(Object(m.jsx)("img",{className:"zoomedImage",alt:"",src:e,onClick:function(e){document.body.style.overflow="auto",r(""),n.current.style.visibility="hidden"}}))}("resources/s/".concat(e.selectedS))}})}),Object(m.jsx)("div",{className:"sPanel",children:e.loop2}),Object(m.jsx)("div",{className:"zoomedImageContainer",ref:n,children:i})]})})},f=function(){var e="",n=Object(o.useState)("test"),t=Object(c.a)(n,2),a=t[0],i=t[1],r=Object(o.useState)("test2"),s=Object(c.a)(r,2),u=s[0],f=s[1],v=Object(o.useState)(""),b=Object(c.a)(v,2),w=b[0],y=b[1],x=function(n){if(e!==n){e=n;var t=[],o=[];T=g.project[n].sourceCode[0].fileName,g.project[n].sourceCode.length>0&&g.project[n].sourceCode.forEach((function(e){t.push(Object(m.jsx)("button",{className:"button2",onClick:function(n){return $(e.path,e.language,e.fileName)},children:e.fileName},e.id))})),g.project[n].screenShots.length>0?(g.project[n].screenShots.forEach((function(e){o.push(Object(m.jsx)("div",{className:"sThumbContainer",children:Object(m.jsx)("img",{className:"sThumb",alt:"",src:"resources/s/".concat(e.path),onClick:function(n){return Y(e.path)}})},e.id))})),Y(g.project[n].screenShots[0].path)):Y("noPictures.png"),A(g.project[n].description),i(g.project[n].name),f(g.project[n].sourceCode[0].fileName),P(t),H(o),M(g.project[n].sourceCode[0].path).then((function(e){U(e),C.current.scrollTop=0,p.a.highlightAll()}))}},T="",C=Object(o.useRef)(null),S=Object(o.useState)(""),D=Object(c.a)(S,2),k=D[0],P=D[1],I=Object(o.useState)(g.project[0].description),L=Object(c.a)(I,2),B=L[0],A=L[1],E=Object(o.useState)(""),N=Object(c.a)(E,2),R=N[0],U=N[1],j=Object(o.useState)(g.project[0].sourceCode[0].language),O=Object(c.a)(j,2),F=O[0],G=O[1],M=function(){var e=Object(d.a)(l.a.mark((function e(n){return l.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",n);case 1:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),$=function(e,n,t){T!==t&&(T=t,G(n),f(t),M(e).then((function(e){U(e),C.current.scrollTop=0,p.a.highlightAll()})))},_=Object(o.useState)(""),V=Object(c.a)(_,2),q=V[0],H=V[1],W=Object(o.useState)(g.project[0].screenShots[0]),J=Object(c.a)(W,2),z=J[0],K=J[1],Q="",Y=function(e){Q!==e&&(Q=e,K(e))};return Object(o.useEffect)((function(){var e=[];g.project.forEach((function(n){e.push(Object(m.jsx)("button",{className:"button1",onClick:function(e){x(n.index)},children:n.name},n.index))})),y(e),x(0)}),[]),Object(m.jsxs)("div",{children:[Object(m.jsxs)("div",{className:"sideNav",children:[Object(m.jsxs)("div",{className:"selected",children:["Selected:",Object(m.jsx)("br",{}),a,", ",u]}),w]}),Object(m.jsxs)("div",{className:"mainContainer",children:[Object(m.jsxs)("div",{className:"description",children:["Description: ",B]}),Object(m.jsxs)("div",{className:"topContainer",children:[Object(m.jsx)("div",{className:"scPanel",children:k}),Object(m.jsx)("div",{className:"scContainer",children:Object(m.jsx)("pre",{className:"line-numbers",ref:C,children:Object(m.jsx)("code",{className:"language-".concat(F),children:R})})})]}),Object(m.jsx)(h,{selectedS:z,loop2:q})]})]})};var v=function(){return Object(m.jsxs)("div",{children:[Object(m.jsx)("div",{className:"header",children:Object(m.jsx)("div",{className:"topNav",children:Object(m.jsx)("a",{href:"index2.html",className:"link button3",children:"jQuery Youtube Project"})})}),Object(m.jsx)(f,{})]})},b=function(e){e&&e instanceof Function&&t.e(3).then(t.bind(null,19)).then((function(n){var t=n.getCLS,o=n.getFID,a=n.getFCP,i=n.getLCP,r=n.getTTFB;t(e),o(e),a(e),i(e),r(e)}))};r.a.render(Object(m.jsx)(a.a.StrictMode,{children:Object(m.jsx)(v,{})}),document.getElementById("root")),b()}},[[18,1,2]]]);
//# sourceMappingURL=main.aab823ee.chunk.js.map